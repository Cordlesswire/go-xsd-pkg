//	Auto-generated by the "go-xsd" package located at:
//		github.com/miracl/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		docs.oasis-open.org/security/saml/v2.0/saml-schema-authn-context-timesync-2.0.xsd
package go_SamlAuthnContextTimesync20

import (
	sac "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-authn-context-2.0.xsd_go"
	sact "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-authn-context-types-2.0.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"urn:oasis:names:tc:SAML:2.0:ac:classes:TimeSyncToken ID,attr"`
}

type TAuthnContextDeclarationBaseType struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	*TAuthnContextDeclarationBaseType

	sac.XsdGoPkgHasElem_Identification

	sact.XsdGoPkgHasElem_TechnicalProtection

	sac.XsdGoPkgHasElem_OperationalProtection

	sac.XsdGoPkgHasElem_AuthnMethod

	sac.XsdGoPkgHasElem_GoverningAgreements

	sac.XsdGoPkgHasElems_Extension
}

//	If the WalkHandlers.TAuthnContextDeclarationBaseType function is not nil (ie. was set by outside code), calls it with this TAuthnContextDeclarationBaseType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TAuthnContextDeclarationBaseType instance.
func (me *TAuthnContextDeclarationBaseType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnContextDeclarationBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TAuthnContextDeclarationBaseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPrincipalAuthenticationMechanismType struct {
	*TPrincipalAuthenticationMechanismType

	sac.XsdGoPkgHasElem_Token
}

//	If the WalkHandlers.TPrincipalAuthenticationMechanismType function is not nil (ie. was set by outside code), calls it with this TPrincipalAuthenticationMechanismType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TPrincipalAuthenticationMechanismType instance.
func (me *TPrincipalAuthenticationMechanismType) Walk() (err error) {
	if fn := WalkHandlers.TPrincipalAuthenticationMechanismType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TPrincipalAuthenticationMechanismType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TokenType struct {
	*TokenType

	sac.XsdGoPkgHasElem_TimeSyncToken

	sac.XsdGoPkgHasElems_Extension
}

//	If the WalkHandlers.TokenType function is not nil (ie. was set by outside code), calls it with this TokenType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TokenType instance.
func (me *TokenType) Walk() (err error) {
	if fn := WalkHandlers.TokenType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TokenType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType sac.TDeviceTypeType

//	Since TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType) Set(s string) {
	(*sac.TDeviceTypeType)(me).Set(s)
}

//	Since TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType is just a simple String type, this merely returns the current string value.
func (me TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType) String() string {
	return sac.TDeviceTypeType(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType's alias type sac.TDeviceTypeType.
func (me TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType) ToTDeviceTypeType() sac.TDeviceTypeType {
	return sac.TDeviceTypeType(me)
}

//	Returns true if the value of this enumerated TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType is "hardware".
func (me TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType) IsHardware() bool {
	return me.String() == "hardware"
}

type TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionSeedLength xsdt.Integer

//	Since TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionSeedLength is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionSeedLength) Set(s string) {
	(*xsdt.Integer)(me).Set(s)
}

//	Returns a string representation of this TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionSeedLength's current non-string scalar value.
func (me TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionSeedLength) String() string {
	return xsdt.Integer(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionSeedLength's alias type xsdt.Integer.
func (me TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionSeedLength) ToXsdtInteger() xsdt.Integer {
	return xsdt.Integer(me)
}

type TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand sac.TbooleanType

//	Since TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand) Set(s string) {
	(*sac.TbooleanType)(me).Set(s)
}

//	Since TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand is just a simple String type, this merely returns the current string value.
func (me TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand) String() string {
	return sac.TbooleanType(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand's alias type sac.TbooleanType.
func (me TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand) ToTbooleanType() sac.TbooleanType {
	return sac.TbooleanType(me)
}

//	Returns true if the value of this enumerated TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand is "true".
func (me TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand) IsTrue() bool {
	return me.String() == "true"
}

type XsdGoPkgHasAttr_DeviceInHand_TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand_ struct {
	DeviceInHand TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand `xml:"urn:oasis:names:tc:SAML:2.0:ac:classes:TimeSyncToken DeviceInHand,attr"`
}

type XsdGoPkgHasAttr_DeviceType_TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType_ struct {
	DeviceType TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType `xml:"urn:oasis:names:tc:SAML:2.0:ac:classes:TimeSyncToken DeviceType,attr"`
}

type XsdGoPkgHasAttr_SeedLength_TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionSeedLength_ struct {
	SeedLength TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionSeedLength `xml:"urn:oasis:names:tc:SAML:2.0:ac:classes:TimeSyncToken SeedLength,attr"`
}

type TimeSyncTokenType struct {
	XsdGoPkgHasAttr_DeviceInHand_TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceInHand_

	*TimeSyncTokenType

	XsdGoPkgHasAttr_DeviceType_TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionDeviceType_

	XsdGoPkgHasAttr_SeedLength_TxsdRedefineTimeSyncTokenTypeComplexContentRestrictionSeedLength_
}

//	If the WalkHandlers.TimeSyncTokenType function is not nil (ie. was set by outside code), calls it with this TimeSyncTokenType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TimeSyncTokenType instance.
func (me *TimeSyncTokenType) Walk() (err error) {
	if fn := WalkHandlers.TimeSyncTokenType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimeSyncTokenType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAuthnMethodBaseType struct {
	*TAuthnMethodBaseType

	sac.XsdGoPkgHasElem_PrincipalAuthenticationMechanism

	sac.XsdGoPkgHasElem_Authenticator

	sac.XsdGoPkgHasElem_AuthenticatorTransportProtocol

	sac.XsdGoPkgHasElems_Extension
}

//	If the WalkHandlers.TAuthnMethodBaseType function is not nil (ie. was set by outside code), calls it with this TAuthnMethodBaseType instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TAuthnMethodBaseType instance.
func (me *TAuthnMethodBaseType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnMethodBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TAuthnMethodBaseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 6 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 6 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TokenType                             func(*TokenType, bool) error
	TimeSyncTokenType                     func(*TimeSyncTokenType, bool) error
	XsdGoPkgHasCdata                      func(*XsdGoPkgHasCdata, bool) error
	TAuthnMethodBaseType                  func(*TAuthnMethodBaseType, bool) error
	TAuthnContextDeclarationBaseType      func(*TAuthnContextDeclarationBaseType, bool) error
	TPrincipalAuthenticationMechanismType func(*TPrincipalAuthenticationMechanismType, bool) error
}
