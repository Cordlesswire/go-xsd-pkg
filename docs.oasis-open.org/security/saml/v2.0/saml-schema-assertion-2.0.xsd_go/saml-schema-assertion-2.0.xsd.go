//	Auto-generated by the "go-xsd" package located at:
//		github.com/miracl/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd
package go_SamlAssertion20

//	Document identifier: saml-schema-assertion-2.0
//	Location: http://docs.oasis-open.org/security/saml/v2.0/
//	Revision history:
//	V1.0 (November, 2002):
//	Initial Standard Schema.
//	V1.1 (September, 2003):
//	Updates within the same V1.0 namespace.
//	V2.0 (March, 2005):
//	New assertion schema for SAML V2.0 namespace.

import (
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xenc "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

type XsdGoPkgHasAttr_NameQualifier_XsdtString_ struct {
	NameQualifier xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion NameQualifier,attr"`
}

type XsdGoPkgHasAttr_SPNameQualifier_XsdtString_ struct {
	SPNameQualifier xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion SPNameQualifier,attr"`
}

type XsdGoPkgHasAtts_IDNameQualifiers struct {
	XsdGoPkgHasAttr_NameQualifier_XsdtString_

	XsdGoPkgHasAttr_SPNameQualifier_XsdtString_
}

type TBaseIDAbstractType struct {
	XsdGoPkgHasAtts_IDNameQualifiers
}

//	If the WalkHandlers.TBaseIDAbstractType function is not nil (ie. was set by outside code), calls it with this TBaseIDAbstractType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TBaseIDAbstractType instance.
func (me *TBaseIDAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TBaseIDAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BaseID struct {
	BaseIDs []*TBaseIDAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion BaseID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BaseID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BaseID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BaseID instance.
func (me *XsdGoPkgHasElems_BaseID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BaseID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BaseIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BaseID struct {
	BaseID *TBaseIDAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion BaseID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BaseID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BaseID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BaseID instance.
func (me *XsdGoPkgHasElem_BaseID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BaseID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BaseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Format_XsdtAnyURI_ struct {
	Format xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Format,attr"`
}

type XsdGoPkgHasAttr_SPProvidedID_XsdtString_ struct {
	SPProvidedID xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion SPProvidedID,attr"`
}

type TNameIDType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_IDNameQualifiers

	XsdGoPkgHasAttr_Format_XsdtAnyURI_

	XsdGoPkgHasAttr_SPProvidedID_XsdtString_
}

//	If the WalkHandlers.TNameIDType function is not nil (ie. was set by outside code), calls it with this TNameIDType instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TNameIDType instance.
func (me *TNameIDType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NameID struct {
	NameID *TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion NameID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NameID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NameID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NameID instance.
func (me *XsdGoPkgHasElem_NameID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NameID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NameID struct {
	NameIDs []*TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion NameID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NameID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NameID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NameID instance.
func (me *XsdGoPkgHasElems_NameID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NameID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEncryptedElementType struct {
	xenc.XsdGoPkgHasElems_EncryptedKey

	xenc.XsdGoPkgHasElem_EncryptedData
}

//	If the WalkHandlers.TEncryptedElementType function is not nil (ie. was set by outside code), calls it with this TEncryptedElementType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TEncryptedElementType instance.
func (me *TEncryptedElementType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedElementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EncryptedID struct {
	EncryptedID *TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EncryptedID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EncryptedID instance.
func (me *XsdGoPkgHasElem_EncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EncryptedID struct {
	EncryptedIDs []*TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EncryptedID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EncryptedID instance.
func (me *XsdGoPkgHasElems_EncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Issuer struct {
	Issuer *TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Issuer"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Issuer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Issuer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Issuer instance.
func (me *XsdGoPkgHasElem_Issuer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Issuer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Issuer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Issuer struct {
	Issuers []*TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Issuer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Issuer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Issuer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Issuer instance.
func (me *XsdGoPkgHasElems_Issuer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Issuer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Issuers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssertionIDRef struct {
	AssertionIDRef xsdt.NCName `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionIDRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssertionIDRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssertionIDRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AssertionIDRef instance.
func (me *XsdGoPkgHasElem_AssertionIDRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssertionIDRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssertionIDRef struct {
	AssertionIDRefs []xsdt.NCName `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionIDRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssertionIDRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssertionIDRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssertionIDRef instance.
func (me *XsdGoPkgHasElems_AssertionIDRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssertionIDRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssertionURIRef struct {
	AssertionURIRef xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionURIRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssertionURIRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssertionURIRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AssertionURIRef instance.
func (me *XsdGoPkgHasElem_AssertionURIRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssertionURIRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssertionURIRef struct {
	AssertionURIRefs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionURIRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssertionURIRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssertionURIRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssertionURIRef instance.
func (me *XsdGoPkgHasElems_AssertionURIRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssertionURIRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TStatementAbstractType struct {
}

//	If the WalkHandlers.TStatementAbstractType function is not nil (ie. was set by outside code), calls it with this TStatementAbstractType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TStatementAbstractType instance.
func (me *TStatementAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TStatementAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Address_XsdtString_ struct {
	Address xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion Address,attr"`
}

type XsdGoPkgHasAttr_DNSName_XsdtString_ struct {
	DNSName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion DNSName,attr"`
}

type TSubjectLocalityType struct {
	XsdGoPkgHasAttr_Address_XsdtString_

	XsdGoPkgHasAttr_DNSName_XsdtString_
}

//	If the WalkHandlers.TSubjectLocalityType function is not nil (ie. was set by outside code), calls it with this TSubjectLocalityType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TSubjectLocalityType instance.
func (me *TSubjectLocalityType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectLocalityType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubjectLocality struct {
	SubjectLocality *TSubjectLocalityType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectLocality"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubjectLocality function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubjectLocality instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubjectLocality instance.
func (me *XsdGoPkgHasElem_SubjectLocality) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubjectLocality; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectLocality.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthnContextDecl struct {
	AuthnContextDecl xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDecl"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthnContextDecl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthnContextDecl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AuthnContextDecl instance.
func (me *XsdGoPkgHasElem_AuthnContextDecl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthnContextDecl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthnContextDeclRef struct {
	AuthnContextDeclRef xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDeclRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthnContextDeclRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthnContextDeclRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AuthnContextDeclRef instance.
func (me *XsdGoPkgHasElem_AuthnContextDeclRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthnContextDeclRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthenticatingAuthority struct {
	AuthenticatingAuthorities []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthenticatingAuthority"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthenticatingAuthority function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthenticatingAuthority instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthenticatingAuthority instance.
func (me *XsdGoPkgHasElems_AuthenticatingAuthority) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthenticatingAuthority; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthnContextClassRef struct {
	AuthnContextClassRef xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextClassRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthnContextClassRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthnContextClassRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AuthnContextClassRef instance.
func (me *XsdGoPkgHasElem_AuthnContextClassRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthnContextClassRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAuthnContextType struct {
	XsdGoPkgHasElem_AuthnContextDecl

	XsdGoPkgHasElem_AuthnContextDeclRef

	XsdGoPkgHasElems_AuthenticatingAuthority

	XsdGoPkgHasElem_AuthnContextClassRef
}

//	If the WalkHandlers.TAuthnContextType function is not nil (ie. was set by outside code), calls it with this TAuthnContextType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TAuthnContextType instance.
func (me *TAuthnContextType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnContextType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AuthenticatingAuthority.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AuthnContextClassRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AuthnContextDecl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AuthnContextDeclRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthnContext struct {
	AuthnContext *TAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContext"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthnContext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthnContext instance.
func (me *XsdGoPkgHasElem_AuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_SessionNotOnOrAfter_XsdtDateTime_ struct {
	SessionNotOnOrAfter xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:assertion SessionNotOnOrAfter,attr"`
}

type XsdGoPkgHasAttr_AuthnInstant_XsdtDateTime_ struct {
	AuthnInstant xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnInstant,attr"`
}

type XsdGoPkgHasAttr_SessionIndex_XsdtString_ struct {
	SessionIndex xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion SessionIndex,attr"`
}

type TAuthnStatementType struct {
	XsdGoPkgHasAttr_AuthnInstant_XsdtDateTime_

	XsdGoPkgHasAttr_SessionIndex_XsdtString_

	TStatementAbstractType

	XsdGoPkgHasElem_SubjectLocality

	XsdGoPkgHasElem_AuthnContext

	XsdGoPkgHasAttr_SessionNotOnOrAfter_XsdtDateTime_
}

//	If the WalkHandlers.TAuthnStatementType function is not nil (ie. was set by outside code), calls it with this TAuthnStatementType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TAuthnStatementType instance.
func (me *TAuthnStatementType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnStatementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatementAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubjectLocality.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthnStatement struct {
	AuthnStatements []*TAuthnStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnStatement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthnStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthnStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthnStatement instance.
func (me *XsdGoPkgHasElems_AuthnStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthnStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnStatements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_NotBefore_XsdtDateTime_ struct {
	NotBefore xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:assertion NotBefore,attr"`
}

type XsdGoPkgHasAttr_NotOnOrAfter_XsdtDateTime_ struct {
	NotOnOrAfter xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:assertion NotOnOrAfter,attr"`
}

type XsdGoPkgHasAttr_Recipient_XsdtAnyURI_ struct {
	Recipient xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Recipient,attr"`
}

type XsdGoPkgHasAttr_InResponseTo_XsdtNCName_ struct {
	InResponseTo xsdt.NCName `xml:"urn:oasis:names:tc:SAML:2.0:assertion InResponseTo,attr"`
}

type XsdGoPkgHasAnyTypeCdata struct {
	XsdGoPkgCDATA xsdt.AnyType `xml:",chardata"`
}

type TSubjectConfirmationDataType struct {
	XsdGoPkgHasAttr_Recipient_XsdtAnyURI_

	XsdGoPkgHasAttr_InResponseTo_XsdtNCName_

	XsdGoPkgHasAttr_Address_XsdtString_

	XsdGoPkgHasAnyTypeCdata

	XsdGoPkgHasAttr_NotBefore_XsdtDateTime_

	XsdGoPkgHasAttr_NotOnOrAfter_XsdtDateTime_
}

//	If the WalkHandlers.TSubjectConfirmationDataType function is not nil (ie. was set by outside code), calls it with this TSubjectConfirmationDataType instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TSubjectConfirmationDataType instance.
func (me *TSubjectConfirmationDataType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectConfirmationDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubjectConfirmationData struct {
	SubjectConfirmationData *TSubjectConfirmationDataType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmationData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubjectConfirmationData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubjectConfirmationData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubjectConfirmationData instance.
func (me *XsdGoPkgHasElem_SubjectConfirmationData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubjectConfirmationData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectConfirmationData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Method_XsdtAnyURI_ struct {
	Method xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Method,attr"`
}

type TSubjectConfirmationType struct {
	XsdGoPkgHasAttr_Method_XsdtAnyURI_

	XsdGoPkgHasElem_BaseID

	XsdGoPkgHasElem_NameID

	XsdGoPkgHasElem_EncryptedID

	XsdGoPkgHasElem_SubjectConfirmationData
}

//	If the WalkHandlers.TSubjectConfirmationType function is not nil (ie. was set by outside code), calls it with this TSubjectConfirmationType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TSubjectConfirmationType instance.
func (me *TSubjectConfirmationType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectConfirmationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubjectConfirmationData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BaseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NameID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubjectConfirmation struct {
	SubjectConfirmations []*TSubjectConfirmationType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubjectConfirmation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubjectConfirmation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubjectConfirmation instance.
func (me *XsdGoPkgHasElems_SubjectConfirmation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubjectConfirmation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectConfirmations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSubjectType struct {
	XsdGoPkgHasElems_SubjectConfirmation

	XsdGoPkgHasElem_BaseID

	XsdGoPkgHasElem_NameID

	XsdGoPkgHasElem_EncryptedID
}

//	If the WalkHandlers.TSubjectType function is not nil (ie. was set by outside code), calls it with this TSubjectType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TSubjectType instance.
func (me *TSubjectType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SubjectConfirmation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BaseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NameID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Subject struct {
	Subject *TSubjectType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Subject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subject instance.
func (me *XsdGoPkgHasElem_Subject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Subject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Subject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Assertion struct {
	Assertions []*TAssertionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Assertion"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Assertion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Assertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Assertion instance.
func (me *XsdGoPkgHasElems_Assertion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Assertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EncryptedAssertion struct {
	EncryptedAssertions []*TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAssertion"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EncryptedAssertion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EncryptedAssertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EncryptedAssertion instance.
func (me *XsdGoPkgHasElems_EncryptedAssertion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EncryptedAssertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedAssertions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAdviceType struct {
	XsdGoPkgHasElems_AssertionIDRef

	XsdGoPkgHasElems_AssertionURIRef

	XsdGoPkgHasElems_Assertion

	XsdGoPkgHasElems_EncryptedAssertion
}

//	If the WalkHandlers.TAdviceType function is not nil (ie. was set by outside code), calls it with this TAdviceType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TAdviceType instance.
func (me *TAdviceType) Walk() (err error) {
	if fn := WalkHandlers.TAdviceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_EncryptedAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssertionIDRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssertionURIRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Assertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Advice struct {
	Advice *TAdviceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Advice"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Advice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Advice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Advice instance.
func (me *XsdGoPkgHasElem_Advice) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Advice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Advice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"urn:oasis:names:tc:SAML:2.0:assertion ID,attr"`
}

type XsdGoPkgHasAttr_IssueInstant_XsdtDateTime_ struct {
	IssueInstant xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:assertion IssueInstant,attr"`
}

type XsdGoPkgHasElems_Statement struct {
	Statements []*TStatementAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Statement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Statement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Statement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Statement instance.
func (me *XsdGoPkgHasElems_Statement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Statement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Statements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Namespace_XsdtAnyURI_ struct {
	Namespace xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Namespace,attr"`
}

type TActionType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Namespace_XsdtAnyURI_
}

//	If the WalkHandlers.TActionType function is not nil (ie. was set by outside code), calls it with this TActionType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TActionType instance.
func (me *TActionType) Walk() (err error) {
	if fn := WalkHandlers.TActionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Action struct {
	Actions []*TActionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Action"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Action function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Action instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Action instance.
func (me *XsdGoPkgHasElems_Action) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Action; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Actions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEvidenceType struct {
	XsdGoPkgHasElems_AssertionIDRef

	XsdGoPkgHasElems_AssertionURIRef

	XsdGoPkgHasElems_Assertion

	XsdGoPkgHasElems_EncryptedAssertion
}

//	If the WalkHandlers.TEvidenceType function is not nil (ie. was set by outside code), calls it with this TEvidenceType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TEvidenceType instance.
func (me *TEvidenceType) Walk() (err error) {
	if fn := WalkHandlers.TEvidenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_EncryptedAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssertionIDRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssertionURIRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Assertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Evidence struct {
	Evidence *TEvidenceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Evidence"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Evidence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Evidence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Evidence instance.
func (me *XsdGoPkgHasElem_Evidence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Evidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Evidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Resource_XsdtAnyURI_ struct {
	Resource xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Resource,attr"`
}

type TDecisionType xsdt.String

//	Returns true if the value of this enumerated TDecisionType is "Permit".
func (me TDecisionType) IsPermit() bool { return me.String() == "Permit" }

//	Returns true if the value of this enumerated TDecisionType is "Deny".
func (me TDecisionType) IsDeny() bool { return me.String() == "Deny" }

//	Returns true if the value of this enumerated TDecisionType is "Indeterminate".
func (me TDecisionType) IsIndeterminate() bool { return me.String() == "Indeterminate" }

//	Since TDecisionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TDecisionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TDecisionType is just a simple String type, this merely returns the current string value.
func (me TDecisionType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TDecisionType's alias type xsdt.String.
func (me TDecisionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Decision_TDecisionType_ struct {
	Decision TDecisionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Decision,attr"`
}

type TAuthzDecisionStatementType struct {
	TStatementAbstractType

	XsdGoPkgHasElems_Action

	XsdGoPkgHasElem_Evidence

	XsdGoPkgHasAttr_Resource_XsdtAnyURI_

	XsdGoPkgHasAttr_Decision_TDecisionType_
}

//	If the WalkHandlers.TAuthzDecisionStatementType function is not nil (ie. was set by outside code), calls it with this TAuthzDecisionStatementType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TAuthzDecisionStatementType instance.
func (me *TAuthzDecisionStatementType) Walk() (err error) {
	if fn := WalkHandlers.TAuthzDecisionStatementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Action.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Evidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TStatementAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthzDecisionStatement struct {
	AuthzDecisionStatements []*TAuthzDecisionStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthzDecisionStatement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthzDecisionStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthzDecisionStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthzDecisionStatement instance.
func (me *XsdGoPkgHasElems_AuthzDecisionStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthzDecisionStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthzDecisionStatements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttributeValue struct {
	AttributeValues []xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttributeValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttributeValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttributeValue instance.
func (me *XsdGoPkgHasElems_AttributeValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttributeValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion Name,attr"`
}

type XsdGoPkgHasAttr_NameFormat_XsdtAnyURI_ struct {
	NameFormat xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion NameFormat,attr"`
}

type XsdGoPkgHasAttr_FriendlyName_XsdtString_ struct {
	FriendlyName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion FriendlyName,attr"`
}

type TAttributeType struct {
	XsdGoPkgHasElems_AttributeValue

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_NameFormat_XsdtAnyURI_

	XsdGoPkgHasAttr_FriendlyName_XsdtString_
}

//	If the WalkHandlers.TAttributeType function is not nil (ie. was set by outside code), calls it with this TAttributeType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TAttributeType instance.
func (me *TAttributeType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AttributeValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Attribute struct {
	Attributes []*TAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Attribute"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Attribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Attribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Attribute instance.
func (me *XsdGoPkgHasElems_Attribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Attribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Attributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EncryptedAttribute struct {
	EncryptedAttributes []*TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAttribute"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EncryptedAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EncryptedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EncryptedAttribute instance.
func (me *XsdGoPkgHasElems_EncryptedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EncryptedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAttributeStatementType struct {
	XsdGoPkgHasElems_EncryptedAttribute

	TStatementAbstractType

	XsdGoPkgHasElems_Attribute
}

//	If the WalkHandlers.TAttributeStatementType function is not nil (ie. was set by outside code), calls it with this TAttributeStatementType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAttributeStatementType instance.
func (me *TAttributeStatementType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeStatementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Attribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EncryptedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TStatementAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttributeStatement struct {
	AttributeStatements []*TAttributeStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeStatement"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttributeStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttributeStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttributeStatement instance.
func (me *XsdGoPkgHasElems_AttributeStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttributeStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeStatements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TConditionAbstractType struct {
}

//	If the WalkHandlers.TConditionAbstractType function is not nil (ie. was set by outside code), calls it with this TConditionAbstractType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TConditionAbstractType instance.
func (me *TConditionAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TConditionAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Condition struct {
	Conditions []*TConditionAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Condition"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Condition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Condition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Condition instance.
func (me *XsdGoPkgHasElems_Condition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Condition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conditions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Audience struct {
	Audiences []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Audience"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Audience function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Audience instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Audience instance.
func (me *XsdGoPkgHasElems_Audience) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Audience; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAudienceRestrictionType struct {
	XsdGoPkgHasElems_Audience

	TConditionAbstractType
}

//	If the WalkHandlers.TAudienceRestrictionType function is not nil (ie. was set by outside code), calls it with this TAudienceRestrictionType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TAudienceRestrictionType instance.
func (me *TAudienceRestrictionType) Walk() (err error) {
	if fn := WalkHandlers.TAudienceRestrictionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Audience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TConditionAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AudienceRestriction struct {
	AudienceRestrictions []*TAudienceRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AudienceRestriction"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AudienceRestriction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AudienceRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AudienceRestriction instance.
func (me *XsdGoPkgHasElems_AudienceRestriction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AudienceRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AudienceRestrictions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TOneTimeUseType struct {
	TConditionAbstractType
}

//	If the WalkHandlers.TOneTimeUseType function is not nil (ie. was set by outside code), calls it with this TOneTimeUseType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TOneTimeUseType instance.
func (me *TOneTimeUseType) Walk() (err error) {
	if fn := WalkHandlers.TOneTimeUseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TConditionAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OneTimeUse struct {
	OneTimeUses []*TOneTimeUseType `xml:"urn:oasis:names:tc:SAML:2.0:assertion OneTimeUse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OneTimeUse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OneTimeUse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OneTimeUse instance.
func (me *XsdGoPkgHasElems_OneTimeUse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OneTimeUse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OneTimeUses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Count_XsdtNonNegativeInteger_ struct {
	Count xsdt.NonNegativeInteger `xml:"urn:oasis:names:tc:SAML:2.0:assertion Count,attr"`
}

type TProxyRestrictionType struct {
	TConditionAbstractType

	XsdGoPkgHasElems_Audience

	XsdGoPkgHasAttr_Count_XsdtNonNegativeInteger_
}

//	If the WalkHandlers.TProxyRestrictionType function is not nil (ie. was set by outside code), calls it with this TProxyRestrictionType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TProxyRestrictionType instance.
func (me *TProxyRestrictionType) Walk() (err error) {
	if fn := WalkHandlers.TProxyRestrictionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TConditionAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Audience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProxyRestriction struct {
	ProxyRestrictions []*TProxyRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion ProxyRestriction"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProxyRestriction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProxyRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProxyRestriction instance.
func (me *XsdGoPkgHasElems_ProxyRestriction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProxyRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ProxyRestrictions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TConditionsType struct {
	XsdGoPkgHasElems_Condition

	XsdGoPkgHasElems_AudienceRestriction

	XsdGoPkgHasElems_OneTimeUse

	XsdGoPkgHasElems_ProxyRestriction

	XsdGoPkgHasAttr_NotBefore_XsdtDateTime_

	XsdGoPkgHasAttr_NotOnOrAfter_XsdtDateTime_
}

//	If the WalkHandlers.TConditionsType function is not nil (ie. was set by outside code), calls it with this TConditionsType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TConditionsType instance.
func (me *TConditionsType) Walk() (err error) {
	if fn := WalkHandlers.TConditionsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Condition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AudienceRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OneTimeUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ProxyRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Conditions struct {
	Conditions *TConditionsType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Conditions"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Conditions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Conditions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Conditions instance.
func (me *XsdGoPkgHasElem_Conditions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Conditions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Conditions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Version_XsdtString_ struct {
	Version xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion Version,attr"`
}

type TAssertionType struct {
	XsdGoPkgHasElems_Statement

	XsdGoPkgHasElems_AuthzDecisionStatement

	XsdGoPkgHasElems_AttributeStatement

	XsdGoPkgHasElem_Issuer

	XsdGoPkgHasElem_Conditions

	XsdGoPkgHasAttr_Version_XsdtString_

	XsdGoPkgHasElems_AuthnStatement

	ds.XsdGoPkgHasElem_Signature

	XsdGoPkgHasElem_Subject

	XsdGoPkgHasElem_Advice

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_IssueInstant_XsdtDateTime_
}

//	If the WalkHandlers.TAssertionType function is not nil (ie. was set by outside code), calls it with this TAssertionType instance as the single argument. Then calls the Walk() method on 8/12 embed(s) and 0/0 field(s) belonging to this TAssertionType instance.
func (me *TAssertionType) Walk() (err error) {
	if fn := WalkHandlers.TAssertionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AuthnStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Subject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Advice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Statement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AuthzDecisionStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AttributeStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Issuer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Conditions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Assertion struct {
	Assertion *TAssertionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Assertion"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Assertion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Assertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Assertion instance.
func (me *XsdGoPkgHasElem_Assertion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Assertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Assertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Subject struct {
	Subjects []*TSubjectType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Subject"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subject instance.
func (me *XsdGoPkgHasElems_Subject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Subject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubjectConfirmation struct {
	SubjectConfirmation *TSubjectConfirmationType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubjectConfirmation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubjectConfirmation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubjectConfirmation instance.
func (me *XsdGoPkgHasElem_SubjectConfirmation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubjectConfirmation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectConfirmation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubjectConfirmationData struct {
	SubjectConfirmationDatas []*TSubjectConfirmationDataType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmationData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubjectConfirmationData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubjectConfirmationData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubjectConfirmationData instance.
func (me *XsdGoPkgHasElems_SubjectConfirmationData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubjectConfirmationData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectConfirmationDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Conditions struct {
	Conditionses []*TConditionsType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Conditions"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Conditions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Conditions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Conditions instance.
func (me *XsdGoPkgHasElems_Conditions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Conditions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conditionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Condition struct {
	Condition *TConditionAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Condition"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Condition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Condition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Condition instance.
func (me *XsdGoPkgHasElem_Condition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Condition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Condition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AudienceRestriction struct {
	AudienceRestriction *TAudienceRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AudienceRestriction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AudienceRestriction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AudienceRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AudienceRestriction instance.
func (me *XsdGoPkgHasElem_AudienceRestriction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AudienceRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AudienceRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Audience struct {
	Audience xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Audience"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Audience function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Audience instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Audience instance.
func (me *XsdGoPkgHasElem_Audience) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Audience; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OneTimeUse struct {
	OneTimeUse *TOneTimeUseType `xml:"urn:oasis:names:tc:SAML:2.0:assertion OneTimeUse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OneTimeUse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OneTimeUse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OneTimeUse instance.
func (me *XsdGoPkgHasElem_OneTimeUse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OneTimeUse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OneTimeUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProxyRestriction struct {
	ProxyRestriction *TProxyRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion ProxyRestriction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProxyRestriction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProxyRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProxyRestriction instance.
func (me *XsdGoPkgHasElem_ProxyRestriction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProxyRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProxyRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Advice struct {
	Advices []*TAdviceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Advice"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Advice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Advice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Advice instance.
func (me *XsdGoPkgHasElems_Advice) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Advice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Advices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EncryptedAssertion struct {
	EncryptedAssertion *TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAssertion"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EncryptedAssertion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EncryptedAssertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EncryptedAssertion instance.
func (me *XsdGoPkgHasElem_EncryptedAssertion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EncryptedAssertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Statement struct {
	Statement *TStatementAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Statement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Statement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Statement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Statement instance.
func (me *XsdGoPkgHasElem_Statement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Statement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Statement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthnStatement struct {
	AuthnStatement *TAuthnStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnStatement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthnStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthnStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthnStatement instance.
func (me *XsdGoPkgHasElem_AuthnStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthnStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubjectLocality struct {
	SubjectLocalities []*TSubjectLocalityType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectLocality"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubjectLocality function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubjectLocality instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubjectLocality instance.
func (me *XsdGoPkgHasElems_SubjectLocality) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubjectLocality; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectLocalities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthnContext struct {
	AuthnContexts []*TAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContext"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthnContext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthnContext instance.
func (me *XsdGoPkgHasElems_AuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnContexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthnContextClassRef struct {
	AuthnContextClassRefs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextClassRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthnContextClassRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthnContextClassRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthnContextClassRef instance.
func (me *XsdGoPkgHasElems_AuthnContextClassRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthnContextClassRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthnContextDeclRef struct {
	AuthnContextDeclRefs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDeclRef"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthnContextDeclRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthnContextDeclRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthnContextDeclRef instance.
func (me *XsdGoPkgHasElems_AuthnContextDeclRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthnContextDeclRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthnContextDecl struct {
	AuthnContextDecls []xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDecl"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthnContextDecl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthnContextDecl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthnContextDecl instance.
func (me *XsdGoPkgHasElems_AuthnContextDecl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthnContextDecl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthenticatingAuthority struct {
	AuthenticatingAuthority xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthenticatingAuthority"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthenticatingAuthority function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthenticatingAuthority instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AuthenticatingAuthority instance.
func (me *XsdGoPkgHasElem_AuthenticatingAuthority) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthenticatingAuthority; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthzDecisionStatement struct {
	AuthzDecisionStatement *TAuthzDecisionStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthzDecisionStatement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthzDecisionStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthzDecisionStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthzDecisionStatement instance.
func (me *XsdGoPkgHasElem_AuthzDecisionStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthzDecisionStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthzDecisionStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Action struct {
	Action *TActionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Action"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Action function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Action instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Action instance.
func (me *XsdGoPkgHasElem_Action) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Action; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Action.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Evidence struct {
	Evidences []*TEvidenceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Evidence"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Evidence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Evidence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Evidence instance.
func (me *XsdGoPkgHasElems_Evidence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Evidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Evidences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttributeStatement struct {
	AttributeStatement *TAttributeStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeStatement"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttributeStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttributeStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AttributeStatement instance.
func (me *XsdGoPkgHasElem_AttributeStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttributeStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Attribute struct {
	Attribute *TAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Attribute"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Attribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Attribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Attribute instance.
func (me *XsdGoPkgHasElem_Attribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Attribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Attribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttributeValue struct {
	AttributeValue xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttributeValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttributeValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AttributeValue instance.
func (me *XsdGoPkgHasElem_AttributeValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttributeValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EncryptedAttribute struct {
	EncryptedAttribute *TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAttribute"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EncryptedAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EncryptedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EncryptedAttribute instance.
func (me *XsdGoPkgHasElem_EncryptedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EncryptedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TKeyInfoConfirmationDataType struct {
	TSubjectConfirmationDataType

	ds.XsdGoPkgHasElems_KeyInfo
}

//	If the WalkHandlers.TKeyInfoConfirmationDataType function is not nil (ie. was set by outside code), calls it with this TKeyInfoConfirmationDataType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TKeyInfoConfirmationDataType instance.
func (me *TKeyInfoConfirmationDataType) Walk() (err error) {
	if fn := WalkHandlers.TKeyInfoConfirmationDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectConfirmationDataType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TEncryptedElementType                    func(*TEncryptedElementType, bool) error
	XsdGoPkgHasElem_AuthnContextDeclRef      func(*XsdGoPkgHasElem_AuthnContextDeclRef, bool) error
	TAuthnStatementType                      func(*TAuthnStatementType, bool) error
	XsdGoPkgHasElem_SubjectConfirmation      func(*XsdGoPkgHasElem_SubjectConfirmation, bool) error
	XsdGoPkgHasElem_AttributeValue           func(*XsdGoPkgHasElem_AttributeValue, bool) error
	XsdGoPkgHasElems_Evidence                func(*XsdGoPkgHasElems_Evidence, bool) error
	XsdGoPkgHasElem_AttributeStatement       func(*XsdGoPkgHasElem_AttributeStatement, bool) error
	XsdGoPkgHasElems_AuthenticatingAuthority func(*XsdGoPkgHasElems_AuthenticatingAuthority, bool) error
	XsdGoPkgHasElem_AuthnContext             func(*XsdGoPkgHasElem_AuthnContext, bool) error
	XsdGoPkgHasElems_EncryptedAssertion      func(*XsdGoPkgHasElems_EncryptedAssertion, bool) error
	TAuthzDecisionStatementType              func(*TAuthzDecisionStatementType, bool) error
	TAudienceRestrictionType                 func(*TAudienceRestrictionType, bool) error
	XsdGoPkgHasElem_AuthenticatingAuthority  func(*XsdGoPkgHasElem_AuthenticatingAuthority, bool) error
	XsdGoPkgHasElems_AuthzDecisionStatement  func(*XsdGoPkgHasElems_AuthzDecisionStatement, bool) error
	XsdGoPkgHasElem_Conditions               func(*XsdGoPkgHasElem_Conditions, bool) error
	XsdGoPkgHasElems_SubjectLocality         func(*XsdGoPkgHasElems_SubjectLocality, bool) error
	XsdGoPkgHasElem_EncryptedID              func(*XsdGoPkgHasElem_EncryptedID, bool) error
	XsdGoPkgHasElems_Issuer                  func(*XsdGoPkgHasElems_Issuer, bool) error
	XsdGoPkgHasElems_AssertionIDRef          func(*XsdGoPkgHasElems_AssertionIDRef, bool) error
	XsdGoPkgHasElems_AttributeStatement      func(*XsdGoPkgHasElems_AttributeStatement, bool) error
	XsdGoPkgHasElem_Condition                func(*XsdGoPkgHasElem_Condition, bool) error
	XsdGoPkgHasElem_OneTimeUse               func(*XsdGoPkgHasElem_OneTimeUse, bool) error
	XsdGoPkgHasElem_Action                   func(*XsdGoPkgHasElem_Action, bool) error
	XsdGoPkgHasElem_AssertionURIRef          func(*XsdGoPkgHasElem_AssertionURIRef, bool) error
	TAdviceType                              func(*TAdviceType, bool) error
	TProxyRestrictionType                    func(*TProxyRestrictionType, bool) error
	XsdGoPkgHasElems_Conditions              func(*XsdGoPkgHasElems_Conditions, bool) error
	XsdGoPkgHasElem_EncryptedAssertion       func(*XsdGoPkgHasElem_EncryptedAssertion, bool) error
	XsdGoPkgHasElems_AuthnContextDeclRef     func(*XsdGoPkgHasElems_AuthnContextDeclRef, bool) error
	XsdGoPkgHasElem_SubjectLocality          func(*XsdGoPkgHasElem_SubjectLocality, bool) error
	XsdGoPkgHasElem_AuthnContextDecl         func(*XsdGoPkgHasElem_AuthnContextDecl, bool) error
	XsdGoPkgHasElem_AuthnStatement           func(*XsdGoPkgHasElem_AuthnStatement, bool) error
	XsdGoPkgHasElems_Advice                  func(*XsdGoPkgHasElems_Advice, bool) error
	XsdGoPkgHasElems_AuthnContextDecl        func(*XsdGoPkgHasElems_AuthnContextDecl, bool) error
	XsdGoPkgHasElems_NameID                  func(*XsdGoPkgHasElems_NameID, bool) error
	TAuthnContextType                        func(*TAuthnContextType, bool) error
	XsdGoPkgHasElems_AuthnStatement          func(*XsdGoPkgHasElems_AuthnStatement, bool) error
	TAttributeStatementType                  func(*TAttributeStatementType, bool) error
	XsdGoPkgHasElems_Condition               func(*XsdGoPkgHasElems_Condition, bool) error
	XsdGoPkgHasElems_AudienceRestriction     func(*XsdGoPkgHasElems_AudienceRestriction, bool) error
	XsdGoPkgHasElem_AuthzDecisionStatement   func(*XsdGoPkgHasElem_AuthzDecisionStatement, bool) error
	XsdGoPkgHasElem_EncryptedAttribute       func(*XsdGoPkgHasElem_EncryptedAttribute, bool) error
	XsdGoPkgHasElem_SubjectConfirmationData  func(*XsdGoPkgHasElem_SubjectConfirmationData, bool) error
	XsdGoPkgHasElems_SubjectConfirmationData func(*XsdGoPkgHasElems_SubjectConfirmationData, bool) error
	XsdGoPkgHasElem_Audience                 func(*XsdGoPkgHasElem_Audience, bool) error
	XsdGoPkgHasElems_Attribute               func(*XsdGoPkgHasElems_Attribute, bool) error
	XsdGoPkgHasElems_AuthnContextClassRef    func(*XsdGoPkgHasElems_AuthnContextClassRef, bool) error
	TBaseIDAbstractType                      func(*TBaseIDAbstractType, bool) error
	XsdGoPkgHasElem_AssertionIDRef           func(*XsdGoPkgHasElem_AssertionIDRef, bool) error
	TSubjectConfirmationType                 func(*TSubjectConfirmationType, bool) error
	TSubjectType                             func(*TSubjectType, bool) error
	XsdGoPkgHasElem_Subject                  func(*XsdGoPkgHasElem_Subject, bool) error
	TAttributeType                           func(*TAttributeType, bool) error
	XsdGoPkgHasElems_EncryptedID             func(*XsdGoPkgHasElems_EncryptedID, bool) error
	XsdGoPkgHasElems_AssertionURIRef         func(*XsdGoPkgHasElems_AssertionURIRef, bool) error
	XsdGoPkgHasElems_Statement               func(*XsdGoPkgHasElems_Statement, bool) error
	XsdGoPkgHasElems_Audience                func(*XsdGoPkgHasElems_Audience, bool) error
	XsdGoPkgHasElem_Assertion                func(*XsdGoPkgHasElem_Assertion, bool) error
	TStatementAbstractType                   func(*TStatementAbstractType, bool) error
	XsdGoPkgHasElems_SubjectConfirmation     func(*XsdGoPkgHasElems_SubjectConfirmation, bool) error
	TActionType                              func(*TActionType, bool) error
	XsdGoPkgHasElems_AttributeValue          func(*XsdGoPkgHasElems_AttributeValue, bool) error
	XsdGoPkgHasElem_AudienceRestriction      func(*XsdGoPkgHasElem_AudienceRestriction, bool) error
	XsdGoPkgHasElems_Subject                 func(*XsdGoPkgHasElems_Subject, bool) error
	XsdGoPkgHasElem_Statement                func(*XsdGoPkgHasElem_Statement, bool) error
	XsdGoPkgHasElems_BaseID                  func(*XsdGoPkgHasElems_BaseID, bool) error
	XsdGoPkgHasElem_BaseID                   func(*XsdGoPkgHasElem_BaseID, bool) error
	TNameIDType                              func(*TNameIDType, bool) error
	TSubjectConfirmationDataType             func(*TSubjectConfirmationDataType, bool) error
	TEvidenceType                            func(*TEvidenceType, bool) error
	XsdGoPkgHasElem_Evidence                 func(*XsdGoPkgHasElem_Evidence, bool) error
	XsdGoPkgHasElems_AuthnContext            func(*XsdGoPkgHasElems_AuthnContext, bool) error
	XsdGoPkgHasElem_NameID                   func(*XsdGoPkgHasElem_NameID, bool) error
	XsdGoPkgHasElems_Assertion               func(*XsdGoPkgHasElems_Assertion, bool) error
	XsdGoPkgHasElems_EncryptedAttribute      func(*XsdGoPkgHasElems_EncryptedAttribute, bool) error
	TConditionAbstractType                   func(*TConditionAbstractType, bool) error
	XsdGoPkgHasElems_OneTimeUse              func(*XsdGoPkgHasElems_OneTimeUse, bool) error
	XsdGoPkgHasElem_ProxyRestriction         func(*XsdGoPkgHasElem_ProxyRestriction, bool) error
	TKeyInfoConfirmationDataType             func(*TKeyInfoConfirmationDataType, bool) error
	XsdGoPkgHasElem_Issuer                   func(*XsdGoPkgHasElem_Issuer, bool) error
	TSubjectLocalityType                     func(*TSubjectLocalityType, bool) error
	XsdGoPkgHasElem_Advice                   func(*XsdGoPkgHasElem_Advice, bool) error
	XsdGoPkgHasElems_Action                  func(*XsdGoPkgHasElems_Action, bool) error
	XsdGoPkgHasElems_ProxyRestriction        func(*XsdGoPkgHasElems_ProxyRestriction, bool) error
	TConditionsType                          func(*TConditionsType, bool) error
	XsdGoPkgHasCdata                         func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_Attribute                func(*XsdGoPkgHasElem_Attribute, bool) error
	XsdGoPkgHasElem_AuthnContextClassRef     func(*XsdGoPkgHasElem_AuthnContextClassRef, bool) error
	TOneTimeUseType                          func(*TOneTimeUseType, bool) error
	TAssertionType                           func(*TAssertionType, bool) error
}
