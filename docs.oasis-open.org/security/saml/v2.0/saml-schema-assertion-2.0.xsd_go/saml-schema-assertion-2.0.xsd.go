// Package goSamlAssertion20 : autogenerated by go-xsd
package goSamlAssertion20

//	Document identifier: saml-schema-assertion-2.0 Location: http://docs.oasis-open.org/security/saml/v2.0/ Revision history: V1.0 (November, 2002): Initial Standard Schema. V1.1 (September, 2003): Updates within the same V1.0 namespace. V2.0 (March, 2005): New assertion schema for SAML V2.0 namespace.

import (
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xenc "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// XsdGoPkgHasAttrNameQualifierXsdtString defines attribute NameQualifierXsdtString
type XsdGoPkgHasAttrNameQualifierXsdtString struct {
	NameQualifier xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion NameQualifier,attr"`
}

// XsdGoPkgHasAttrSPNameQualifierXsdtString defines attribute SPNameQualifierXsdtString
type XsdGoPkgHasAttrSPNameQualifierXsdtString struct {
	SPNameQualifier xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion SPNameQualifier,attr"`
}

// XsdGoPkgHasAttsIDNameQualifiers defines XsdGoPkgHasAttsIDNameQualifiers
type XsdGoPkgHasAttsIDNameQualifiers struct {
	XsdGoPkgHasAttrNameQualifierXsdtString

	XsdGoPkgHasAttrSPNameQualifierXsdtString
}

// TBaseIDAbstractType defines TBaseIDAbstractType
type TBaseIDAbstractType struct {
	XsdGoPkgHasAttsIDNameQualifiers
}

// Walk : if the WalkHandlers.TBaseIDAbstractType function is not nil (ie. was set by outside code), calls it with this TBaseIDAbstractType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TBaseIDAbstractType instance.
func (me *TBaseIDAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TBaseIDAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsBaseID defines XsdGoPkgHasElemsBaseID
type XsdGoPkgHasElemsBaseID struct {
	BaseIDs []*TBaseIDAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion BaseID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsBaseID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsBaseID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsBaseID instance.
func (me *XsdGoPkgHasElemsBaseID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsBaseID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BaseIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemBaseID defines XsdGoPkgHasElemBaseID
type XsdGoPkgHasElemBaseID struct {
	BaseID *TBaseIDAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion BaseID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemBaseID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemBaseID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemBaseID instance.
func (me *XsdGoPkgHasElemBaseID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemBaseID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BaseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrFormatXsdtAnyURI defines attribute FormatXsdtAnyURI
type XsdGoPkgHasAttrFormatXsdtAnyURI struct {
	Format xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Format,attr"`
}

// XsdGoPkgHasAttrSPProvidedIDXsdtString defines attribute SPProvidedIDXsdtString
type XsdGoPkgHasAttrSPProvidedIDXsdtString struct {
	SPProvidedID xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion SPProvidedID,attr"`
}

// TNameIDType defines TNameIDType
type TNameIDType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttsIDNameQualifiers

	XsdGoPkgHasAttrFormatXsdtAnyURI

	XsdGoPkgHasAttrSPProvidedIDXsdtString
}

// Walk : if the WalkHandlers.TNameIDType function is not nil (ie. was set by outside code), calls it with this TNameIDType instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TNameIDType instance.
func (me *TNameIDType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemNameID defines XsdGoPkgHasElemNameID
type XsdGoPkgHasElemNameID struct {
	NameID *TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion NameID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemNameID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemNameID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemNameID instance.
func (me *XsdGoPkgHasElemNameID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemNameID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsNameID defines XsdGoPkgHasElemsNameID
type XsdGoPkgHasElemsNameID struct {
	NameIDs []*TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion NameID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsNameID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsNameID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsNameID instance.
func (me *XsdGoPkgHasElemsNameID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsNameID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEncryptedElementType defines TEncryptedElementType
type TEncryptedElementType struct {
	xenc.XsdGoPkgHasElemsEncryptedKey

	xenc.XsdGoPkgHasElemEncryptedData
}

// Walk : if the WalkHandlers.TEncryptedElementType function is not nil (ie. was set by outside code), calls it with this TEncryptedElementType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TEncryptedElementType instance.
func (me *TEncryptedElementType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedElementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEncryptedID defines XsdGoPkgHasElemEncryptedID
type XsdGoPkgHasElemEncryptedID struct {
	EncryptedID *TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEncryptedID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEncryptedID instance.
func (me *XsdGoPkgHasElemEncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEncryptedID defines XsdGoPkgHasElemsEncryptedID
type XsdGoPkgHasElemsEncryptedID struct {
	EncryptedIDs []*TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEncryptedID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEncryptedID instance.
func (me *XsdGoPkgHasElemsEncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemIssuer defines XsdGoPkgHasElemIssuer
type XsdGoPkgHasElemIssuer struct {
	Issuer *TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Issuer"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemIssuer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemIssuer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemIssuer instance.
func (me *XsdGoPkgHasElemIssuer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemIssuer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Issuer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsIssuer defines XsdGoPkgHasElemsIssuer
type XsdGoPkgHasElemsIssuer struct {
	Issuers []*TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Issuer"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsIssuer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsIssuer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsIssuer instance.
func (me *XsdGoPkgHasElemsIssuer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsIssuer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Issuers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAssertionIDRef defines XsdGoPkgHasElemAssertionIDRef
type XsdGoPkgHasElemAssertionIDRef struct {
	AssertionIDRef xsdt.NCName `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionIDRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAssertionIDRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAssertionIDRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemAssertionIDRef instance.
func (me *XsdGoPkgHasElemAssertionIDRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAssertionIDRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAssertionIDRef defines XsdGoPkgHasElemsAssertionIDRef
type XsdGoPkgHasElemsAssertionIDRef struct {
	AssertionIDRefs []xsdt.NCName `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionIDRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAssertionIDRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAssertionIDRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAssertionIDRef instance.
func (me *XsdGoPkgHasElemsAssertionIDRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAssertionIDRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAssertionURIRef defines XsdGoPkgHasElemAssertionURIRef
type XsdGoPkgHasElemAssertionURIRef struct {
	AssertionURIRef xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionURIRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAssertionURIRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAssertionURIRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemAssertionURIRef instance.
func (me *XsdGoPkgHasElemAssertionURIRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAssertionURIRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAssertionURIRef defines XsdGoPkgHasElemsAssertionURIRef
type XsdGoPkgHasElemsAssertionURIRef struct {
	AssertionURIRefs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionURIRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAssertionURIRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAssertionURIRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAssertionURIRef instance.
func (me *XsdGoPkgHasElemsAssertionURIRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAssertionURIRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TStatementAbstractType defines TStatementAbstractType
type TStatementAbstractType struct {
}

// Walk : if the WalkHandlers.TStatementAbstractType function is not nil (ie. was set by outside code), calls it with this TStatementAbstractType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TStatementAbstractType instance.
func (me *TStatementAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TStatementAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrAddressXsdtString defines attribute AddressXsdtString
type XsdGoPkgHasAttrAddressXsdtString struct {
	Address xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion Address,attr"`
}

// XsdGoPkgHasAttrDNSNameXsdtString defines attribute DNSNameXsdtString
type XsdGoPkgHasAttrDNSNameXsdtString struct {
	DNSName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion DNSName,attr"`
}

// TSubjectLocalityType defines TSubjectLocalityType
type TSubjectLocalityType struct {
	XsdGoPkgHasAttrAddressXsdtString

	XsdGoPkgHasAttrDNSNameXsdtString
}

// Walk : if the WalkHandlers.TSubjectLocalityType function is not nil (ie. was set by outside code), calls it with this TSubjectLocalityType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TSubjectLocalityType instance.
func (me *TSubjectLocalityType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectLocalityType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSubjectLocality defines XsdGoPkgHasElemSubjectLocality
type XsdGoPkgHasElemSubjectLocality struct {
	SubjectLocality *TSubjectLocalityType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectLocality"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSubjectLocality function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSubjectLocality instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSubjectLocality instance.
func (me *XsdGoPkgHasElemSubjectLocality) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSubjectLocality; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectLocality.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthnContextDecl defines XsdGoPkgHasElemAuthnContextDecl
type XsdGoPkgHasElemAuthnContextDecl struct {
	AuthnContextDecl xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDecl"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthnContextDecl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthnContextDecl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemAuthnContextDecl instance.
func (me *XsdGoPkgHasElemAuthnContextDecl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthnContextDecl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthnContextDeclRef defines XsdGoPkgHasElemAuthnContextDeclRef
type XsdGoPkgHasElemAuthnContextDeclRef struct {
	AuthnContextDeclRef xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDeclRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthnContextDeclRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthnContextDeclRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemAuthnContextDeclRef instance.
func (me *XsdGoPkgHasElemAuthnContextDeclRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthnContextDeclRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthenticatingAuthority defines XsdGoPkgHasElemsAuthenticatingAuthority
type XsdGoPkgHasElemsAuthenticatingAuthority struct {
	AuthenticatingAuthorities []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthenticatingAuthority"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthenticatingAuthority function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthenticatingAuthority instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthenticatingAuthority instance.
func (me *XsdGoPkgHasElemsAuthenticatingAuthority) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthenticatingAuthority; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthnContextClassRef defines XsdGoPkgHasElemAuthnContextClassRef
type XsdGoPkgHasElemAuthnContextClassRef struct {
	AuthnContextClassRef xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextClassRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthnContextClassRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthnContextClassRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemAuthnContextClassRef instance.
func (me *XsdGoPkgHasElemAuthnContextClassRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthnContextClassRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAuthnContextType defines TAuthnContextType
type TAuthnContextType struct {
	XsdGoPkgHasElemAuthnContextDecl

	XsdGoPkgHasElemAuthnContextDeclRef

	XsdGoPkgHasElemsAuthenticatingAuthority

	XsdGoPkgHasElemAuthnContextClassRef
}

// Walk : if the WalkHandlers.TAuthnContextType function is not nil (ie. was set by outside code), calls it with this TAuthnContextType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TAuthnContextType instance.
func (me *TAuthnContextType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnContextType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAuthenticatingAuthority.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAuthnContextClassRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAuthnContextDecl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAuthnContextDeclRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthnContext defines XsdGoPkgHasElemAuthnContext
type XsdGoPkgHasElemAuthnContext struct {
	AuthnContext *TAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContext"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthnContext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthnContext instance.
func (me *XsdGoPkgHasElemAuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrSessionNotOnOrAfterXsdtDateTime defines attribute SessionNotOnOrAfterXsdtDateTime
type XsdGoPkgHasAttrSessionNotOnOrAfterXsdtDateTime struct {
	SessionNotOnOrAfter xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:assertion SessionNotOnOrAfter,attr"`
}

// XsdGoPkgHasAttrAuthnInstantXsdtDateTime defines attribute AuthnInstantXsdtDateTime
type XsdGoPkgHasAttrAuthnInstantXsdtDateTime struct {
	AuthnInstant xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnInstant,attr"`
}

// XsdGoPkgHasAttrSessionIndexXsdtString defines attribute SessionIndexXsdtString
type XsdGoPkgHasAttrSessionIndexXsdtString struct {
	SessionIndex xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion SessionIndex,attr"`
}

// TAuthnStatementType defines TAuthnStatementType
type TAuthnStatementType struct {
	XsdGoPkgHasAttrAuthnInstantXsdtDateTime

	XsdGoPkgHasAttrSessionIndexXsdtString

	TStatementAbstractType

	XsdGoPkgHasElemSubjectLocality

	XsdGoPkgHasElemAuthnContext

	XsdGoPkgHasAttrSessionNotOnOrAfterXsdtDateTime
}

// Walk : if the WalkHandlers.TAuthnStatementType function is not nil (ie. was set by outside code), calls it with this TAuthnStatementType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TAuthnStatementType instance.
func (me *TAuthnStatementType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnStatementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatementAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSubjectLocality.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthnStatement defines XsdGoPkgHasElemsAuthnStatement
type XsdGoPkgHasElemsAuthnStatement struct {
	AuthnStatements []*TAuthnStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnStatement"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthnStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthnStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthnStatement instance.
func (me *XsdGoPkgHasElemsAuthnStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthnStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnStatements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrNotBeforeXsdtDateTime defines attribute NotBeforeXsdtDateTime
type XsdGoPkgHasAttrNotBeforeXsdtDateTime struct {
	NotBefore xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:assertion NotBefore,attr"`
}

// XsdGoPkgHasAttrNotOnOrAfterXsdtDateTime defines attribute NotOnOrAfterXsdtDateTime
type XsdGoPkgHasAttrNotOnOrAfterXsdtDateTime struct {
	NotOnOrAfter xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:assertion NotOnOrAfter,attr"`
}

// XsdGoPkgHasAttrRecipientXsdtAnyURI defines attribute RecipientXsdtAnyURI
type XsdGoPkgHasAttrRecipientXsdtAnyURI struct {
	Recipient xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Recipient,attr"`
}

// XsdGoPkgHasAttrInResponseToXsdtNCName defines attribute InResponseToXsdtNCName
type XsdGoPkgHasAttrInResponseToXsdtNCName struct {
	InResponseTo xsdt.NCName `xml:"urn:oasis:names:tc:SAML:2.0:assertion InResponseTo,attr"`
}

// XsdGoPkgHasAnyTypeCdata defines XsdGoPkgHasAnyTypeCdata
type XsdGoPkgHasAnyTypeCdata struct {
	XsdGoPkgCDATA xsdt.AnyType `xml:",chardata"`
}

// TSubjectConfirmationDataType defines TSubjectConfirmationDataType
type TSubjectConfirmationDataType struct {
	XsdGoPkgHasAttrRecipientXsdtAnyURI

	XsdGoPkgHasAttrInResponseToXsdtNCName

	XsdGoPkgHasAttrAddressXsdtString

	XsdGoPkgHasAnyTypeCdata

	XsdGoPkgHasAttrNotBeforeXsdtDateTime

	XsdGoPkgHasAttrNotOnOrAfterXsdtDateTime
}

// Walk : if the WalkHandlers.TSubjectConfirmationDataType function is not nil (ie. was set by outside code), calls it with this TSubjectConfirmationDataType instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TSubjectConfirmationDataType instance.
func (me *TSubjectConfirmationDataType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectConfirmationDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSubjectConfirmationData defines XsdGoPkgHasElemSubjectConfirmationData
type XsdGoPkgHasElemSubjectConfirmationData struct {
	SubjectConfirmationData *TSubjectConfirmationDataType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmationData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSubjectConfirmationData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSubjectConfirmationData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSubjectConfirmationData instance.
func (me *XsdGoPkgHasElemSubjectConfirmationData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSubjectConfirmationData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectConfirmationData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrMethodXsdtAnyURI defines attribute MethodXsdtAnyURI
type XsdGoPkgHasAttrMethodXsdtAnyURI struct {
	Method xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Method,attr"`
}

// TSubjectConfirmationType defines TSubjectConfirmationType
type TSubjectConfirmationType struct {
	XsdGoPkgHasAttrMethodXsdtAnyURI

	XsdGoPkgHasElemBaseID

	XsdGoPkgHasElemNameID

	XsdGoPkgHasElemEncryptedID

	XsdGoPkgHasElemSubjectConfirmationData
}

// Walk : if the WalkHandlers.TSubjectConfirmationType function is not nil (ie. was set by outside code), calls it with this TSubjectConfirmationType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TSubjectConfirmationType instance.
func (me *TSubjectConfirmationType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectConfirmationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemEncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSubjectConfirmationData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemBaseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemNameID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSubjectConfirmation defines XsdGoPkgHasElemsSubjectConfirmation
type XsdGoPkgHasElemsSubjectConfirmation struct {
	SubjectConfirmations []*TSubjectConfirmationType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmation"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSubjectConfirmation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSubjectConfirmation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSubjectConfirmation instance.
func (me *XsdGoPkgHasElemsSubjectConfirmation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSubjectConfirmation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectConfirmations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSubjectType defines TSubjectType
type TSubjectType struct {
	XsdGoPkgHasElemsSubjectConfirmation

	XsdGoPkgHasElemBaseID

	XsdGoPkgHasElemNameID

	XsdGoPkgHasElemEncryptedID
}

// Walk : if the WalkHandlers.TSubjectType function is not nil (ie. was set by outside code), calls it with this TSubjectType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TSubjectType instance.
func (me *TSubjectType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsSubjectConfirmation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemBaseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemNameID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemEncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSubject defines XsdGoPkgHasElemSubject
type XsdGoPkgHasElemSubject struct {
	Subject *TSubjectType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Subject"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSubject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSubject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSubject instance.
func (me *XsdGoPkgHasElemSubject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Subject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAssertion defines XsdGoPkgHasElemsAssertion
type XsdGoPkgHasElemsAssertion struct {
	Assertions []*TAssertionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Assertion"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAssertion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAssertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAssertion instance.
func (me *XsdGoPkgHasElemsAssertion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAssertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEncryptedAssertion defines XsdGoPkgHasElemsEncryptedAssertion
type XsdGoPkgHasElemsEncryptedAssertion struct {
	EncryptedAssertions []*TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAssertion"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEncryptedAssertion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEncryptedAssertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEncryptedAssertion instance.
func (me *XsdGoPkgHasElemsEncryptedAssertion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEncryptedAssertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedAssertions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAdviceType defines TAdviceType
type TAdviceType struct {
	XsdGoPkgHasElemsAssertionIDRef

	XsdGoPkgHasElemsAssertionURIRef

	XsdGoPkgHasElemsAssertion

	XsdGoPkgHasElemsEncryptedAssertion
}

// Walk : if the WalkHandlers.TAdviceType function is not nil (ie. was set by outside code), calls it with this TAdviceType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TAdviceType instance.
func (me *TAdviceType) Walk() (err error) {
	if fn := WalkHandlers.TAdviceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsEncryptedAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAssertionIDRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAssertionURIRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAdvice defines XsdGoPkgHasElemAdvice
type XsdGoPkgHasElemAdvice struct {
	Advice *TAdviceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Advice"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAdvice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAdvice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAdvice instance.
func (me *XsdGoPkgHasElemAdvice) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAdvice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Advice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrIDXsdtID defines attribute IdXsdtId
type XsdGoPkgHasAttrIDXsdtID struct {
	ID xsdt.ID `xml:"urn:oasis:names:tc:SAML:2.0:assertion ID,attr"`
}

// XsdGoPkgHasAttrIssueInstantXsdtDateTime defines attribute IssueInstantXsdtDateTime
type XsdGoPkgHasAttrIssueInstantXsdtDateTime struct {
	IssueInstant xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:assertion IssueInstant,attr"`
}

// XsdGoPkgHasElemsStatement defines XsdGoPkgHasElemsStatement
type XsdGoPkgHasElemsStatement struct {
	Statements []*TStatementAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Statement"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsStatement instance.
func (me *XsdGoPkgHasElemsStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Statements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrNamespaceXsdtAnyURI defines attribute NamespaceXsdtAnyURI
type XsdGoPkgHasAttrNamespaceXsdtAnyURI struct {
	Namespace xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Namespace,attr"`
}

// TActionType defines TActionType
type TActionType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttrNamespaceXsdtAnyURI
}

// Walk : if the WalkHandlers.TActionType function is not nil (ie. was set by outside code), calls it with this TActionType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TActionType instance.
func (me *TActionType) Walk() (err error) {
	if fn := WalkHandlers.TActionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAction defines XsdGoPkgHasElemsAction
type XsdGoPkgHasElemsAction struct {
	Actions []*TActionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Action"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAction instance.
func (me *XsdGoPkgHasElemsAction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Actions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEvidenceType defines TEvidenceType
type TEvidenceType struct {
	XsdGoPkgHasElemsAssertionIDRef

	XsdGoPkgHasElemsAssertionURIRef

	XsdGoPkgHasElemsAssertion

	XsdGoPkgHasElemsEncryptedAssertion
}

// Walk : if the WalkHandlers.TEvidenceType function is not nil (ie. was set by outside code), calls it with this TEvidenceType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TEvidenceType instance.
func (me *TEvidenceType) Walk() (err error) {
	if fn := WalkHandlers.TEvidenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsEncryptedAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAssertionIDRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAssertionURIRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEvidence defines XsdGoPkgHasElemEvidence
type XsdGoPkgHasElemEvidence struct {
	Evidence *TEvidenceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Evidence"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEvidence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEvidence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEvidence instance.
func (me *XsdGoPkgHasElemEvidence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEvidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Evidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrResourceXsdtAnyURI defines attribute ResourceXsdtAnyURI
type XsdGoPkgHasAttrResourceXsdtAnyURI struct {
	Resource xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Resource,attr"`
}

// TDecisionType defines TDecisionType
type TDecisionType xsdt.String

// IsPermit : Returns true if the value of this enumerated TDecisionType is "Permit".
func (me TDecisionType) IsPermit() bool { return me.String() == "Permit" }

// IsDeny : Returns true if the value of this enumerated TDecisionType is "Deny".
func (me TDecisionType) IsDeny() bool { return me.String() == "Deny" }

// IsIndeterminate : Returns true if the value of this enumerated TDecisionType is "Indeterminate".
func (me TDecisionType) IsIndeterminate() bool { return me.String() == "Indeterminate" }

// Set : Since TDecisionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TDecisionType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TDecisionType is just a simple String type, this merely returns the current string value.
func (me TDecisionType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TDecisionType's alias type xsdt.String.
func (me TDecisionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrDecisionTDecisionType defines attribute DecisionTDecisionType
type XsdGoPkgHasAttrDecisionTDecisionType struct {
	Decision TDecisionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Decision,attr"`
}

// TAuthzDecisionStatementType defines TAuthzDecisionStatementType
type TAuthzDecisionStatementType struct {
	TStatementAbstractType

	XsdGoPkgHasElemsAction

	XsdGoPkgHasElemEvidence

	XsdGoPkgHasAttrResourceXsdtAnyURI

	XsdGoPkgHasAttrDecisionTDecisionType
}

// Walk : if the WalkHandlers.TAuthzDecisionStatementType function is not nil (ie. was set by outside code), calls it with this TAuthzDecisionStatementType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TAuthzDecisionStatementType instance.
func (me *TAuthzDecisionStatementType) Walk() (err error) {
	if fn := WalkHandlers.TAuthzDecisionStatementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemEvidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TStatementAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthzDecisionStatement defines XsdGoPkgHasElemsAuthzDecisionStatement
type XsdGoPkgHasElemsAuthzDecisionStatement struct {
	AuthzDecisionStatements []*TAuthzDecisionStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthzDecisionStatement"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthzDecisionStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthzDecisionStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthzDecisionStatement instance.
func (me *XsdGoPkgHasElemsAuthzDecisionStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthzDecisionStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthzDecisionStatements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAttributeValue defines XsdGoPkgHasElemsAttributeValue
type XsdGoPkgHasElemsAttributeValue struct {
	AttributeValues []xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAttributeValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAttributeValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAttributeValue instance.
func (me *XsdGoPkgHasElemsAttributeValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAttributeValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrNameXsdtString defines attribute NameXsdtString
type XsdGoPkgHasAttrNameXsdtString struct {
	Name xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion Name,attr"`
}

// XsdGoPkgHasAttrNameFormatXsdtAnyURI defines attribute NameFormatXsdtAnyURI
type XsdGoPkgHasAttrNameFormatXsdtAnyURI struct {
	NameFormat xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion NameFormat,attr"`
}

// XsdGoPkgHasAttrFriendlyNameXsdtString defines attribute FriendlyNameXsdtString
type XsdGoPkgHasAttrFriendlyNameXsdtString struct {
	FriendlyName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion FriendlyName,attr"`
}

// TAttributeType defines TAttributeType
type TAttributeType struct {
	XsdGoPkgHasElemsAttributeValue

	XsdGoPkgHasAttrNameXsdtString

	XsdGoPkgHasAttrNameFormatXsdtAnyURI

	XsdGoPkgHasAttrFriendlyNameXsdtString
}

// Walk : if the WalkHandlers.TAttributeType function is not nil (ie. was set by outside code), calls it with this TAttributeType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TAttributeType instance.
func (me *TAttributeType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAttributeValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAttribute defines XsdGoPkgHasElemsAttribute
type XsdGoPkgHasElemsAttribute struct {
	Attributes []*TAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Attribute"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAttribute instance.
func (me *XsdGoPkgHasElemsAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Attributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEncryptedAttribute defines XsdGoPkgHasElemsEncryptedAttribute
type XsdGoPkgHasElemsEncryptedAttribute struct {
	EncryptedAttributes []*TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAttribute"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEncryptedAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEncryptedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEncryptedAttribute instance.
func (me *XsdGoPkgHasElemsEncryptedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEncryptedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAttributeStatementType defines TAttributeStatementType
type TAttributeStatementType struct {
	XsdGoPkgHasElemsEncryptedAttribute

	TStatementAbstractType

	XsdGoPkgHasElemsAttribute
}

// Walk : if the WalkHandlers.TAttributeStatementType function is not nil (ie. was set by outside code), calls it with this TAttributeStatementType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAttributeStatementType instance.
func (me *TAttributeStatementType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeStatementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEncryptedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TStatementAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAttributeStatement defines XsdGoPkgHasElemsAttributeStatement
type XsdGoPkgHasElemsAttributeStatement struct {
	AttributeStatements []*TAttributeStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeStatement"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAttributeStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAttributeStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAttributeStatement instance.
func (me *XsdGoPkgHasElemsAttributeStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAttributeStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeStatements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TConditionAbstractType defines TConditionAbstractType
type TConditionAbstractType struct {
}

// Walk : if the WalkHandlers.TConditionAbstractType function is not nil (ie. was set by outside code), calls it with this TConditionAbstractType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TConditionAbstractType instance.
func (me *TConditionAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TConditionAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsCondition defines XsdGoPkgHasElemsCondition
type XsdGoPkgHasElemsCondition struct {
	Conditions []*TConditionAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Condition"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsCondition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsCondition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsCondition instance.
func (me *XsdGoPkgHasElemsCondition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsCondition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conditions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAudience defines XsdGoPkgHasElemsAudience
type XsdGoPkgHasElemsAudience struct {
	Audiences []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Audience"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAudience function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAudience instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAudience instance.
func (me *XsdGoPkgHasElemsAudience) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAudience; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAudienceRestrictionType defines TAudienceRestrictionType
type TAudienceRestrictionType struct {
	XsdGoPkgHasElemsAudience

	TConditionAbstractType
}

// Walk : if the WalkHandlers.TAudienceRestrictionType function is not nil (ie. was set by outside code), calls it with this TAudienceRestrictionType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TAudienceRestrictionType instance.
func (me *TAudienceRestrictionType) Walk() (err error) {
	if fn := WalkHandlers.TAudienceRestrictionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAudience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TConditionAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAudienceRestriction defines XsdGoPkgHasElemsAudienceRestriction
type XsdGoPkgHasElemsAudienceRestriction struct {
	AudienceRestrictions []*TAudienceRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AudienceRestriction"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAudienceRestriction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAudienceRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAudienceRestriction instance.
func (me *XsdGoPkgHasElemsAudienceRestriction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAudienceRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AudienceRestrictions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TOneTimeUseType defines TOneTimeUseType
type TOneTimeUseType struct {
	TConditionAbstractType
}

// Walk : if the WalkHandlers.TOneTimeUseType function is not nil (ie. was set by outside code), calls it with this TOneTimeUseType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TOneTimeUseType instance.
func (me *TOneTimeUseType) Walk() (err error) {
	if fn := WalkHandlers.TOneTimeUseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TConditionAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsOneTimeUse defines XsdGoPkgHasElemsOneTimeUse
type XsdGoPkgHasElemsOneTimeUse struct {
	OneTimeUses []*TOneTimeUseType `xml:"urn:oasis:names:tc:SAML:2.0:assertion OneTimeUse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsOneTimeUse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsOneTimeUse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsOneTimeUse instance.
func (me *XsdGoPkgHasElemsOneTimeUse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsOneTimeUse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OneTimeUses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrCountXsdtNonNegativeInteger defines attribute CountXsdtNonNegativeInteger
type XsdGoPkgHasAttrCountXsdtNonNegativeInteger struct {
	Count xsdt.NonNegativeInteger `xml:"urn:oasis:names:tc:SAML:2.0:assertion Count,attr"`
}

// TProxyRestrictionType defines TProxyRestrictionType
type TProxyRestrictionType struct {
	TConditionAbstractType

	XsdGoPkgHasElemsAudience

	XsdGoPkgHasAttrCountXsdtNonNegativeInteger
}

// Walk : if the WalkHandlers.TProxyRestrictionType function is not nil (ie. was set by outside code), calls it with this TProxyRestrictionType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TProxyRestrictionType instance.
func (me *TProxyRestrictionType) Walk() (err error) {
	if fn := WalkHandlers.TProxyRestrictionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TConditionAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAudience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsProxyRestriction defines XsdGoPkgHasElemsProxyRestriction
type XsdGoPkgHasElemsProxyRestriction struct {
	ProxyRestrictions []*TProxyRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion ProxyRestriction"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsProxyRestriction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsProxyRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsProxyRestriction instance.
func (me *XsdGoPkgHasElemsProxyRestriction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsProxyRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ProxyRestrictions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TConditionsType defines TConditionsType
type TConditionsType struct {
	XsdGoPkgHasElemsCondition

	XsdGoPkgHasElemsAudienceRestriction

	XsdGoPkgHasElemsOneTimeUse

	XsdGoPkgHasElemsProxyRestriction

	XsdGoPkgHasAttrNotBeforeXsdtDateTime

	XsdGoPkgHasAttrNotOnOrAfterXsdtDateTime
}

// Walk : if the WalkHandlers.TConditionsType function is not nil (ie. was set by outside code), calls it with this TConditionsType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TConditionsType instance.
func (me *TConditionsType) Walk() (err error) {
	if fn := WalkHandlers.TConditionsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsCondition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAudienceRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsOneTimeUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsProxyRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemConditions defines XsdGoPkgHasElemConditions
type XsdGoPkgHasElemConditions struct {
	Conditions *TConditionsType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Conditions"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemConditions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemConditions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemConditions instance.
func (me *XsdGoPkgHasElemConditions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemConditions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Conditions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrVersionXsdtString defines attribute VersionXsdtString
type XsdGoPkgHasAttrVersionXsdtString struct {
	Version xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:assertion Version,attr"`
}

// TAssertionType defines TAssertionType
type TAssertionType struct {
	XsdGoPkgHasElemsStatement

	XsdGoPkgHasElemsAuthzDecisionStatement

	XsdGoPkgHasElemsAttributeStatement

	XsdGoPkgHasElemIssuer

	XsdGoPkgHasElemConditions

	XsdGoPkgHasAttrVersionXsdtString

	XsdGoPkgHasElemsAuthnStatement

	ds.XsdGoPkgHasElemSignature

	XsdGoPkgHasElemSubject

	XsdGoPkgHasElemAdvice

	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasAttrIssueInstantXsdtDateTime
}

// Walk : if the WalkHandlers.TAssertionType function is not nil (ie. was set by outside code), calls it with this TAssertionType instance as the single argument. Then calls the Walk() method on 8/12 embed(s) and 0/0 field(s) belonging to this TAssertionType instance.
func (me *TAssertionType) Walk() (err error) {
	if fn := WalkHandlers.TAssertionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAuthnStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSubject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAdvice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAuthzDecisionStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAttributeStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemIssuer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemConditions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAssertion defines XsdGoPkgHasElemAssertion
type XsdGoPkgHasElemAssertion struct {
	Assertion *TAssertionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Assertion"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAssertion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAssertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAssertion instance.
func (me *XsdGoPkgHasElemAssertion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAssertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Assertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSubject defines XsdGoPkgHasElemsSubject
type XsdGoPkgHasElemsSubject struct {
	Subjects []*TSubjectType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Subject"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSubject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSubject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSubject instance.
func (me *XsdGoPkgHasElemsSubject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSubjectConfirmation defines XsdGoPkgHasElemSubjectConfirmation
type XsdGoPkgHasElemSubjectConfirmation struct {
	SubjectConfirmation *TSubjectConfirmationType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmation"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSubjectConfirmation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSubjectConfirmation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSubjectConfirmation instance.
func (me *XsdGoPkgHasElemSubjectConfirmation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSubjectConfirmation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectConfirmation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSubjectConfirmationData defines XsdGoPkgHasElemsSubjectConfirmationData
type XsdGoPkgHasElemsSubjectConfirmationData struct {
	SubjectConfirmationDatas []*TSubjectConfirmationDataType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmationData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSubjectConfirmationData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSubjectConfirmationData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSubjectConfirmationData instance.
func (me *XsdGoPkgHasElemsSubjectConfirmationData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSubjectConfirmationData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectConfirmationDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsConditions defines XsdGoPkgHasElemsConditions
type XsdGoPkgHasElemsConditions struct {
	Conditionses []*TConditionsType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Conditions"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsConditions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsConditions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsConditions instance.
func (me *XsdGoPkgHasElemsConditions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsConditions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conditionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemCondition defines XsdGoPkgHasElemCondition
type XsdGoPkgHasElemCondition struct {
	Condition *TConditionAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Condition"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemCondition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemCondition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemCondition instance.
func (me *XsdGoPkgHasElemCondition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemCondition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Condition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAudienceRestriction defines XsdGoPkgHasElemAudienceRestriction
type XsdGoPkgHasElemAudienceRestriction struct {
	AudienceRestriction *TAudienceRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AudienceRestriction"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAudienceRestriction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAudienceRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAudienceRestriction instance.
func (me *XsdGoPkgHasElemAudienceRestriction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAudienceRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AudienceRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAudience defines XsdGoPkgHasElemAudience
type XsdGoPkgHasElemAudience struct {
	Audience xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Audience"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAudience function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAudience instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemAudience instance.
func (me *XsdGoPkgHasElemAudience) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAudience; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemOneTimeUse defines XsdGoPkgHasElemOneTimeUse
type XsdGoPkgHasElemOneTimeUse struct {
	OneTimeUse *TOneTimeUseType `xml:"urn:oasis:names:tc:SAML:2.0:assertion OneTimeUse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemOneTimeUse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemOneTimeUse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemOneTimeUse instance.
func (me *XsdGoPkgHasElemOneTimeUse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemOneTimeUse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OneTimeUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemProxyRestriction defines XsdGoPkgHasElemProxyRestriction
type XsdGoPkgHasElemProxyRestriction struct {
	ProxyRestriction *TProxyRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion ProxyRestriction"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemProxyRestriction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemProxyRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemProxyRestriction instance.
func (me *XsdGoPkgHasElemProxyRestriction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemProxyRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProxyRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAdvice defines XsdGoPkgHasElemsAdvice
type XsdGoPkgHasElemsAdvice struct {
	Advices []*TAdviceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Advice"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAdvice function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAdvice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAdvice instance.
func (me *XsdGoPkgHasElemsAdvice) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAdvice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Advices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEncryptedAssertion defines XsdGoPkgHasElemEncryptedAssertion
type XsdGoPkgHasElemEncryptedAssertion struct {
	EncryptedAssertion *TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAssertion"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEncryptedAssertion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEncryptedAssertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEncryptedAssertion instance.
func (me *XsdGoPkgHasElemEncryptedAssertion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEncryptedAssertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemStatement defines XsdGoPkgHasElemStatement
type XsdGoPkgHasElemStatement struct {
	Statement *TStatementAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Statement"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemStatement instance.
func (me *XsdGoPkgHasElemStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Statement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthnStatement defines XsdGoPkgHasElemAuthnStatement
type XsdGoPkgHasElemAuthnStatement struct {
	AuthnStatement *TAuthnStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnStatement"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthnStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthnStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthnStatement instance.
func (me *XsdGoPkgHasElemAuthnStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthnStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSubjectLocality defines XsdGoPkgHasElemsSubjectLocality
type XsdGoPkgHasElemsSubjectLocality struct {
	SubjectLocalities []*TSubjectLocalityType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectLocality"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSubjectLocality function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSubjectLocality instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSubjectLocality instance.
func (me *XsdGoPkgHasElemsSubjectLocality) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSubjectLocality; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectLocalities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthnContext defines XsdGoPkgHasElemsAuthnContext
type XsdGoPkgHasElemsAuthnContext struct {
	AuthnContexts []*TAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContext"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthnContext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthnContext instance.
func (me *XsdGoPkgHasElemsAuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnContexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthnContextClassRef defines XsdGoPkgHasElemsAuthnContextClassRef
type XsdGoPkgHasElemsAuthnContextClassRef struct {
	AuthnContextClassRefs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextClassRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthnContextClassRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthnContextClassRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthnContextClassRef instance.
func (me *XsdGoPkgHasElemsAuthnContextClassRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthnContextClassRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthnContextDeclRef defines XsdGoPkgHasElemsAuthnContextDeclRef
type XsdGoPkgHasElemsAuthnContextDeclRef struct {
	AuthnContextDeclRefs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDeclRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthnContextDeclRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthnContextDeclRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthnContextDeclRef instance.
func (me *XsdGoPkgHasElemsAuthnContextDeclRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthnContextDeclRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthnContextDecl defines XsdGoPkgHasElemsAuthnContextDecl
type XsdGoPkgHasElemsAuthnContextDecl struct {
	AuthnContextDecls []xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDecl"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthnContextDecl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthnContextDecl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthnContextDecl instance.
func (me *XsdGoPkgHasElemsAuthnContextDecl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthnContextDecl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthenticatingAuthority defines XsdGoPkgHasElemAuthenticatingAuthority
type XsdGoPkgHasElemAuthenticatingAuthority struct {
	AuthenticatingAuthority xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthenticatingAuthority"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthenticatingAuthority function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthenticatingAuthority instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemAuthenticatingAuthority instance.
func (me *XsdGoPkgHasElemAuthenticatingAuthority) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthenticatingAuthority; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthzDecisionStatement defines XsdGoPkgHasElemAuthzDecisionStatement
type XsdGoPkgHasElemAuthzDecisionStatement struct {
	AuthzDecisionStatement *TAuthzDecisionStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthzDecisionStatement"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthzDecisionStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthzDecisionStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthzDecisionStatement instance.
func (me *XsdGoPkgHasElemAuthzDecisionStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthzDecisionStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthzDecisionStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAction defines XsdGoPkgHasElemAction
type XsdGoPkgHasElemAction struct {
	Action *TActionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Action"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAction instance.
func (me *XsdGoPkgHasElemAction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Action.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEvidence defines XsdGoPkgHasElemsEvidence
type XsdGoPkgHasElemsEvidence struct {
	Evidences []*TEvidenceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Evidence"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEvidence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEvidence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEvidence instance.
func (me *XsdGoPkgHasElemsEvidence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEvidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Evidences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAttributeStatement defines XsdGoPkgHasElemAttributeStatement
type XsdGoPkgHasElemAttributeStatement struct {
	AttributeStatement *TAttributeStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeStatement"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAttributeStatement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAttributeStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAttributeStatement instance.
func (me *XsdGoPkgHasElemAttributeStatement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAttributeStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAttribute defines XsdGoPkgHasElemAttribute
type XsdGoPkgHasElemAttribute struct {
	Attribute *TAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Attribute"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAttribute instance.
func (me *XsdGoPkgHasElemAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Attribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAttributeValue defines XsdGoPkgHasElemAttributeValue
type XsdGoPkgHasElemAttributeValue struct {
	AttributeValue xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAttributeValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAttributeValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemAttributeValue instance.
func (me *XsdGoPkgHasElemAttributeValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAttributeValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEncryptedAttribute defines XsdGoPkgHasElemEncryptedAttribute
type XsdGoPkgHasElemEncryptedAttribute struct {
	EncryptedAttribute *TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAttribute"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEncryptedAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEncryptedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEncryptedAttribute instance.
func (me *XsdGoPkgHasElemEncryptedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEncryptedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeyInfoConfirmationDataType defines TKeyInfoConfirmationDataType
type TKeyInfoConfirmationDataType struct {
	TSubjectConfirmationDataType

	ds.XsdGoPkgHasElemsKeyInfo
}

// Walk : if the WalkHandlers.TKeyInfoConfirmationDataType function is not nil (ie. was set by outside code), calls it with this TKeyInfoConfirmationDataType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TKeyInfoConfirmationDataType instance.
func (me *TKeyInfoConfirmationDataType) Walk() (err error) {
	if fn := WalkHandlers.TKeyInfoConfirmationDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectConfirmationDataType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasCdata defines type CDATA
type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

// XsdGoPkgWalkHandlers provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TEncryptedElementType                   func(*TEncryptedElementType, bool) error
	XsdGoPkgHasElemAuthnContextDeclRef      func(*XsdGoPkgHasElemAuthnContextDeclRef, bool) error
	TAuthnStatementType                     func(*TAuthnStatementType, bool) error
	XsdGoPkgHasElemSubjectConfirmation      func(*XsdGoPkgHasElemSubjectConfirmation, bool) error
	XsdGoPkgHasElemAttributeValue           func(*XsdGoPkgHasElemAttributeValue, bool) error
	XsdGoPkgHasElemsEvidence                func(*XsdGoPkgHasElemsEvidence, bool) error
	XsdGoPkgHasElemAttributeStatement       func(*XsdGoPkgHasElemAttributeStatement, bool) error
	XsdGoPkgHasElemsAuthenticatingAuthority func(*XsdGoPkgHasElemsAuthenticatingAuthority, bool) error
	XsdGoPkgHasElemAuthnContext             func(*XsdGoPkgHasElemAuthnContext, bool) error
	XsdGoPkgHasElemsEncryptedAssertion      func(*XsdGoPkgHasElemsEncryptedAssertion, bool) error
	TAuthzDecisionStatementType             func(*TAuthzDecisionStatementType, bool) error
	TAudienceRestrictionType                func(*TAudienceRestrictionType, bool) error
	XsdGoPkgHasElemAuthenticatingAuthority  func(*XsdGoPkgHasElemAuthenticatingAuthority, bool) error
	XsdGoPkgHasElemsAuthzDecisionStatement  func(*XsdGoPkgHasElemsAuthzDecisionStatement, bool) error
	XsdGoPkgHasElemConditions               func(*XsdGoPkgHasElemConditions, bool) error
	XsdGoPkgHasElemsSubjectLocality         func(*XsdGoPkgHasElemsSubjectLocality, bool) error
	XsdGoPkgHasElemEncryptedID              func(*XsdGoPkgHasElemEncryptedID, bool) error
	XsdGoPkgHasElemsIssuer                  func(*XsdGoPkgHasElemsIssuer, bool) error
	XsdGoPkgHasElemsAssertionIDRef          func(*XsdGoPkgHasElemsAssertionIDRef, bool) error
	XsdGoPkgHasElemsAttributeStatement      func(*XsdGoPkgHasElemsAttributeStatement, bool) error
	XsdGoPkgHasElemCondition                func(*XsdGoPkgHasElemCondition, bool) error
	XsdGoPkgHasElemOneTimeUse               func(*XsdGoPkgHasElemOneTimeUse, bool) error
	XsdGoPkgHasElemAction                   func(*XsdGoPkgHasElemAction, bool) error
	XsdGoPkgHasElemAssertionURIRef          func(*XsdGoPkgHasElemAssertionURIRef, bool) error
	TAdviceType                             func(*TAdviceType, bool) error
	TProxyRestrictionType                   func(*TProxyRestrictionType, bool) error
	XsdGoPkgHasElemsConditions              func(*XsdGoPkgHasElemsConditions, bool) error
	XsdGoPkgHasElemEncryptedAssertion       func(*XsdGoPkgHasElemEncryptedAssertion, bool) error
	XsdGoPkgHasElemsAuthnContextDeclRef     func(*XsdGoPkgHasElemsAuthnContextDeclRef, bool) error
	XsdGoPkgHasElemSubjectLocality          func(*XsdGoPkgHasElemSubjectLocality, bool) error
	XsdGoPkgHasElemAuthnContextDecl         func(*XsdGoPkgHasElemAuthnContextDecl, bool) error
	XsdGoPkgHasElemAuthnStatement           func(*XsdGoPkgHasElemAuthnStatement, bool) error
	XsdGoPkgHasElemsAdvice                  func(*XsdGoPkgHasElemsAdvice, bool) error
	XsdGoPkgHasElemsAuthnContextDecl        func(*XsdGoPkgHasElemsAuthnContextDecl, bool) error
	XsdGoPkgHasElemsNameID                  func(*XsdGoPkgHasElemsNameID, bool) error
	TAuthnContextType                       func(*TAuthnContextType, bool) error
	XsdGoPkgHasElemsAuthnStatement          func(*XsdGoPkgHasElemsAuthnStatement, bool) error
	TAttributeStatementType                 func(*TAttributeStatementType, bool) error
	XsdGoPkgHasElemsCondition               func(*XsdGoPkgHasElemsCondition, bool) error
	XsdGoPkgHasElemsAudienceRestriction     func(*XsdGoPkgHasElemsAudienceRestriction, bool) error
	XsdGoPkgHasElemAuthzDecisionStatement   func(*XsdGoPkgHasElemAuthzDecisionStatement, bool) error
	XsdGoPkgHasElemEncryptedAttribute       func(*XsdGoPkgHasElemEncryptedAttribute, bool) error
	XsdGoPkgHasElemSubjectConfirmationData  func(*XsdGoPkgHasElemSubjectConfirmationData, bool) error
	XsdGoPkgHasElemsSubjectConfirmationData func(*XsdGoPkgHasElemsSubjectConfirmationData, bool) error
	XsdGoPkgHasElemAudience                 func(*XsdGoPkgHasElemAudience, bool) error
	XsdGoPkgHasElemsAttribute               func(*XsdGoPkgHasElemsAttribute, bool) error
	XsdGoPkgHasElemsAuthnContextClassRef    func(*XsdGoPkgHasElemsAuthnContextClassRef, bool) error
	TBaseIDAbstractType                     func(*TBaseIDAbstractType, bool) error
	XsdGoPkgHasElemAssertionIDRef           func(*XsdGoPkgHasElemAssertionIDRef, bool) error
	TSubjectConfirmationType                func(*TSubjectConfirmationType, bool) error
	TSubjectType                            func(*TSubjectType, bool) error
	XsdGoPkgHasElemSubject                  func(*XsdGoPkgHasElemSubject, bool) error
	TAttributeType                          func(*TAttributeType, bool) error
	XsdGoPkgHasElemsEncryptedID             func(*XsdGoPkgHasElemsEncryptedID, bool) error
	XsdGoPkgHasElemsAssertionURIRef         func(*XsdGoPkgHasElemsAssertionURIRef, bool) error
	XsdGoPkgHasElemsStatement               func(*XsdGoPkgHasElemsStatement, bool) error
	XsdGoPkgHasElemsAudience                func(*XsdGoPkgHasElemsAudience, bool) error
	XsdGoPkgHasElemAssertion                func(*XsdGoPkgHasElemAssertion, bool) error
	TStatementAbstractType                  func(*TStatementAbstractType, bool) error
	XsdGoPkgHasElemsSubjectConfirmation     func(*XsdGoPkgHasElemsSubjectConfirmation, bool) error
	TActionType                             func(*TActionType, bool) error
	XsdGoPkgHasElemsAttributeValue          func(*XsdGoPkgHasElemsAttributeValue, bool) error
	XsdGoPkgHasElemAudienceRestriction      func(*XsdGoPkgHasElemAudienceRestriction, bool) error
	XsdGoPkgHasElemsSubject                 func(*XsdGoPkgHasElemsSubject, bool) error
	XsdGoPkgHasElemStatement                func(*XsdGoPkgHasElemStatement, bool) error
	XsdGoPkgHasElemsBaseID                  func(*XsdGoPkgHasElemsBaseID, bool) error
	XsdGoPkgHasElemBaseID                   func(*XsdGoPkgHasElemBaseID, bool) error
	TNameIDType                             func(*TNameIDType, bool) error
	TSubjectConfirmationDataType            func(*TSubjectConfirmationDataType, bool) error
	TEvidenceType                           func(*TEvidenceType, bool) error
	XsdGoPkgHasElemEvidence                 func(*XsdGoPkgHasElemEvidence, bool) error
	XsdGoPkgHasElemsAuthnContext            func(*XsdGoPkgHasElemsAuthnContext, bool) error
	XsdGoPkgHasElemNameID                   func(*XsdGoPkgHasElemNameID, bool) error
	XsdGoPkgHasElemsAssertion               func(*XsdGoPkgHasElemsAssertion, bool) error
	XsdGoPkgHasElemsEncryptedAttribute      func(*XsdGoPkgHasElemsEncryptedAttribute, bool) error
	TConditionAbstractType                  func(*TConditionAbstractType, bool) error
	XsdGoPkgHasElemsOneTimeUse              func(*XsdGoPkgHasElemsOneTimeUse, bool) error
	XsdGoPkgHasElemProxyRestriction         func(*XsdGoPkgHasElemProxyRestriction, bool) error
	TKeyInfoConfirmationDataType            func(*TKeyInfoConfirmationDataType, bool) error
	XsdGoPkgHasElemIssuer                   func(*XsdGoPkgHasElemIssuer, bool) error
	TSubjectLocalityType                    func(*TSubjectLocalityType, bool) error
	XsdGoPkgHasElemAdvice                   func(*XsdGoPkgHasElemAdvice, bool) error
	XsdGoPkgHasElemsAction                  func(*XsdGoPkgHasElemsAction, bool) error
	XsdGoPkgHasElemsProxyRestriction        func(*XsdGoPkgHasElemsProxyRestriction, bool) error
	TConditionsType                         func(*TConditionsType, bool) error
	XsdGoPkgHasCdata                        func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElemAttribute                func(*XsdGoPkgHasElemAttribute, bool) error
	XsdGoPkgHasElemAuthnContextClassRef     func(*XsdGoPkgHasElemAuthnContextClassRef, bool) error
	TOneTimeUseType                         func(*TOneTimeUseType, bool) error
	TAssertionType                          func(*TAssertionType, bool) error
}
