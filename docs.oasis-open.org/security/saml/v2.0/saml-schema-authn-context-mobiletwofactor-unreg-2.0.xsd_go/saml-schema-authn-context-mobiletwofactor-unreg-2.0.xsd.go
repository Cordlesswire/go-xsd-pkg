//	Auto-generated by the "go-xsd" package located at:
//		github.com/miracl/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		docs.oasis-open.org/security/saml/v2.0/saml-schema-authn-context-mobiletwofactor-unreg-2.0.xsd
package go_SamlAuthnContextMobiletwofactorUnreg20

import (
	sac "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-authn-context-2.0.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorUnregistered ID,attr"`
}

type TAuthnContextDeclarationBaseType struct {
	sac.XsdGoPkgHasElem_AuthnMethod

	sac.XsdGoPkgHasElem_GoverningAgreements

	sac.XsdGoPkgHasElems_Extension

	XsdGoPkgHasAttr_Id_XsdtId_

	*TAuthnContextDeclarationBaseType

	sac.XsdGoPkgHasElem_Identification

	sac.XsdGoPkgHasElem_TechnicalProtection

	sac.XsdGoPkgHasElem_OperationalProtection
}

//	If the WalkHandlers.TAuthnContextDeclarationBaseType function is not nil (ie. was set by outside code), calls it with this TAuthnContextDeclarationBaseType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TAuthnContextDeclarationBaseType instance.
func (me *TAuthnContextDeclarationBaseType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnContextDeclarationBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TAuthnContextDeclarationBaseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAuthnMethodBaseType struct {
	*TAuthnMethodBaseType

	sac.XsdGoPkgHasElem_PrincipalAuthenticationMechanism

	sac.XsdGoPkgHasElem_Authenticator

	sac.XsdGoPkgHasElem_AuthenticatorTransportProtocol

	sac.XsdGoPkgHasElems_Extension
}

//	If the WalkHandlers.TAuthnMethodBaseType function is not nil (ie. was set by outside code), calls it with this TAuthnMethodBaseType instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TAuthnMethodBaseType instance.
func (me *TAuthnMethodBaseType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnMethodBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TAuthnMethodBaseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TechnicalProtectionBaseType struct {
	*TechnicalProtectionBaseType

	sac.XsdGoPkgHasElem_PrivateKeyProtection

	sac.XsdGoPkgHasElem_SecretKeyProtection

	sac.XsdGoPkgHasElems_Extension
}

//	If the WalkHandlers.TechnicalProtectionBaseType function is not nil (ie. was set by outside code), calls it with this TechnicalProtectionBaseType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TechnicalProtectionBaseType instance.
func (me *TechnicalProtectionBaseType) Walk() (err error) {
	if fn := WalkHandlers.TechnicalProtectionBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechnicalProtectionBaseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium sac.TmediumType

//	Returns true if the value of this enumerated TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium is "MobileAuthCard".
func (me TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium) IsMobileAuthCard() bool {
	return me.String() == "MobileAuthCard"
}

//	Returns true if the value of this enumerated TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium is "smartcard".
func (me TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium) IsSmartcard() bool {
	return me.String() == "smartcard"
}

//	Since TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium) Set(s string) {
	(*sac.TmediumType)(me).Set(s)
}

//	Since TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium is just a simple String type, this merely returns the current string value.
func (me TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium) String() string {
	return sac.TmediumType(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium's alias type sac.TmediumType.
func (me TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium) ToTmediumType() sac.TmediumType {
	return sac.TmediumType(me)
}

//	Returns true if the value of this enumerated TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium is "MobileDevice".
func (me TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium) IsMobileDevice() bool {
	return me.String() == "MobileDevice"
}

type XsdGoPkgHasAttr_Medium_TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium_ struct {
	Medium TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium `xml:"urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorUnregistered medium,attr"`
}

type TKeyStorageType struct {
	XsdGoPkgHasAttr_Medium_TxsdRedefineKeyStorageTypeComplexContentRestrictionMedium_

	*TKeyStorageType
}

//	If the WalkHandlers.TKeyStorageType function is not nil (ie. was set by outside code), calls it with this TKeyStorageType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TKeyStorageType instance.
func (me *TKeyStorageType) Walk() (err error) {
	if fn := WalkHandlers.TKeyStorageType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TKeyStorageType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSecurityAuditType struct {
	*TSecurityAuditType

	sac.XsdGoPkgHasElem_SwitchAudit

	sac.XsdGoPkgHasElems_Extension
}

//	If the WalkHandlers.TSecurityAuditType function is not nil (ie. was set by outside code), calls it with this TSecurityAuditType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TSecurityAuditType instance.
func (me *TSecurityAuditType) Walk() (err error) {
	if fn := WalkHandlers.TSecurityAuditType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSecurityAuditType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRedefineIdentificationTypeComplexContentRestrictionNym sac.TnymType

//	Returns true if the value of this enumerated TxsdRedefineIdentificationTypeComplexContentRestrictionNym is "anonymity".
func (me TxsdRedefineIdentificationTypeComplexContentRestrictionNym) IsAnonymity() bool {
	return me.String() == "anonymity"
}

//	Returns true if the value of this enumerated TxsdRedefineIdentificationTypeComplexContentRestrictionNym is "pseudonymity".
func (me TxsdRedefineIdentificationTypeComplexContentRestrictionNym) IsPseudonymity() bool {
	return me.String() == "pseudonymity"
}

//	Since TxsdRedefineIdentificationTypeComplexContentRestrictionNym is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdRedefineIdentificationTypeComplexContentRestrictionNym) Set(s string) {
	(*sac.TnymType)(me).Set(s)
}

//	Since TxsdRedefineIdentificationTypeComplexContentRestrictionNym is just a simple String type, this merely returns the current string value.
func (me TxsdRedefineIdentificationTypeComplexContentRestrictionNym) String() string {
	return sac.TnymType(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdRedefineIdentificationTypeComplexContentRestrictionNym's alias type sac.TnymType.
func (me TxsdRedefineIdentificationTypeComplexContentRestrictionNym) ToTnymType() sac.TnymType {
	return sac.TnymType(me)
}

type TAuthenticatorBaseType struct {
	*TAuthenticatorBaseType

	sac.XsdGoPkgHasElem_SharedSecretDynamicPlaintext

	sac.XsdGoPkgHasElem_AsymmetricDecryption

	sac.XsdGoPkgHasElem_AsymmetricKeyAgreement

	sac.XsdGoPkgHasElem_DigSig

	sac.XsdGoPkgHasElem_ZeroKnowledge

	sac.XsdGoPkgHasElem_SharedSecretChallengeResponse

	sac.XsdGoPkgHasElem_ComplexAuthenticator

	sac.XsdGoPkgHasElems_Extension
}

//	If the WalkHandlers.TAuthenticatorBaseType function is not nil (ie. was set by outside code), calls it with this TAuthenticatorBaseType instance as the single argument. Then calls the Walk() method on 1/9 embed(s) and 0/0 field(s) belonging to this TAuthenticatorBaseType instance.
func (me *TAuthenticatorBaseType) Walk() (err error) {
	if fn := WalkHandlers.TAuthenticatorBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TAuthenticatorBaseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TComplexAuthenticatorType struct {
	*TComplexAuthenticatorType

	sac.XsdGoPkgHasElem_SharedSecretChallengeResponse

	sac.XsdGoPkgHasElem_SharedSecretDynamicPlaintext

	sac.XsdGoPkgHasElem_Password
}

//	If the WalkHandlers.TComplexAuthenticatorType function is not nil (ie. was set by outside code), calls it with this TComplexAuthenticatorType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TComplexAuthenticatorType instance.
func (me *TComplexAuthenticatorType) Walk() (err error) {
	if fn := WalkHandlers.TComplexAuthenticatorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TComplexAuthenticatorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAuthenticatorTransportProtocolType struct {
	sac.XsdGoPkgHasElem_Wtls

	sac.XsdGoPkgHasElems_Extension

	*TAuthenticatorTransportProtocolType

	sac.XsdGoPkgHasElem_Ssl

	sac.XsdGoPkgHasElem_MobileNetworkNoEncryption

	sac.XsdGoPkgHasElem_MobileNetworkRadioEncryption

	sac.XsdGoPkgHasElem_MobileNetworkEndToEndEncryption
}

//	If the WalkHandlers.TAuthenticatorTransportProtocolType function is not nil (ie. was set by outside code), calls it with this TAuthenticatorTransportProtocolType instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TAuthenticatorTransportProtocolType instance.
func (me *TAuthenticatorTransportProtocolType) Walk() (err error) {
	if fn := WalkHandlers.TAuthenticatorTransportProtocolType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TAuthenticatorTransportProtocolType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPrivateKeyProtectionType struct {
	*TPrivateKeyProtectionType

	sac.XsdGoPkgHasElem_KeyActivation

	sac.XsdGoPkgHasElem_KeyStorage

	sac.XsdGoPkgHasElems_Extension
}

//	If the WalkHandlers.TPrivateKeyProtectionType function is not nil (ie. was set by outside code), calls it with this TPrivateKeyProtectionType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TPrivateKeyProtectionType instance.
func (me *TPrivateKeyProtectionType) Walk() (err error) {
	if fn := WalkHandlers.TPrivateKeyProtectionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TPrivateKeyProtectionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TOperationalProtectionType struct {
	*TOperationalProtectionType

	sac.XsdGoPkgHasElem_SecurityAudit

	sac.XsdGoPkgHasElem_DeactivationCallCenter

	sac.XsdGoPkgHasElems_Extension
}

//	If the WalkHandlers.TOperationalProtectionType function is not nil (ie. was set by outside code), calls it with this TOperationalProtectionType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TOperationalProtectionType instance.
func (me *TOperationalProtectionType) Walk() (err error) {
	if fn := WalkHandlers.TOperationalProtectionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TOperationalProtectionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSecretKeyProtectionType struct {
	*TSecretKeyProtectionType

	sac.XsdGoPkgHasElem_KeyActivation

	sac.XsdGoPkgHasElem_KeyStorage

	sac.XsdGoPkgHasElems_Extension
}

//	If the WalkHandlers.TSecretKeyProtectionType function is not nil (ie. was set by outside code), calls it with this TSecretKeyProtectionType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TSecretKeyProtectionType instance.
func (me *TSecretKeyProtectionType) Walk() (err error) {
	if fn := WalkHandlers.TSecretKeyProtectionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSecretKeyProtectionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Nym_TxsdRedefineIdentificationTypeComplexContentRestrictionNym_ struct {
	Nym TxsdRedefineIdentificationTypeComplexContentRestrictionNym `xml:"urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorUnregistered nym,attr"`
}

type TIdentificationType struct {
	*TIdentificationType

	sac.XsdGoPkgHasElem_GoverningAgreements

	sac.XsdGoPkgHasElems_Extension

	XsdGoPkgHasAttr_Nym_TxsdRedefineIdentificationTypeComplexContentRestrictionNym_
}

//	If the WalkHandlers.TIdentificationType function is not nil (ie. was set by outside code), calls it with this TIdentificationType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TIdentificationType instance.
func (me *TIdentificationType) Walk() (err error) {
	if fn := WalkHandlers.TIdentificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TIdentificationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 13 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 13 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TAuthnContextDeclarationBaseType    func(*TAuthnContextDeclarationBaseType, bool) error
	TKeyStorageType                     func(*TKeyStorageType, bool) error
	TSecurityAuditType                  func(*TSecurityAuditType, bool) error
	TAuthenticatorBaseType              func(*TAuthenticatorBaseType, bool) error
	TComplexAuthenticatorType           func(*TComplexAuthenticatorType, bool) error
	TOperationalProtectionType          func(*TOperationalProtectionType, bool) error
	TAuthnMethodBaseType                func(*TAuthnMethodBaseType, bool) error
	TechnicalProtectionBaseType         func(*TechnicalProtectionBaseType, bool) error
	TAuthenticatorTransportProtocolType func(*TAuthenticatorTransportProtocolType, bool) error
	TPrivateKeyProtectionType           func(*TPrivateKeyProtectionType, bool) error
	XsdGoPkgHasCdata                    func(*XsdGoPkgHasCdata, bool) error
	TSecretKeyProtectionType            func(*TSecretKeyProtectionType, bool) error
	TIdentificationType                 func(*TIdentificationType, bool) error
}
