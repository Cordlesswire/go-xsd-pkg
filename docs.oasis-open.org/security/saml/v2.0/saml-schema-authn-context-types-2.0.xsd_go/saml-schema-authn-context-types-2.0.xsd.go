// Package goSamlAuthnContextTypes20 : autogenerated by go-xsd
package goSamlAuthnContextTypes20

//	Document identifier: saml-schema-authn-context-types-2.0 Location: http://docs.oasis-open.org/security/saml/v2.0/ Revision history: V2.0 (March, 2005): New core authentication context schema types for SAML V2.0.

import (
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// XsdGoPkgHasAttrGoverningAgreementRefXsdtAnyURI A particular assertion on an identity
// provider's part with respect to the authentication
// context associated with an authentication assertion.
// Provides a mechanism for linking to external (likely
// human readable) documents in which additional business agreements,
// (e.g. liability constraints, obligations, etc) can be placed.
type XsdGoPkgHasAttrGoverningAgreementRefXsdtAnyURI struct {
	GoverningAgreementRef xsdt.AnyURI `xml:"governingAgreementRef,attr"`
}

// TGoverningAgreementRefType defines TGoverningAgreementRefType
type TGoverningAgreementRefType struct {
	XsdGoPkgHasAttrGoverningAgreementRefXsdtAnyURI
}

// Walk : if the WalkHandlers.TGoverningAgreementRefType function is not nil (ie. was set by outside code), calls it with this TGoverningAgreementRefType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TGoverningAgreementRefType instance.
func (me *TGoverningAgreementRefType) Walk() (err error) {
	if fn := WalkHandlers.TGoverningAgreementRefType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsGoverningAgreementRef defines XsdGoPkgHasElemsGoverningAgreementRef
type XsdGoPkgHasElemsGoverningAgreementRef struct {
	GoverningAgreementRefs []*TGoverningAgreementRefType `xml:"GoverningAgreementRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsGoverningAgreementRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsGoverningAgreementRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsGoverningAgreementRef instance.
func (me *XsdGoPkgHasElemsGoverningAgreementRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsGoverningAgreementRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GoverningAgreementRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TGoverningAgreementsType defines TGoverningAgreementsType
type TGoverningAgreementsType struct {
	XsdGoPkgHasElemsGoverningAgreementRef
}

// Walk : if the WalkHandlers.TGoverningAgreementsType function is not nil (ie. was set by outside code), calls it with this TGoverningAgreementsType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TGoverningAgreementsType instance.
func (me *TGoverningAgreementsType) Walk() (err error) {
	if fn := WalkHandlers.TGoverningAgreementsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsGoverningAgreementRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemGoverningAgreements defines XsdGoPkgHasElemGoverningAgreements
type XsdGoPkgHasElemGoverningAgreements struct {
	//	Provides a mechanism for linking to external (likely
	//	human readable) documents in which additional business agreements,
	//	(e.g. liability constraints, obligations, etc) can be placed.
	GoverningAgreements *TGoverningAgreementsType `xml:"GoverningAgreements"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemGoverningAgreements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemGoverningAgreements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemGoverningAgreements instance.
func (me *XsdGoPkgHasElemGoverningAgreements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemGoverningAgreements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GoverningAgreements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TExtensionType defines TExtensionType
type TExtensionType struct {
}

// Walk : if the WalkHandlers.TExtensionType function is not nil (ie. was set by outside code), calls it with this TExtensionType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TExtensionType instance.
func (me *TExtensionType) Walk() (err error) {
	if fn := WalkHandlers.TExtensionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsExtension defines XsdGoPkgHasElemsExtension
type XsdGoPkgHasElemsExtension struct {
	Extensions []*TExtensionType `xml:"Extension"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsExtension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsExtension instance.
func (me *XsdGoPkgHasElemsExtension) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsExtension; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extensions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrIDXsdtID defines attribute IdXsdtId
type XsdGoPkgHasAttrIDXsdtID struct {
	ID xsdt.ID `xml:"ID,attr"`
}

// TxsdPhysicalVerificationCredentialLevel Refers to those characteristics that describe the processes and mechanisms the Authentication Authority uses to initially create an association between a Principal and the identity (or name) by which the Principal will be known This element indicates that identification has been performed in a physical face-to-face meeting with the principal and not in an online manner.
type TxsdPhysicalVerificationCredentialLevel xsdt.Nmtoken

// IsPrimary : Returns true if the value of this enumerated TxsdPhysicalVerificationCredentialLevel is "primary".
func (me TxsdPhysicalVerificationCredentialLevel) IsPrimary() bool { return me.String() == "primary" }

// IsSecondary : Returns true if the value of this enumerated TxsdPhysicalVerificationCredentialLevel is "secondary".
func (me TxsdPhysicalVerificationCredentialLevel) IsSecondary() bool {
	return me.String() == "secondary"
}

// Set : Since TxsdPhysicalVerificationCredentialLevel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPhysicalVerificationCredentialLevel) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

// String : Since TxsdPhysicalVerificationCredentialLevel is just a simple String type, this merely returns the current string value.
func (me TxsdPhysicalVerificationCredentialLevel) String() string { return xsdt.Nmtoken(me).String() }

// ToXsdtNmtoken : This convenience method just performs a simple type conversion to TxsdPhysicalVerificationCredentialLevel's alias type xsdt.Nmtoken.
func (me TxsdPhysicalVerificationCredentialLevel) ToXsdtNmtoken() xsdt.Nmtoken {
	return xsdt.Nmtoken(me)
}

// XsdGoPkgHasAttrCredentialLevelTxsdPhysicalVerificationCredentialLevel defines attribute CredentialLevelTxsdPhysicalVerificationCredentialLevel
type XsdGoPkgHasAttrCredentialLevelTxsdPhysicalVerificationCredentialLevel struct {
	CredentialLevel TxsdPhysicalVerificationCredentialLevel `xml:"credentialLevel,attr"`
}

// TxsdPhysicalVerification defines TxsdPhysicalVerification
type TxsdPhysicalVerification struct {
	XsdGoPkgHasAttrCredentialLevelTxsdPhysicalVerificationCredentialLevel
}

// Walk : if the WalkHandlers.TxsdPhysicalVerification function is not nil (ie. was set by outside code), calls it with this TxsdPhysicalVerification instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdPhysicalVerification instance.
func (me *TxsdPhysicalVerification) Walk() (err error) {
	if fn := WalkHandlers.TxsdPhysicalVerification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPhysicalVerification defines XsdGoPkgHasElemPhysicalVerification
type XsdGoPkgHasElemPhysicalVerification struct {
	//	This element indicates that identification has been
	//	performed in a physical
	//	face-to-face meeting with the principal and not in an
	//	online manner.
	PhysicalVerification *TxsdPhysicalVerification `xml:"PhysicalVerification"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPhysicalVerification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPhysicalVerification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPhysicalVerification instance.
func (me *XsdGoPkgHasElemPhysicalVerification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPhysicalVerification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PhysicalVerification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TExtensionOnlyType defines TExtensionOnlyType
type TExtensionOnlyType struct {
	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TExtensionOnlyType function is not nil (ie. was set by outside code), calls it with this TExtensionOnlyType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TExtensionOnlyType instance.
func (me *TExtensionOnlyType) Walk() (err error) {
	if fn := WalkHandlers.TExtensionOnlyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemWrittenConsent defines XsdGoPkgHasElemWrittenConsent
type XsdGoPkgHasElemWrittenConsent struct {
	WrittenConsent *TExtensionOnlyType `xml:"WrittenConsent"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemWrittenConsent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemWrittenConsent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemWrittenConsent instance.
func (me *XsdGoPkgHasElemWrittenConsent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemWrittenConsent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.WrittenConsent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TnymType This attribute indicates whether or not the
// Identification mechanisms allow the actions of the Principal to be
// linked to an actual end user.
type TnymType xsdt.Nmtoken

// Set : Since TnymType is just a simple String type, this merely sets the current value from the specified string.
func (me *TnymType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

// String : Since TnymType is just a simple String type, this merely returns the current string value.
func (me TnymType) String() string { return xsdt.Nmtoken(me).String() }

// ToXsdtNmtoken : This convenience method just performs a simple type conversion to TnymType's alias type xsdt.Nmtoken.
func (me TnymType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

// IsAnonymity : Returns true if the value of this enumerated TnymType is "anonymity".
func (me TnymType) IsAnonymity() bool { return me.String() == "anonymity" }

// IsVerinymity : Returns true if the value of this enumerated TnymType is "verinymity".
func (me TnymType) IsVerinymity() bool { return me.String() == "verinymity" }

// IsPseudonymity : Returns true if the value of this enumerated TnymType is "pseudonymity".
func (me TnymType) IsPseudonymity() bool { return me.String() == "pseudonymity" }

// XsdGoPkgHasAttrNymTnymType defines attribute NymTnymType
type XsdGoPkgHasAttrNymTnymType struct {
	//	This attribute indicates whether or not the
	//	Identification mechanisms allow the actions of the Principal to be
	//	linked to an actual end user.
	Nym TnymType `xml:"nym,attr"`
}

// TIdentificationType defines TIdentificationType
type TIdentificationType struct {
	XsdGoPkgHasElemWrittenConsent

	XsdGoPkgHasElemGoverningAgreements

	XsdGoPkgHasElemsExtension

	//	This attribute indicates whether or not the
	//	Identification mechanisms allow the actions of the Principal to be
	//	linked to an actual end user.
	XsdGoPkgHasAttrNymTnymType

	XsdGoPkgHasElemPhysicalVerification
}

// Walk : if the WalkHandlers.TIdentificationType function is not nil (ie. was set by outside code), calls it with this TIdentificationType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TIdentificationType instance.
func (me *TIdentificationType) Walk() (err error) {
	if fn := WalkHandlers.TIdentificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemPhysicalVerification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemWrittenConsent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemGoverningAgreements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemIdentification defines XsdGoPkgHasElemIdentification
type XsdGoPkgHasElemIdentification struct {
	//	Refers to those characteristics that describe the
	//	processes and mechanisms
	//	the Authentication Authority uses to initially create
	//	an association between a Principal
	//	and the identity (or name) by which the Principal will
	//	be known
	Identification *TIdentificationType `xml:"Identification"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemIdentification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemIdentification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemIdentification instance.
func (me *XsdGoPkgHasElemIdentification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemIdentification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Identification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrMaxXsdtInteger Refers to those characterstics that describe how the 'secret' (the knowledge or possession of which allows the Principal to authenticate to the Authentication Authority) is kept secure This element indicates the types and strengths of facilities of a UA used to protect a shared secret key from unauthorized access and/or use. The actions that must be performed before the private key can be used. This element indicates that a Pin (Personal Identification Number) has been used to authenticate the Principal to some local system in order to activate a key. This element indicates the minimum and/or maximum ASCII length of the password which is enforced (by the UA or the IdP). In other words, this is the minimum and/or maximum number of ASCII characters required to represent a valid password. min - the minimum number of ASCII characters required in a valid password, as enforced by the UA or the IdP. max - the maximum number of ASCII characters required in a valid password, as enforced by the UA or the IdP.
type XsdGoPkgHasAttrMaxXsdtInteger struct {
	Max xsdt.Integer `xml:"max,attr"`
}

// XsdGoPkgHasAttrMinXsdtInteger defines attribute MinXsdtInteger
type XsdGoPkgHasAttrMinXsdtInteger struct {
	Min xsdt.Integer `xml:"min,attr"`
}

// TLengthType defines TLengthType
type TLengthType struct {
	XsdGoPkgHasAttrMinXsdtInteger

	XsdGoPkgHasAttrMaxXsdtInteger
}

// Walk : if the WalkHandlers.TLengthType function is not nil (ie. was set by outside code), calls it with this TLengthType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TLengthType instance.
func (me *TLengthType) Walk() (err error) {
	if fn := WalkHandlers.TLengthType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemLength defines XsdGoPkgHasElemLength
type XsdGoPkgHasElemLength struct {
	//	This element indicates the minimum and/or maximum
	//	ASCII length of the password which is enforced (by the UA or the
	//	IdP). In other words, this is the minimum and/or maximum number of
	//	ASCII characters required to represent a valid password.
	//	min - the minimum number of ASCII characters required
	//	in a valid password, as enforced by the UA or the IdP.
	//	max - the maximum number of ASCII characters required
	//	in a valid password, as enforced by the UA or the IdP.
	Length *TLengthType `xml:"Length"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemLength function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemLength instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemLength instance.
func (me *XsdGoPkgHasElemLength) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemLength; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Length.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrExcludedCharsXsdtString defines attribute ExcludedCharsXsdtString
type XsdGoPkgHasAttrExcludedCharsXsdtString struct {
	ExcludedChars xsdt.String `xml:"excludedChars,attr"`
}

// XsdGoPkgHasAttrCaseXsdtString defines attribute CaseXsdtString
type XsdGoPkgHasAttrCaseXsdtString struct {
	Case xsdt.String `xml:"case,attr"`
}

// XsdGoPkgHasAttrRequiredCharsXsdtString defines attribute RequiredCharsXsdtString
type XsdGoPkgHasAttrRequiredCharsXsdtString struct {
	RequiredChars xsdt.String `xml:"requiredChars,attr"`
}

// TAlphabetType defines TAlphabetType
type TAlphabetType struct {
	XsdGoPkgHasAttrRequiredCharsXsdtString

	XsdGoPkgHasAttrExcludedCharsXsdtString

	XsdGoPkgHasAttrCaseXsdtString
}

// Walk : if the WalkHandlers.TAlphabetType function is not nil (ie. was set by outside code), calls it with this TAlphabetType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TAlphabetType instance.
func (me *TAlphabetType) Walk() (err error) {
	if fn := WalkHandlers.TAlphabetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAlphabet defines XsdGoPkgHasElemAlphabet
type XsdGoPkgHasElemAlphabet struct {
	Alphabet *TAlphabetType `xml:"Alphabet"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAlphabet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAlphabet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAlphabet instance.
func (me *XsdGoPkgHasElemAlphabet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAlphabet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Alphabet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdGenerationMechanism Indicates whether the password was chosen by the Principal or auto-supplied by the Authentication Authority. principalchosen - the Principal is allowed to choose the value of the password. This is true even if the initial password is chosen at random by the UA or the IdP and the Principal is then free to change the password. automatic - the password is chosen by the UA or the IdP to be cryptographically strong in some sense, or to satisfy certain password rules, and that the Principal is not free to change it or to choose a new password.
type TxsdGenerationMechanism xsdt.Nmtoken

// String : Since TxsdGenerationMechanism is just a simple String type, this merely returns the current string value.
func (me TxsdGenerationMechanism) String() string { return xsdt.Nmtoken(me).String() }

// ToXsdtNmtoken : This convenience method just performs a simple type conversion to TxsdGenerationMechanism's alias type xsdt.Nmtoken.
func (me TxsdGenerationMechanism) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

// IsPrincipalchosen : Returns true if the value of this enumerated TxsdGenerationMechanism is "principalchosen".
func (me TxsdGenerationMechanism) IsPrincipalchosen() bool { return me.String() == "principalchosen" }

// IsAutomatic : Returns true if the value of this enumerated TxsdGenerationMechanism is "automatic".
func (me TxsdGenerationMechanism) IsAutomatic() bool { return me.String() == "automatic" }

// Set : Since TxsdGenerationMechanism is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdGenerationMechanism) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

// XsdGoPkgHasAttrMechanismTxsdGenerationMechanism defines attribute MechanismTxsdGenerationMechanism
type XsdGoPkgHasAttrMechanismTxsdGenerationMechanism struct {
	Mechanism TxsdGenerationMechanism `xml:"mechanism,attr"`
}

// TxsdGeneration defines TxsdGeneration
type TxsdGeneration struct {
	XsdGoPkgHasAttrMechanismTxsdGenerationMechanism
}

// Walk : if the WalkHandlers.TxsdGeneration function is not nil (ie. was set by outside code), calls it with this TxsdGeneration instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdGeneration instance.
func (me *TxsdGeneration) Walk() (err error) {
	if fn := WalkHandlers.TxsdGeneration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemGeneration defines XsdGoPkgHasElemGeneration
type XsdGoPkgHasElemGeneration struct {
	//	Indicates whether the password was chosen by the
	//	Principal or auto-supplied by the Authentication Authority.
	//	principalchosen - the Principal is allowed to choose
	//	the value of the password. This is true even if
	//	the initial password is chosen at random by the UA or
	//	the IdP and the Principal is then free to change
	//	the password.
	//	automatic - the password is chosen by the UA or the
	//	IdP to be cryptographically strong in some sense,
	//	or to satisfy certain password rules, and that the
	//	Principal is not free to change it or to choose a new password.
	Generation *TxsdGeneration `xml:"Generation"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemGeneration function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemGeneration instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemGeneration instance.
func (me *XsdGoPkgHasElemGeneration) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemGeneration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Generation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrDurationXsdtDuration This element indicates the length of time for which an
// PIN-based authentication is valid.
// This element indicates that the Key Activation Limit is
// defined as a specific duration of time.
type XsdGoPkgHasAttrDurationXsdtDuration struct {
	Duration xsdt.Duration `xml:"duration,attr"`
}

// TActivationLimitDurationType defines TActivationLimitDurationType
type TActivationLimitDurationType struct {
	XsdGoPkgHasAttrDurationXsdtDuration
}

// Walk : if the WalkHandlers.TActivationLimitDurationType function is not nil (ie. was set by outside code), calls it with this TActivationLimitDurationType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TActivationLimitDurationType instance.
func (me *TActivationLimitDurationType) Walk() (err error) {
	if fn := WalkHandlers.TActivationLimitDurationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemActivationLimitDuration defines XsdGoPkgHasElemActivationLimitDuration
type XsdGoPkgHasElemActivationLimitDuration struct {
	//	This element indicates that the Key Activation Limit is
	//	defined as a specific duration of time.
	ActivationLimitDuration *TActivationLimitDurationType `xml:"ActivationLimitDuration"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemActivationLimitDuration function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemActivationLimitDuration instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemActivationLimitDuration instance.
func (me *XsdGoPkgHasElemActivationLimitDuration) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemActivationLimitDuration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ActivationLimitDuration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrNumberXsdtInteger This element indicates that the Key Activation Limit is
// defined as a number of usages.
type XsdGoPkgHasAttrNumberXsdtInteger struct {
	Number xsdt.Integer `xml:"number,attr"`
}

// TActivationLimitUsagesType defines TActivationLimitUsagesType
type TActivationLimitUsagesType struct {
	XsdGoPkgHasAttrNumberXsdtInteger
}

// Walk : if the WalkHandlers.TActivationLimitUsagesType function is not nil (ie. was set by outside code), calls it with this TActivationLimitUsagesType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TActivationLimitUsagesType instance.
func (me *TActivationLimitUsagesType) Walk() (err error) {
	if fn := WalkHandlers.TActivationLimitUsagesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemActivationLimitUsages defines XsdGoPkgHasElemActivationLimitUsages
type XsdGoPkgHasElemActivationLimitUsages struct {
	//	This element indicates that the Key Activation Limit is
	//	defined as a number of usages.
	ActivationLimitUsages *TActivationLimitUsagesType `xml:"ActivationLimitUsages"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemActivationLimitUsages function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemActivationLimitUsages instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemActivationLimitUsages instance.
func (me *XsdGoPkgHasElemActivationLimitUsages) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemActivationLimitUsages; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ActivationLimitUsages.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TActivationLimitSessionType This element indicates that the Key Activation Limit is
// the session.
type TActivationLimitSessionType struct {
}

// Walk : if the WalkHandlers.TActivationLimitSessionType function is not nil (ie. was set by outside code), calls it with this TActivationLimitSessionType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TActivationLimitSessionType instance.
func (me *TActivationLimitSessionType) Walk() (err error) {
	if fn := WalkHandlers.TActivationLimitSessionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemActivationLimitSession defines XsdGoPkgHasElemActivationLimitSession
type XsdGoPkgHasElemActivationLimitSession struct {
	//	This element indicates that the Key Activation Limit is
	//	the session.
	ActivationLimitSession *TActivationLimitSessionType `xml:"ActivationLimitSession"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemActivationLimitSession function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemActivationLimitSession instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemActivationLimitSession instance.
func (me *XsdGoPkgHasElemActivationLimitSession) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemActivationLimitSession; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ActivationLimitSession.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TActivationLimitType defines TActivationLimitType
type TActivationLimitType struct {
	XsdGoPkgHasElemActivationLimitUsages

	XsdGoPkgHasElemActivationLimitSession

	XsdGoPkgHasElemActivationLimitDuration
}

// Walk : if the WalkHandlers.TActivationLimitType function is not nil (ie. was set by outside code), calls it with this TActivationLimitType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TActivationLimitType instance.
func (me *TActivationLimitType) Walk() (err error) {
	if fn := WalkHandlers.TActivationLimitType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemActivationLimitDuration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemActivationLimitUsages.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemActivationLimitSession.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemActivationLimit defines XsdGoPkgHasElemActivationLimit
type XsdGoPkgHasElemActivationLimit struct {
	//	This element indicates the length of time for which an
	//	PIN-based authentication is valid.
	ActivationLimit *TActivationLimitType `xml:"ActivationLimit"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemActivationLimit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemActivationLimit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemActivationLimit instance.
func (me *XsdGoPkgHasElemActivationLimit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemActivationLimit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ActivationLimit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TActivationPinType defines TActivationPinType
type TActivationPinType struct {
	XsdGoPkgHasElemAlphabet

	XsdGoPkgHasElemGeneration

	XsdGoPkgHasElemActivationLimit

	XsdGoPkgHasElemsExtension

	XsdGoPkgHasElemLength
}

// Walk : if the WalkHandlers.TActivationPinType function is not nil (ie. was set by outside code), calls it with this TActivationPinType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TActivationPinType instance.
func (me *TActivationPinType) Walk() (err error) {
	if fn := WalkHandlers.TActivationPinType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemLength.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAlphabet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemGeneration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemActivationLimit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemActivationPin defines XsdGoPkgHasElemActivationPin
type XsdGoPkgHasElemActivationPin struct {
	//	This element indicates that a Pin (Personal
	//	Identification Number) has been used to authenticate the Principal to
	//	some local system in order to activate a key.
	ActivationPin *TActivationPinType `xml:"ActivationPin"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemActivationPin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemActivationPin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemActivationPin instance.
func (me *XsdGoPkgHasElemActivationPin) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemActivationPin; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ActivationPin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeyActivationType defines TKeyActivationType
type TKeyActivationType struct {
	XsdGoPkgHasElemActivationPin

	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TKeyActivationType function is not nil (ie. was set by outside code), calls it with this TKeyActivationType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TKeyActivationType instance.
func (me *TKeyActivationType) Walk() (err error) {
	if fn := WalkHandlers.TKeyActivationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemActivationPin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemKeyActivation defines XsdGoPkgHasElemKeyActivation
type XsdGoPkgHasElemKeyActivation struct {
	//	The actions that must be performed
	//	before the private key can be used.
	KeyActivation *TKeyActivationType `xml:"KeyActivation"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemKeyActivation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemKeyActivation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemKeyActivation instance.
func (me *XsdGoPkgHasElemKeyActivation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemKeyActivation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyActivation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TmediumType In which medium is the key stored.
// memory - the key is stored in memory.
// smartcard - the key is stored in a smartcard.
// token - the key is stored in a hardware token.
// MobileDevice - the key is stored in a mobile device.
// MobileAuthCard - the key is stored in a mobile
// authentication card.
type TmediumType xsdt.Nmtoken

// Set : Since TmediumType is just a simple String type, this merely sets the current value from the specified string.
func (me *TmediumType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

// String : Since TmediumType is just a simple String type, this merely returns the current string value.
func (me TmediumType) String() string { return xsdt.Nmtoken(me).String() }

// ToXsdtNmtoken : This convenience method just performs a simple type conversion to TmediumType's alias type xsdt.Nmtoken.
func (me TmediumType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

// IsMemory : Returns true if the value of this enumerated TmediumType is "memory".
func (me TmediumType) IsMemory() bool { return me.String() == "memory" }

// IsSmartcard : Returns true if the value of this enumerated TmediumType is "smartcard".
func (me TmediumType) IsSmartcard() bool { return me.String() == "smartcard" }

// IsToken : Returns true if the value of this enumerated TmediumType is "token".
func (me TmediumType) IsToken() bool { return me.String() == "token" }

// IsMobileDevice : Returns true if the value of this enumerated TmediumType is "MobileDevice".
func (me TmediumType) IsMobileDevice() bool { return me.String() == "MobileDevice" }

// IsMobileAuthCard : Returns true if the value of this enumerated TmediumType is "MobileAuthCard".
func (me TmediumType) IsMobileAuthCard() bool { return me.String() == "MobileAuthCard" }

// XsdGoPkgHasAttrMediumTmediumType defines attribute MediumTmediumType
type XsdGoPkgHasAttrMediumTmediumType struct {
	Medium TmediumType `xml:"medium,attr"`
}

// TKeyStorageType defines TKeyStorageType
type TKeyStorageType struct {
	XsdGoPkgHasAttrMediumTmediumType
}

// Walk : if the WalkHandlers.TKeyStorageType function is not nil (ie. was set by outside code), calls it with this TKeyStorageType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TKeyStorageType instance.
func (me *TKeyStorageType) Walk() (err error) {
	if fn := WalkHandlers.TKeyStorageType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemKeyStorage defines XsdGoPkgHasElemKeyStorage
type XsdGoPkgHasElemKeyStorage struct {
	//	In which medium is the key stored.
	//	memory - the key is stored in memory.
	//	smartcard - the key is stored in a smartcard.
	//	token - the key is stored in a hardware token.
	//	MobileDevice - the key is stored in a mobile device.
	//	MobileAuthCard - the key is stored in a mobile
	//	authentication card.
	KeyStorage *TKeyStorageType `xml:"KeyStorage"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemKeyStorage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemKeyStorage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemKeyStorage instance.
func (me *XsdGoPkgHasElemKeyStorage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemKeyStorage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyStorage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSecretKeyProtectionType defines TSecretKeyProtectionType
type TSecretKeyProtectionType struct {
	XsdGoPkgHasElemKeyActivation

	XsdGoPkgHasElemKeyStorage

	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TSecretKeyProtectionType function is not nil (ie. was set by outside code), calls it with this TSecretKeyProtectionType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TSecretKeyProtectionType instance.
func (me *TSecretKeyProtectionType) Walk() (err error) {
	if fn := WalkHandlers.TSecretKeyProtectionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemKeyActivation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemKeyStorage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSecretKeyProtection defines XsdGoPkgHasElemSecretKeyProtection
type XsdGoPkgHasElemSecretKeyProtection struct {
	//	This element indicates the types and strengths of
	//	facilities
	//	of a UA used to protect a shared secret key from
	//	unauthorized access and/or use.
	SecretKeyProtection *TSecretKeyProtectionType `xml:"SecretKeyProtection"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSecretKeyProtection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSecretKeyProtection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSecretKeyProtection instance.
func (me *XsdGoPkgHasElemSecretKeyProtection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSecretKeyProtection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SecretKeyProtection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrSharingXsdtBoolean This element indicates the types and strengths of
// facilities
// of a UA used to protect a private key from
// unauthorized access and/or use.
// Whether or not the private key is shared
// with the certificate authority.
type XsdGoPkgHasAttrSharingXsdtBoolean struct {
	Sharing xsdt.Boolean `xml:"sharing,attr"`
}

// TKeySharingType defines TKeySharingType
type TKeySharingType struct {
	XsdGoPkgHasAttrSharingXsdtBoolean
}

// Walk : if the WalkHandlers.TKeySharingType function is not nil (ie. was set by outside code), calls it with this TKeySharingType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TKeySharingType instance.
func (me *TKeySharingType) Walk() (err error) {
	if fn := WalkHandlers.TKeySharingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemKeySharing defines XsdGoPkgHasElemKeySharing
type XsdGoPkgHasElemKeySharing struct {
	//	Whether or not the private key is shared
	//	with the certificate authority.
	KeySharing *TKeySharingType `xml:"KeySharing"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemKeySharing function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemKeySharing instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemKeySharing instance.
func (me *XsdGoPkgHasElemKeySharing) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemKeySharing; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeySharing.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TPrivateKeyProtectionType defines TPrivateKeyProtectionType
type TPrivateKeyProtectionType struct {
	XsdGoPkgHasElemKeyActivation

	XsdGoPkgHasElemKeyStorage

	XsdGoPkgHasElemKeySharing

	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TPrivateKeyProtectionType function is not nil (ie. was set by outside code), calls it with this TPrivateKeyProtectionType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPrivateKeyProtectionType instance.
func (me *TPrivateKeyProtectionType) Walk() (err error) {
	if fn := WalkHandlers.TPrivateKeyProtectionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemKeyActivation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemKeyStorage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemKeySharing.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPrivateKeyProtection defines XsdGoPkgHasElemPrivateKeyProtection
type XsdGoPkgHasElemPrivateKeyProtection struct {
	//	This element indicates the types and strengths of
	//	facilities
	//	of a UA used to protect a private key from
	//	unauthorized access and/or use.
	PrivateKeyProtection *TPrivateKeyProtectionType `xml:"PrivateKeyProtection"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPrivateKeyProtection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPrivateKeyProtection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPrivateKeyProtection instance.
func (me *XsdGoPkgHasElemPrivateKeyProtection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPrivateKeyProtection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PrivateKeyProtection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TechnicalProtectionBaseType defines TechnicalProtectionBaseType
type TechnicalProtectionBaseType struct {
	XsdGoPkgHasElemPrivateKeyProtection

	XsdGoPkgHasElemSecretKeyProtection

	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TechnicalProtectionBaseType function is not nil (ie. was set by outside code), calls it with this TechnicalProtectionBaseType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TechnicalProtectionBaseType instance.
func (me *TechnicalProtectionBaseType) Walk() (err error) {
	if fn := WalkHandlers.TechnicalProtectionBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemPrivateKeyProtection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSecretKeyProtection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTechnicalProtection defines XsdGoPkgHasElemTechnicalProtection
type XsdGoPkgHasElemTechnicalProtection struct {
	//	Refers to those characterstics that describe how the
	//	'secret' (the knowledge or possession
	//	of which allows the Principal to authenticate to the
	//	Authentication Authority) is kept secure
	TechnicalProtection *TechnicalProtectionBaseType `xml:"TechnicalProtection"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTechnicalProtection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTechnicalProtection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemTechnicalProtection instance.
func (me *XsdGoPkgHasElemTechnicalProtection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTechnicalProtection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechnicalProtection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSwitchAudit Refers to those characteristics that describe
// procedural security controls employed by the Authentication Authority.
type XsdGoPkgHasElemSwitchAudit struct {
	SwitchAudit *TExtensionOnlyType `xml:"SwitchAudit"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSwitchAudit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSwitchAudit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSwitchAudit instance.
func (me *XsdGoPkgHasElemSwitchAudit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSwitchAudit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SwitchAudit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSecurityAuditType defines TSecurityAuditType
type TSecurityAuditType struct {
	XsdGoPkgHasElemSwitchAudit

	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TSecurityAuditType function is not nil (ie. was set by outside code), calls it with this TSecurityAuditType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TSecurityAuditType instance.
func (me *TSecurityAuditType) Walk() (err error) {
	if fn := WalkHandlers.TSecurityAuditType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemSwitchAudit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSecurityAudit defines XsdGoPkgHasElemSecurityAudit
type XsdGoPkgHasElemSecurityAudit struct {
	SecurityAudit *TSecurityAuditType `xml:"SecurityAudit"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSecurityAudit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSecurityAudit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSecurityAudit instance.
func (me *XsdGoPkgHasElemSecurityAudit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSecurityAudit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SecurityAudit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemDeactivationCallCenter defines XsdGoPkgHasElemDeactivationCallCenter
type XsdGoPkgHasElemDeactivationCallCenter struct {
	DeactivationCallCenter *TExtensionOnlyType `xml:"DeactivationCallCenter"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemDeactivationCallCenter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemDeactivationCallCenter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemDeactivationCallCenter instance.
func (me *XsdGoPkgHasElemDeactivationCallCenter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemDeactivationCallCenter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DeactivationCallCenter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TOperationalProtectionType defines TOperationalProtectionType
type TOperationalProtectionType struct {
	XsdGoPkgHasElemSecurityAudit

	XsdGoPkgHasElemDeactivationCallCenter

	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TOperationalProtectionType function is not nil (ie. was set by outside code), calls it with this TOperationalProtectionType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TOperationalProtectionType instance.
func (me *TOperationalProtectionType) Walk() (err error) {
	if fn := WalkHandlers.TOperationalProtectionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSecurityAudit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemDeactivationCallCenter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemOperationalProtection defines XsdGoPkgHasElemOperationalProtection
type XsdGoPkgHasElemOperationalProtection struct {
	//	Refers to those characteristics that describe
	//	procedural security controls employed by the Authentication Authority.
	OperationalProtection *TOperationalProtectionType `xml:"OperationalProtection"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemOperationalProtection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemOperationalProtection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemOperationalProtection instance.
func (me *XsdGoPkgHasElemOperationalProtection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemOperationalProtection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OperationalProtection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrExternalVerificationXsdtAnyURI Refers to those characteristics that define the mechanisms by which the Principal authenticates to the Authentication Authority. The method that a Principal employs to perform authentication to local system components. This element indicates that a password (or passphrase) has been used to authenticate the Principal to a remote system.
type XsdGoPkgHasAttrExternalVerificationXsdtAnyURI struct {
	ExternalVerification xsdt.AnyURI `xml:"ExternalVerification,attr"`
}

// TPasswordType defines TPasswordType
type TPasswordType struct {
	XsdGoPkgHasAttrExternalVerificationXsdtAnyURI

	XsdGoPkgHasElemLength

	XsdGoPkgHasElemAlphabet

	XsdGoPkgHasElemGeneration

	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TPasswordType function is not nil (ie. was set by outside code), calls it with this TPasswordType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TPasswordType instance.
func (me *TPasswordType) Walk() (err error) {
	if fn := WalkHandlers.TPasswordType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemAlphabet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemGeneration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemLength.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPassword defines XsdGoPkgHasElemPassword
type XsdGoPkgHasElemPassword struct {
	//	This element indicates that a password (or passphrase)
	//	has been used to
	//	authenticate the Principal to a remote system.
	Password *TPasswordType `xml:"Password"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPassword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPassword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPassword instance.
func (me *XsdGoPkgHasElemPassword) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPassword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Password.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdRestrictedLengthTypeComplexContentRestrictionMin defines TxsdRestrictedLengthTypeComplexContentRestrictionMin
type TxsdRestrictedLengthTypeComplexContentRestrictionMin xsdt.Integer

// Set : Since TxsdRestrictedLengthTypeComplexContentRestrictionMin is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TxsdRestrictedLengthTypeComplexContentRestrictionMin) Set(s string) {
	(*xsdt.Integer)(me).Set(s)
}

// String : Returns a string representation of this TxsdRestrictedLengthTypeComplexContentRestrictionMin's current non-string scalar value.
func (me TxsdRestrictedLengthTypeComplexContentRestrictionMin) String() string {
	return xsdt.Integer(me).String()
}

// ToXsdtInteger : This convenience method just performs a simple type conversion to TxsdRestrictedLengthTypeComplexContentRestrictionMin's alias type xsdt.Integer.
func (me TxsdRestrictedLengthTypeComplexContentRestrictionMin) ToXsdtInteger() xsdt.Integer {
	return xsdt.Integer(me)
}

// XsdGoPkgHasAttrMinTxsdRestrictedLengthTypeComplexContentRestrictionMin defines attribute MinTxsdRestrictedLengthTypeComplexContentRestrictionMin
type XsdGoPkgHasAttrMinTxsdRestrictedLengthTypeComplexContentRestrictionMin struct {
	Min TxsdRestrictedLengthTypeComplexContentRestrictionMin `xml:"min,attr"`
}

// TRestrictedLengthType defines TRestrictedLengthType
type TRestrictedLengthType struct {
	XsdGoPkgHasAttrMaxXsdtInteger

	TLengthType

	XsdGoPkgHasAttrMinTxsdRestrictedLengthTypeComplexContentRestrictionMin
}

// Walk : if the WalkHandlers.TRestrictedLengthType function is not nil (ie. was set by outside code), calls it with this TRestrictedLengthType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TRestrictedLengthType instance.
func (me *TRestrictedLengthType) Walk() (err error) {
	if fn := WalkHandlers.TRestrictedLengthType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TLengthType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType defines XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType
type XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType struct {
	Length *TRestrictedLengthType `xml:"Length"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType instance.
func (me *XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Length.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TRestrictedPasswordType defines TRestrictedPasswordType
type TRestrictedPasswordType struct {
	TPasswordType

	XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType

	XsdGoPkgHasElemGeneration

	XsdGoPkgHasElemsExtension

	XsdGoPkgHasAttrExternalVerificationXsdtAnyURI
}

// Walk : if the WalkHandlers.TRestrictedPasswordType function is not nil (ie. was set by outside code), calls it with this TRestrictedPasswordType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TRestrictedPasswordType instance.
func (me *TRestrictedPasswordType) Walk() (err error) {
	if fn := WalkHandlers.TRestrictedPasswordType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TPasswordType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemGeneration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRestrictedPassword defines XsdGoPkgHasElemRestrictedPassword
type XsdGoPkgHasElemRestrictedPassword struct {
	RestrictedPassword *TRestrictedPasswordType `xml:"RestrictedPassword"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRestrictedPassword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRestrictedPassword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemRestrictedPassword instance.
func (me *XsdGoPkgHasElemRestrictedPassword) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRestrictedPassword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RestrictedPassword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TDeviceTypeType This element indicates that a hardware or software token is used as a method of identifying the Principal. This element indicates that a time synchronization token is used to identify the Principal. hardware - the time synchonization token has been implemented in hardware. software - the time synchronization token has been implemented in software. SeedLength - the length, in bits, of the random seed used in the time synchronization token.
type TDeviceTypeType xsdt.Nmtoken

// ToXsdtNmtoken : This convenience method just performs a simple type conversion to TDeviceTypeType's alias type xsdt.Nmtoken.
func (me TDeviceTypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

// IsHardware : Returns true if the value of this enumerated TDeviceTypeType is "hardware".
func (me TDeviceTypeType) IsHardware() bool { return me.String() == "hardware" }

// IsSoftware : Returns true if the value of this enumerated TDeviceTypeType is "software".
func (me TDeviceTypeType) IsSoftware() bool { return me.String() == "software" }

// Set : Since TDeviceTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TDeviceTypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

// String : Since TDeviceTypeType is just a simple String type, this merely returns the current string value.
func (me TDeviceTypeType) String() string { return xsdt.Nmtoken(me).String() }

// XsdGoPkgHasAttrDeviceTypeTDeviceTypeType defines attribute DeviceTypeTDeviceTypeType
type XsdGoPkgHasAttrDeviceTypeTDeviceTypeType struct {
	DeviceType TDeviceTypeType `xml:"DeviceType,attr"`
}

// XsdGoPkgHasAttrSeedLengthXsdtInteger defines attribute SeedLengthXsdtInteger
type XsdGoPkgHasAttrSeedLengthXsdtInteger struct {
	SeedLength xsdt.Integer `xml:"SeedLength,attr"`
}

// TbooleanType defines TbooleanType
type TbooleanType xsdt.Nmtoken

// Set : Since TbooleanType is just a simple String type, this merely sets the current value from the specified string.
func (me *TbooleanType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

// String : Since TbooleanType is just a simple String type, this merely returns the current string value.
func (me TbooleanType) String() string { return xsdt.Nmtoken(me).String() }

// ToXsdtNmtoken : This convenience method just performs a simple type conversion to TbooleanType's alias type xsdt.Nmtoken.
func (me TbooleanType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

// IsTrue : Returns true if the value of this enumerated TbooleanType is "true".
func (me TbooleanType) IsTrue() bool { return me.String() == "true" }

// IsFalse : Returns true if the value of this enumerated TbooleanType is "false".
func (me TbooleanType) IsFalse() bool { return me.String() == "false" }

// XsdGoPkgHasAttrDeviceInHandTbooleanType defines attribute DeviceInHandTbooleanType
type XsdGoPkgHasAttrDeviceInHandTbooleanType struct {
	DeviceInHand TbooleanType `xml:"DeviceInHand,attr"`
}

// TimeSyncTokenType defines TimeSyncTokenType
type TimeSyncTokenType struct {
	XsdGoPkgHasAttrDeviceInHandTbooleanType

	XsdGoPkgHasAttrDeviceTypeTDeviceTypeType

	XsdGoPkgHasAttrSeedLengthXsdtInteger
}

// Walk : if the WalkHandlers.TimeSyncTokenType function is not nil (ie. was set by outside code), calls it with this TimeSyncTokenType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TimeSyncTokenType instance.
func (me *TimeSyncTokenType) Walk() (err error) {
	if fn := WalkHandlers.TimeSyncTokenType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTimeSyncToken defines XsdGoPkgHasElemTimeSyncToken
type XsdGoPkgHasElemTimeSyncToken struct {
	//	This element indicates that a time synchronization
	//	token is used to identify the Principal. hardware -
	//	the time synchonization
	//	token has been implemented in hardware. software - the
	//	time synchronization
	//	token has been implemented in software. SeedLength -
	//	the length, in bits, of the
	//	random seed used in the time synchronization token.
	TimeSyncToken *TimeSyncTokenType `xml:"TimeSyncToken"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTimeSyncToken function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTimeSyncToken instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemTimeSyncToken instance.
func (me *XsdGoPkgHasElemTimeSyncToken) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTimeSyncToken; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimeSyncToken.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TokenType defines TokenType
type TokenType struct {
	XsdGoPkgHasElemTimeSyncToken

	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TokenType function is not nil (ie. was set by outside code), calls it with this TokenType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TokenType instance.
func (me *TokenType) Walk() (err error) {
	if fn := WalkHandlers.TokenType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemTimeSyncToken.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemToken defines XsdGoPkgHasElemToken
type XsdGoPkgHasElemToken struct {
	//	This element indicates that a hardware or software
	//	token is used
	//	as a method of identifying the Principal.
	Token *TokenType `xml:"Token"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemToken function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemToken instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemToken instance.
func (me *XsdGoPkgHasElemToken) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemToken; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Token.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSmartcard This element indicates that a smartcard is used to
// identity the Principal.
type XsdGoPkgHasElemSmartcard struct {
	//	This element indicates that a smartcard is used to
	//	identity the Principal.
	Smartcard *TExtensionOnlyType `xml:"Smartcard"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSmartcard function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSmartcard instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSmartcard instance.
func (me *XsdGoPkgHasElemSmartcard) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSmartcard; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Smartcard.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrPreauthXsdtInteger defines attribute PreauthXsdtInteger
type XsdGoPkgHasAttrPreauthXsdtInteger struct {
	Preauth xsdt.Integer `xml:"preauth,attr"`
}

// TPrincipalAuthenticationMechanismType defines TPrincipalAuthenticationMechanismType
type TPrincipalAuthenticationMechanismType struct {
	XsdGoPkgHasElemSmartcard

	XsdGoPkgHasElemActivationPin

	XsdGoPkgHasElemsExtension

	XsdGoPkgHasAttrPreauthXsdtInteger

	XsdGoPkgHasElemPassword

	XsdGoPkgHasElemRestrictedPassword

	XsdGoPkgHasElemToken
}

// Walk : if the WalkHandlers.TPrincipalAuthenticationMechanismType function is not nil (ie. was set by outside code), calls it with this TPrincipalAuthenticationMechanismType instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TPrincipalAuthenticationMechanismType instance.
func (me *TPrincipalAuthenticationMechanismType) Walk() (err error) {
	if fn := WalkHandlers.TPrincipalAuthenticationMechanismType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemPassword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemRestrictedPassword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemToken.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSmartcard.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemActivationPin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPrincipalAuthenticationMechanism defines XsdGoPkgHasElemPrincipalAuthenticationMechanism
type XsdGoPkgHasElemPrincipalAuthenticationMechanism struct {
	//	The method that a Principal employs to perform
	//	authentication to local system components.
	PrincipalAuthenticationMechanism *TPrincipalAuthenticationMechanismType `xml:"PrincipalAuthenticationMechanism"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPrincipalAuthenticationMechanism function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPrincipalAuthenticationMechanism instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPrincipalAuthenticationMechanism instance.
func (me *XsdGoPkgHasElemPrincipalAuthenticationMechanism) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPrincipalAuthenticationMechanism; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PrincipalAuthenticationMechanism.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrKeyValidationXsdtString The method applied to validate a principal's
// authentication across a network
// The local system has a private key but it is used
// in decryption mode, rather than signature mode. For example, the
// Authentication Authority generates a secret and encrypts it using the
// local system's public key: the local system then proves it has
// decrypted the secret.
type XsdGoPkgHasAttrKeyValidationXsdtString struct {
	KeyValidation xsdt.String `xml:"keyValidation,attr"`
}

// TPublicKeyType defines TPublicKeyType
type TPublicKeyType struct {
	XsdGoPkgHasElemsExtension

	XsdGoPkgHasAttrKeyValidationXsdtString
}

// Walk : if the WalkHandlers.TPublicKeyType function is not nil (ie. was set by outside code), calls it with this TPublicKeyType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TPublicKeyType instance.
func (me *TPublicKeyType) Walk() (err error) {
	if fn := WalkHandlers.TPublicKeyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAsymmetricDecryption defines XsdGoPkgHasElemAsymmetricDecryption
type XsdGoPkgHasElemAsymmetricDecryption struct {
	//	The local system has a private key but it is used
	//	in decryption mode, rather than signature mode. For example, the
	//	Authentication Authority generates a secret and encrypts it using the
	//	local system's public key: the local system then proves it has
	//	decrypted the secret.
	AsymmetricDecryption *TPublicKeyType `xml:"AsymmetricDecryption"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAsymmetricDecryption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAsymmetricDecryption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAsymmetricDecryption instance.
func (me *XsdGoPkgHasElemAsymmetricDecryption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAsymmetricDecryption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AsymmetricDecryption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSubscriberLineNumber defines XsdGoPkgHasElemSubscriberLineNumber
type XsdGoPkgHasElemSubscriberLineNumber struct {
	SubscriberLineNumber *TExtensionOnlyType `xml:"SubscriberLineNumber"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSubscriberLineNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSubscriberLineNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSubscriberLineNumber instance.
func (me *XsdGoPkgHasElemSubscriberLineNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSubscriberLineNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubscriberLineNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemResumeSession Supports Authenticators with nested combinations of
// additional complexity.
// Rather like PreviousSession but using stronger
// security. A secret that was established in a previous session with
// the Authentication Authority has been cached by the local system and
// is now re-used (e.g. a Master Secret is used to derive new session
// keys in TLS, SSL, WTLS).
type XsdGoPkgHasElemResumeSession struct {
	//	Rather like PreviousSession but using stronger
	//	security. A secret that was established in a previous session with
	//	the Authentication Authority has been cached by the local system and
	//	is now re-used (e.g. a Master Secret is used to derive new session
	//	keys in TLS, SSL, WTLS).
	ResumeSession *TExtensionOnlyType `xml:"ResumeSession"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemResumeSession function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemResumeSession instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemResumeSession instance.
func (me *XsdGoPkgHasElemResumeSession) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemResumeSession; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ResumeSession.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrMethodXsdtAnyURI This element indicates that the Principal has been
// authenticated by a challenge-response protocol utilizing shared secret
// keys and symmetric cryptography.
type XsdGoPkgHasAttrMethodXsdtAnyURI struct {
	Method xsdt.AnyURI `xml:"method,attr"`
}

// TSharedSecretChallengeResponseType defines TSharedSecretChallengeResponseType
type TSharedSecretChallengeResponseType struct {
	XsdGoPkgHasElemsExtension

	XsdGoPkgHasAttrMethodXsdtAnyURI
}

// Walk : if the WalkHandlers.TSharedSecretChallengeResponseType function is not nil (ie. was set by outside code), calls it with this TSharedSecretChallengeResponseType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSharedSecretChallengeResponseType instance.
func (me *TSharedSecretChallengeResponseType) Walk() (err error) {
	if fn := WalkHandlers.TSharedSecretChallengeResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSharedSecretChallengeResponse defines XsdGoPkgHasElemSharedSecretChallengeResponse
type XsdGoPkgHasElemSharedSecretChallengeResponse struct {
	SharedSecretChallengeResponse *TSharedSecretChallengeResponseType `xml:"SharedSecretChallengeResponse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSharedSecretChallengeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSharedSecretChallengeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSharedSecretChallengeResponse instance.
func (me *XsdGoPkgHasElemSharedSecretChallengeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSharedSecretChallengeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SharedSecretChallengeResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemIPAddress This element indicates that the Principal has been
// authenticated through connection from a particular IP address.
type XsdGoPkgHasElemIPAddress struct {
	//	This element indicates that the Principal has been
	//	authenticated through connection from a particular IP address.
	IPAddress *TExtensionOnlyType `xml:"IPAddress"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemIPAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemIPAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemIPAddress instance.
func (me *XsdGoPkgHasElemIPAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemIPAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IPAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAsymmetricKeyAgreement The local system has a private key and uses it for
// shared secret key agreement with the Authentication Authority (e.g.
// via Diffie Helman).
type XsdGoPkgHasElemAsymmetricKeyAgreement struct {
	//	The local system has a private key and uses it for
	//	shared secret key agreement with the Authentication Authority (e.g.
	//	via Diffie Helman).
	AsymmetricKeyAgreement *TPublicKeyType `xml:"AsymmetricKeyAgreement"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAsymmetricKeyAgreement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAsymmetricKeyAgreement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAsymmetricKeyAgreement instance.
func (me *XsdGoPkgHasElemAsymmetricKeyAgreement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAsymmetricKeyAgreement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AsymmetricKeyAgreement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPreviousSession Indicates that the Principal has been strongly
// authenticated in a previous session during which the IdP has set a
// cookie in the UA. During the present session the Principal has only
// been authenticated by the UA returning the cookie to the IdP.
type XsdGoPkgHasElemPreviousSession struct {
	//	Indicates that the Principal has been strongly
	//	authenticated in a previous session during which the IdP has set a
	//	cookie in the UA. During the present session the Principal has only
	//	been authenticated by the UA returning the cookie to the IdP.
	PreviousSession *TExtensionOnlyType `xml:"PreviousSession"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPreviousSession function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPreviousSession instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPreviousSession instance.
func (me *XsdGoPkgHasElemPreviousSession) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPreviousSession; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PreviousSession.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSharedSecretDynamicPlaintext The local system and Authentication Authority
// share a secret key. The local system uses this to encrypt a
// randomised string to pass to the Authentication Authority.
type XsdGoPkgHasElemSharedSecretDynamicPlaintext struct {
	//	The local system and Authentication Authority
	//	share a secret key. The local system uses this to encrypt a
	//	randomised string to pass to the Authentication Authority.
	SharedSecretDynamicPlaintext *TExtensionOnlyType `xml:"SharedSecretDynamicPlaintext"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSharedSecretDynamicPlaintext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSharedSecretDynamicPlaintext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSharedSecretDynamicPlaintext instance.
func (me *XsdGoPkgHasElemSharedSecretDynamicPlaintext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSharedSecretDynamicPlaintext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SharedSecretDynamicPlaintext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemUserSuffix defines XsdGoPkgHasElemUserSuffix
type XsdGoPkgHasElemUserSuffix struct {
	UserSuffix *TExtensionOnlyType `xml:"UserSuffix"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemUserSuffix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemUserSuffix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemUserSuffix instance.
func (me *XsdGoPkgHasElemUserSuffix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemUserSuffix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UserSuffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemDigSig This element indicates that the Principal has been
// authenticated by a mechanism which involves the Principal computing a
// digital signature over at least challenge data provided by the IdP.
type XsdGoPkgHasElemDigSig struct {
	//	This element indicates that the Principal has been
	//	authenticated by a mechanism which involves the Principal computing a
	//	digital signature over at least challenge data provided by the IdP.
	DigSig *TPublicKeyType `xml:"DigSig"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemDigSig function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemDigSig instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemDigSig instance.
func (me *XsdGoPkgHasElemDigSig) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemDigSig; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DigSig.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemZeroKnowledge This element indicates that the Principal has been
// authenticated by a zero knowledge technique as specified in ISO/IEC
// 9798-5.
type XsdGoPkgHasElemZeroKnowledge struct {
	//	This element indicates that the Principal has been
	//	authenticated by a zero knowledge technique as specified in ISO/IEC
	//	9798-5.
	ZeroKnowledge *TExtensionOnlyType `xml:"ZeroKnowledge"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemZeroKnowledge function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemZeroKnowledge instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemZeroKnowledge instance.
func (me *XsdGoPkgHasElemZeroKnowledge) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemZeroKnowledge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ZeroKnowledge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasGroupAuthenticatorSequenceGroup defines XsdGoPkgHasGroupAuthenticatorSequenceGroup
type XsdGoPkgHasGroupAuthenticatorSequenceGroup struct {
	XsdGoPkgHasElemPreviousSession

	XsdGoPkgHasElemRestrictedPassword

	XsdGoPkgHasElemSharedSecretDynamicPlaintext

	XsdGoPkgHasElemUserSuffix

	XsdGoPkgHasElemDigSig

	XsdGoPkgHasElemZeroKnowledge

	XsdGoPkgHasElemsExtension

	XsdGoPkgHasElemSubscriberLineNumber

	XsdGoPkgHasElemResumeSession

	XsdGoPkgHasElemPassword

	XsdGoPkgHasElemSharedSecretChallengeResponse

	XsdGoPkgHasElemIPAddress

	XsdGoPkgHasElemAsymmetricDecryption

	XsdGoPkgHasElemAsymmetricKeyAgreement
}

// Walk : if the WalkHandlers.XsdGoPkgHasGroupAuthenticatorSequenceGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroupAuthenticatorSequenceGroup instance as the single argument. Then calls the Walk() method on 14/14 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroupAuthenticatorSequenceGroup instance.
func (me *XsdGoPkgHasGroupAuthenticatorSequenceGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroupAuthenticatorSequenceGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemAsymmetricDecryption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAsymmetricKeyAgreement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemPreviousSession.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemRestrictedPassword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSharedSecretDynamicPlaintext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemUserSuffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemDigSig.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemZeroKnowledge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemResumeSession.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemPassword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSharedSecretChallengeResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemIPAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSubscriberLineNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TComplexAuthenticatorType defines TComplexAuthenticatorType
type TComplexAuthenticatorType struct {
	XsdGoPkgHasGroupAuthenticatorChoiceGroup

	XsdGoPkgHasGroupAuthenticatorSequenceGroup
}

// Walk : if the WalkHandlers.TComplexAuthenticatorType function is not nil (ie. was set by outside code), calls it with this TComplexAuthenticatorType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TComplexAuthenticatorType instance.
func (me *TComplexAuthenticatorType) Walk() (err error) {
	if fn := WalkHandlers.TComplexAuthenticatorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroupAuthenticatorSequenceGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemComplexAuthenticator defines XsdGoPkgHasElemComplexAuthenticator
type XsdGoPkgHasElemComplexAuthenticator struct {
	//	Supports Authenticators with nested combinations of
	//	additional complexity.
	ComplexAuthenticator *TComplexAuthenticatorType `xml:"ComplexAuthenticator"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemComplexAuthenticator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemComplexAuthenticator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemComplexAuthenticator instance.
func (me *XsdGoPkgHasElemComplexAuthenticator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemComplexAuthenticator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ComplexAuthenticator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasGroupAuthenticatorChoiceGroup defines XsdGoPkgHasGroupAuthenticatorChoiceGroup
type XsdGoPkgHasGroupAuthenticatorChoiceGroup struct {
	XsdGoPkgHasElemZeroKnowledge

	XsdGoPkgHasElemSharedSecretChallengeResponse

	XsdGoPkgHasElemIPAddress

	XsdGoPkgHasElemAsymmetricKeyAgreement

	XsdGoPkgHasElemUserSuffix

	XsdGoPkgHasElemDigSig

	XsdGoPkgHasElemResumeSession

	XsdGoPkgHasElemAsymmetricDecryption

	XsdGoPkgHasElemSubscriberLineNumber

	XsdGoPkgHasElemComplexAuthenticator

	XsdGoPkgHasElemPreviousSession

	XsdGoPkgHasElemRestrictedPassword

	XsdGoPkgHasElemSharedSecretDynamicPlaintext

	XsdGoPkgHasElemPassword
}

// Walk : if the WalkHandlers.XsdGoPkgHasGroupAuthenticatorChoiceGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroupAuthenticatorChoiceGroup instance as the single argument. Then calls the Walk() method on 14/14 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroupAuthenticatorChoiceGroup instance.
func (me *XsdGoPkgHasGroupAuthenticatorChoiceGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroupAuthenticatorChoiceGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemComplexAuthenticator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemPreviousSession.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemResumeSession.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAsymmetricDecryption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSubscriberLineNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemPassword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemRestrictedPassword.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSharedSecretDynamicPlaintext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAsymmetricKeyAgreement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemUserSuffix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemDigSig.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemZeroKnowledge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSharedSecretChallengeResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemIPAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAuthenticatorBaseType defines TAuthenticatorBaseType
type TAuthenticatorBaseType struct {
	XsdGoPkgHasGroupAuthenticatorSequenceGroup

	XsdGoPkgHasGroupAuthenticatorChoiceGroup
}

// Walk : if the WalkHandlers.TAuthenticatorBaseType function is not nil (ie. was set by outside code), calls it with this TAuthenticatorBaseType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TAuthenticatorBaseType instance.
func (me *TAuthenticatorBaseType) Walk() (err error) {
	if fn := WalkHandlers.TAuthenticatorBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroupAuthenticatorChoiceGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupAuthenticatorSequenceGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthenticator defines XsdGoPkgHasElemAuthenticator
type XsdGoPkgHasElemAuthenticator struct {
	//	The method applied to validate a principal's
	//	authentication across a network
	Authenticator *TAuthenticatorBaseType `xml:"Authenticator"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthenticator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthenticator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthenticator instance.
func (me *XsdGoPkgHasElemAuthenticator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthenticator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Authenticator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSsl The protocol across which Authenticator information is
// transferred to an Authentication Authority verifier.
// This element indicates that the Authenticator has been
// transmitted using a transport mechnanism protected by an SSL or TLS
// session.
type XsdGoPkgHasElemSsl struct {
	//	This element indicates that the Authenticator has been
	//	transmitted using a transport mechnanism protected by an SSL or TLS
	//	session.
	Ssl *TExtensionOnlyType `xml:"SSL"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSsl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSsl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSsl instance.
func (me *XsdGoPkgHasElemSsl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSsl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ssl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemMobileNetworkRadioEncryption defines XsdGoPkgHasElemMobileNetworkRadioEncryption
type XsdGoPkgHasElemMobileNetworkRadioEncryption struct {
	MobileNetworkRadioEncryption *TExtensionOnlyType `xml:"MobileNetworkRadioEncryption"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemMobileNetworkRadioEncryption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemMobileNetworkRadioEncryption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemMobileNetworkRadioEncryption instance.
func (me *XsdGoPkgHasElemMobileNetworkRadioEncryption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemMobileNetworkRadioEncryption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MobileNetworkRadioEncryption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemMobileNetworkEndToEndEncryption defines XsdGoPkgHasElemMobileNetworkEndToEndEncryption
type XsdGoPkgHasElemMobileNetworkEndToEndEncryption struct {
	MobileNetworkEndToEndEncryption *TExtensionOnlyType `xml:"MobileNetworkEndToEndEncryption"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemMobileNetworkEndToEndEncryption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemMobileNetworkEndToEndEncryption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemMobileNetworkEndToEndEncryption instance.
func (me *XsdGoPkgHasElemMobileNetworkEndToEndEncryption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemMobileNetworkEndToEndEncryption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MobileNetworkEndToEndEncryption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemIPSec This element indicates that the Authenticator has been
// transmitted using a transport mechanism protected by an IPSEC session.
type XsdGoPkgHasElemIPSec struct {
	//	This element indicates that the Authenticator has been
	//	transmitted using a transport mechanism protected by an IPSEC session.
	IPSec *TExtensionOnlyType `xml:"IPSec"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemIPSec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemIPSec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemIPSec instance.
func (me *XsdGoPkgHasElemIPSec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemIPSec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IPSec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPstn defines XsdGoPkgHasElemPstn
type XsdGoPkgHasElemPstn struct {
	Pstn *TExtensionOnlyType `xml:"PSTN"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPstn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPstn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPstn instance.
func (me *XsdGoPkgHasElemPstn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPstn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pstn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemHTTP This element indicates that the Authenticator has been
// transmitted using bare HTTP utilizing no additional security
// protocols.
type XsdGoPkgHasElemHTTP struct {
	//	This element indicates that the Authenticator has been
	//	transmitted using bare HTTP utilizing no additional security
	//	protocols.
	HTTP *TExtensionOnlyType `xml:"HTTP"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemHTTP function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemHTTP instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemHTTP instance.
func (me *XsdGoPkgHasElemHTTP) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemHTTP; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HTTP.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemMobileNetworkNoEncryption This element indicates that the Authenticator has been
// transmitted solely across a mobile network using no additional
// security mechanism.
type XsdGoPkgHasElemMobileNetworkNoEncryption struct {
	//	This element indicates that the Authenticator has been
	//	transmitted solely across a mobile network using no additional
	//	security mechanism.
	MobileNetworkNoEncryption *TExtensionOnlyType `xml:"MobileNetworkNoEncryption"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemMobileNetworkNoEncryption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemMobileNetworkNoEncryption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemMobileNetworkNoEncryption instance.
func (me *XsdGoPkgHasElemMobileNetworkNoEncryption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemMobileNetworkNoEncryption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MobileNetworkNoEncryption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemWtls This element indicates that the Authenticator has been
// transmitted using a transport mechanism protected by a WTLS session.
type XsdGoPkgHasElemWtls struct {
	//	This element indicates that the Authenticator has been
	//	transmitted using a transport mechanism protected by a WTLS session.
	Wtls *TExtensionOnlyType `xml:"WTLS"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemWtls function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemWtls instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemWtls instance.
func (me *XsdGoPkgHasElemWtls) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemWtls; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Wtls.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemIsdn defines XsdGoPkgHasElemIsdn
type XsdGoPkgHasElemIsdn struct {
	Isdn *TExtensionOnlyType `xml:"ISDN"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemIsdn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemIsdn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemIsdn instance.
func (me *XsdGoPkgHasElemIsdn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemIsdn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Isdn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAdsl defines XsdGoPkgHasElemAdsl
type XsdGoPkgHasElemAdsl struct {
	Adsl *TExtensionOnlyType `xml:"ADSL"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAdsl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAdsl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAdsl instance.
func (me *XsdGoPkgHasElemAdsl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAdsl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Adsl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAuthenticatorTransportProtocolType defines TAuthenticatorTransportProtocolType
type TAuthenticatorTransportProtocolType struct {
	XsdGoPkgHasElemSsl

	XsdGoPkgHasElemMobileNetworkRadioEncryption

	XsdGoPkgHasElemMobileNetworkEndToEndEncryption

	XsdGoPkgHasElemIPSec

	XsdGoPkgHasElemPstn

	XsdGoPkgHasElemHTTP

	XsdGoPkgHasElemMobileNetworkNoEncryption

	XsdGoPkgHasElemWtls

	XsdGoPkgHasElemIsdn

	XsdGoPkgHasElemAdsl

	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TAuthenticatorTransportProtocolType function is not nil (ie. was set by outside code), calls it with this TAuthenticatorTransportProtocolType instance as the single argument. Then calls the Walk() method on 11/11 embed(s) and 0/0 field(s) belonging to this TAuthenticatorTransportProtocolType instance.
func (me *TAuthenticatorTransportProtocolType) Walk() (err error) {
	if fn := WalkHandlers.TAuthenticatorTransportProtocolType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemMobileNetworkEndToEndEncryption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemIPSec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemPstn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSsl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemMobileNetworkRadioEncryption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemWtls.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemIsdn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAdsl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemHTTP.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemMobileNetworkNoEncryption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthenticatorTransportProtocol defines XsdGoPkgHasElemAuthenticatorTransportProtocol
type XsdGoPkgHasElemAuthenticatorTransportProtocol struct {
	//	The protocol across which Authenticator information is
	//	transferred to an Authentication Authority verifier.
	AuthenticatorTransportProtocol *TAuthenticatorTransportProtocolType `xml:"AuthenticatorTransportProtocol"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthenticatorTransportProtocol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthenticatorTransportProtocol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthenticatorTransportProtocol instance.
func (me *XsdGoPkgHasElemAuthenticatorTransportProtocol) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthenticatorTransportProtocol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthenticatorTransportProtocol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAuthnMethodBaseType defines TAuthnMethodBaseType
type TAuthnMethodBaseType struct {
	XsdGoPkgHasElemPrincipalAuthenticationMechanism

	XsdGoPkgHasElemAuthenticator

	XsdGoPkgHasElemAuthenticatorTransportProtocol

	XsdGoPkgHasElemsExtension
}

// Walk : if the WalkHandlers.TAuthnMethodBaseType function is not nil (ie. was set by outside code), calls it with this TAuthnMethodBaseType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TAuthnMethodBaseType instance.
func (me *TAuthnMethodBaseType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnMethodBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemPrincipalAuthenticationMechanism.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAuthenticator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAuthenticatorTransportProtocol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthnMethod defines XsdGoPkgHasElemAuthnMethod
type XsdGoPkgHasElemAuthnMethod struct {
	//	Refers to those characteristics that define the
	//	mechanisms by which the Principal authenticates to the Authentication
	//	Authority.
	AuthnMethod *TAuthnMethodBaseType `xml:"AuthnMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthnMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthnMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthnMethod instance.
func (me *XsdGoPkgHasElemAuthnMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthnMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAuthnContextDeclarationBaseType defines TAuthnContextDeclarationBaseType
type TAuthnContextDeclarationBaseType struct {
	XsdGoPkgHasElemIdentification

	XsdGoPkgHasElemTechnicalProtection

	XsdGoPkgHasElemOperationalProtection

	XsdGoPkgHasElemAuthnMethod

	XsdGoPkgHasElemGoverningAgreements

	XsdGoPkgHasElemsExtension

	XsdGoPkgHasAttrIDXsdtID
}

// Walk : if the WalkHandlers.TAuthnContextDeclarationBaseType function is not nil (ie. was set by outside code), calls it with this TAuthnContextDeclarationBaseType instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TAuthnContextDeclarationBaseType instance.
func (me *TAuthnContextDeclarationBaseType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnContextDeclarationBaseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsExtension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemIdentification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemTechnicalProtection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemOperationalProtection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemAuthnMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemGoverningAgreements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthenticationContextDeclaration defines XsdGoPkgHasElemAuthenticationContextDeclaration
type XsdGoPkgHasElemAuthenticationContextDeclaration struct {
	//	A particular assertion on an identity
	//	provider's part with respect to the authentication
	//	context associated with an authentication assertion.
	AuthenticationContextDeclaration *TAuthnContextDeclarationBaseType `xml:"AuthenticationContextDeclaration"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthenticationContextDeclaration function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthenticationContextDeclaration instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthenticationContextDeclaration instance.
func (me *XsdGoPkgHasElemAuthenticationContextDeclaration) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthenticationContextDeclaration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthenticationContextDeclaration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthenticationContextDeclaration A particular assertion on an identity
// provider's part with respect to the authentication
// context associated with an authentication assertion.
type XsdGoPkgHasElemsAuthenticationContextDeclaration struct {
	//	A particular assertion on an identity
	//	provider's part with respect to the authentication
	//	context associated with an authentication assertion.
	AuthenticationContextDeclarations []*TAuthnContextDeclarationBaseType `xml:"AuthenticationContextDeclaration"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthenticationContextDeclaration function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthenticationContextDeclaration instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthenticationContextDeclaration instance.
func (me *XsdGoPkgHasElemsAuthenticationContextDeclaration) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthenticationContextDeclaration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthenticationContextDeclarations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsIdentification Refers to those characteristics that describe the
// processes and mechanisms
// the Authentication Authority uses to initially create
// an association between a Principal
// and the identity (or name) by which the Principal will
// be known
type XsdGoPkgHasElemsIdentification struct {
	//	Refers to those characteristics that describe the
	//	processes and mechanisms
	//	the Authentication Authority uses to initially create
	//	an association between a Principal
	//	and the identity (or name) by which the Principal will
	//	be known
	Identifications []*TIdentificationType `xml:"Identification"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsIdentification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsIdentification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsIdentification instance.
func (me *XsdGoPkgHasElemsIdentification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsIdentification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Identifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPhysicalVerification This element indicates that identification has been
// performed in a physical
// face-to-face meeting with the principal and not in an
// online manner.
type XsdGoPkgHasElemsPhysicalVerification struct {
	//	This element indicates that identification has been
	//	performed in a physical
	//	face-to-face meeting with the principal and not in an
	//	online manner.
	PhysicalVerifications []*TxsdPhysicalVerification `xml:"PhysicalVerification"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPhysicalVerification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPhysicalVerification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPhysicalVerification instance.
func (me *XsdGoPkgHasElemsPhysicalVerification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPhysicalVerification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicalVerifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsWrittenConsent defines XsdGoPkgHasElemsWrittenConsent
type XsdGoPkgHasElemsWrittenConsent struct {
	WrittenConsents []*TExtensionOnlyType `xml:"WrittenConsent"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsWrittenConsent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsWrittenConsent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsWrittenConsent instance.
func (me *XsdGoPkgHasElemsWrittenConsent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsWrittenConsent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.WrittenConsents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTechnicalProtection Refers to those characterstics that describe how the
// 'secret' (the knowledge or possession
// of which allows the Principal to authenticate to the
// Authentication Authority) is kept secure
type XsdGoPkgHasElemsTechnicalProtection struct {
	//	Refers to those characterstics that describe how the
	//	'secret' (the knowledge or possession
	//	of which allows the Principal to authenticate to the
	//	Authentication Authority) is kept secure
	TechnicalProtections []*TechnicalProtectionBaseType `xml:"TechnicalProtection"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTechnicalProtection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTechnicalProtection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTechnicalProtection instance.
func (me *XsdGoPkgHasElemsTechnicalProtection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTechnicalProtection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TechnicalProtections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSecretKeyProtection This element indicates the types and strengths of
// facilities
// of a UA used to protect a shared secret key from
// unauthorized access and/or use.
type XsdGoPkgHasElemsSecretKeyProtection struct {
	//	This element indicates the types and strengths of
	//	facilities
	//	of a UA used to protect a shared secret key from
	//	unauthorized access and/or use.
	SecretKeyProtections []*TSecretKeyProtectionType `xml:"SecretKeyProtection"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSecretKeyProtection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSecretKeyProtection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSecretKeyProtection instance.
func (me *XsdGoPkgHasElemsSecretKeyProtection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSecretKeyProtection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SecretKeyProtections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPrivateKeyProtection This element indicates the types and strengths of
// facilities
// of a UA used to protect a private key from
// unauthorized access and/or use.
type XsdGoPkgHasElemsPrivateKeyProtection struct {
	//	This element indicates the types and strengths of
	//	facilities
	//	of a UA used to protect a private key from
	//	unauthorized access and/or use.
	PrivateKeyProtections []*TPrivateKeyProtectionType `xml:"PrivateKeyProtection"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPrivateKeyProtection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPrivateKeyProtection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPrivateKeyProtection instance.
func (me *XsdGoPkgHasElemsPrivateKeyProtection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPrivateKeyProtection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PrivateKeyProtections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsKeyActivation The actions that must be performed
// before the private key can be used.
type XsdGoPkgHasElemsKeyActivation struct {
	//	The actions that must be performed
	//	before the private key can be used.
	KeyActivations []*TKeyActivationType `xml:"KeyActivation"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsKeyActivation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsKeyActivation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsKeyActivation instance.
func (me *XsdGoPkgHasElemsKeyActivation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsKeyActivation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyActivations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsKeySharing Whether or not the private key is shared
// with the certificate authority.
type XsdGoPkgHasElemsKeySharing struct {
	//	Whether or not the private key is shared
	//	with the certificate authority.
	KeySharings []*TKeySharingType `xml:"KeySharing"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsKeySharing function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsKeySharing instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsKeySharing instance.
func (me *XsdGoPkgHasElemsKeySharing) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsKeySharing; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeySharings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsKeyStorage In which medium is the key stored.
// memory - the key is stored in memory.
// smartcard - the key is stored in a smartcard.
// token - the key is stored in a hardware token.
// MobileDevice - the key is stored in a mobile device.
// MobileAuthCard - the key is stored in a mobile
// authentication card.
type XsdGoPkgHasElemsKeyStorage struct {
	//	In which medium is the key stored.
	//	memory - the key is stored in memory.
	//	smartcard - the key is stored in a smartcard.
	//	token - the key is stored in a hardware token.
	//	MobileDevice - the key is stored in a mobile device.
	//	MobileAuthCard - the key is stored in a mobile
	//	authentication card.
	KeyStorages []*TKeyStorageType `xml:"KeyStorage"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsKeyStorage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsKeyStorage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsKeyStorage instance.
func (me *XsdGoPkgHasElemsKeyStorage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsKeyStorage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyStorages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSubscriberLineNumber defines XsdGoPkgHasElemsSubscriberLineNumber
type XsdGoPkgHasElemsSubscriberLineNumber struct {
	SubscriberLineNumbers []*TExtensionOnlyType `xml:"SubscriberLineNumber"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSubscriberLineNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSubscriberLineNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSubscriberLineNumber instance.
func (me *XsdGoPkgHasElemsSubscriberLineNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSubscriberLineNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubscriberLineNumbers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsUserSuffix defines XsdGoPkgHasElemsUserSuffix
type XsdGoPkgHasElemsUserSuffix struct {
	UserSuffixs []*TExtensionOnlyType `xml:"UserSuffix"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsUserSuffix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsUserSuffix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsUserSuffix instance.
func (me *XsdGoPkgHasElemsUserSuffix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsUserSuffix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UserSuffixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPassword This element indicates that a password (or passphrase)
// has been used to
// authenticate the Principal to a remote system.
type XsdGoPkgHasElemsPassword struct {
	//	This element indicates that a password (or passphrase)
	//	has been used to
	//	authenticate the Principal to a remote system.
	Passwords []*TPasswordType `xml:"Password"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPassword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPassword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPassword instance.
func (me *XsdGoPkgHasElemsPassword) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPassword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Passwords {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsActivationPin This element indicates that a Pin (Personal
// Identification Number) has been used to authenticate the Principal to
// some local system in order to activate a key.
type XsdGoPkgHasElemsActivationPin struct {
	//	This element indicates that a Pin (Personal
	//	Identification Number) has been used to authenticate the Principal to
	//	some local system in order to activate a key.
	ActivationPins []*TActivationPinType `xml:"ActivationPin"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsActivationPin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsActivationPin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsActivationPin instance.
func (me *XsdGoPkgHasElemsActivationPin) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsActivationPin; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ActivationPins {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsToken This element indicates that a hardware or software
// token is used
// as a method of identifying the Principal.
type XsdGoPkgHasElemsToken struct {
	//	This element indicates that a hardware or software
	//	token is used
	//	as a method of identifying the Principal.
	Tokens []*TokenType `xml:"Token"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsToken function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsToken instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsToken instance.
func (me *XsdGoPkgHasElemsToken) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsToken; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tokens {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTimeSyncToken This element indicates that a time synchronization token is used to identify the Principal. hardware - the time synchonization token has been implemented in hardware. software - the time synchronization token has been implemented in software. SeedLength - the length, in bits, of the random seed used in the time synchronization token.
type XsdGoPkgHasElemsTimeSyncToken struct {
	//	This element indicates that a time synchronization
	//	token is used to identify the Principal. hardware -
	//	the time synchonization
	//	token has been implemented in hardware. software - the
	//	time synchronization
	//	token has been implemented in software. SeedLength -
	//	the length, in bits, of the
	//	random seed used in the time synchronization token.
	TimeSyncTokens []*TimeSyncTokenType `xml:"TimeSyncToken"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTimeSyncToken function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTimeSyncToken instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTimeSyncToken instance.
func (me *XsdGoPkgHasElemsTimeSyncToken) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTimeSyncToken; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TimeSyncTokens {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSmartcard This element indicates that a smartcard is used to
// identity the Principal.
type XsdGoPkgHasElemsSmartcard struct {
	//	This element indicates that a smartcard is used to
	//	identity the Principal.
	Smartcards []*TExtensionOnlyType `xml:"Smartcard"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSmartcard function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSmartcard instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSmartcard instance.
func (me *XsdGoPkgHasElemsSmartcard) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSmartcard; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Smartcards {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsLength This element indicates the minimum and/or maximum ASCII length of the password which is enforced (by the UA or the IdP). In other words, this is the minimum and/or maximum number of ASCII characters required to represent a valid password. min - the minimum number of ASCII characters required in a valid password, as enforced by the UA or the IdP. max - the maximum number of ASCII characters required in a valid password, as enforced by the UA or the IdP.
type XsdGoPkgHasElemsLength struct {
	//	This element indicates the minimum and/or maximum
	//	ASCII length of the password which is enforced (by the UA or the
	//	IdP). In other words, this is the minimum and/or maximum number of
	//	ASCII characters required to represent a valid password.
	//	min - the minimum number of ASCII characters required
	//	in a valid password, as enforced by the UA or the IdP.
	//	max - the maximum number of ASCII characters required
	//	in a valid password, as enforced by the UA or the IdP.
	Lengths []*TLengthType `xml:"Length"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsLength function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsLength instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsLength instance.
func (me *XsdGoPkgHasElemsLength) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsLength; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lengths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsActivationLimit This element indicates the length of time for which an
// PIN-based authentication is valid.
type XsdGoPkgHasElemsActivationLimit struct {
	//	This element indicates the length of time for which an
	//	PIN-based authentication is valid.
	ActivationLimits []*TActivationLimitType `xml:"ActivationLimit"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsActivationLimit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsActivationLimit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsActivationLimit instance.
func (me *XsdGoPkgHasElemsActivationLimit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsActivationLimit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ActivationLimits {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsGeneration Indicates whether the password was chosen by the Principal or auto-supplied by the Authentication Authority. principalchosen - the Principal is allowed to choose the value of the password. This is true even if the initial password is chosen at random by the UA or the IdP and the Principal is then free to change the password. automatic - the password is chosen by the UA or the IdP to be cryptographically strong in some sense, or to satisfy certain password rules, and that the Principal is not free to change it or to choose a new password.
type XsdGoPkgHasElemsGeneration struct {
	//	Indicates whether the password was chosen by the
	//	Principal or auto-supplied by the Authentication Authority.
	//	principalchosen - the Principal is allowed to choose
	//	the value of the password. This is true even if
	//	the initial password is chosen at random by the UA or
	//	the IdP and the Principal is then free to change
	//	the password.
	//	automatic - the password is chosen by the UA or the
	//	IdP to be cryptographically strong in some sense,
	//	or to satisfy certain password rules, and that the
	//	Principal is not free to change it or to choose a new password.
	Generations []*TxsdGeneration `xml:"Generation"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsGeneration function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsGeneration instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsGeneration instance.
func (me *XsdGoPkgHasElemsGeneration) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsGeneration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Generations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthnMethod Refers to those characteristics that define the
// mechanisms by which the Principal authenticates to the Authentication
// Authority.
type XsdGoPkgHasElemsAuthnMethod struct {
	//	Refers to those characteristics that define the
	//	mechanisms by which the Principal authenticates to the Authentication
	//	Authority.
	AuthnMethods []*TAuthnMethodBaseType `xml:"AuthnMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthnMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthnMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthnMethod instance.
func (me *XsdGoPkgHasElemsAuthnMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthnMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPrincipalAuthenticationMechanism The method that a Principal employs to perform
// authentication to local system components.
type XsdGoPkgHasElemsPrincipalAuthenticationMechanism struct {
	//	The method that a Principal employs to perform
	//	authentication to local system components.
	PrincipalAuthenticationMechanisms []*TPrincipalAuthenticationMechanismType `xml:"PrincipalAuthenticationMechanism"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPrincipalAuthenticationMechanism function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPrincipalAuthenticationMechanism instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPrincipalAuthenticationMechanism instance.
func (me *XsdGoPkgHasElemsPrincipalAuthenticationMechanism) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPrincipalAuthenticationMechanism; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PrincipalAuthenticationMechanisms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthenticator The method applied to validate a principal's
// authentication across a network
type XsdGoPkgHasElemsAuthenticator struct {
	//	The method applied to validate a principal's
	//	authentication across a network
	Authenticators []*TAuthenticatorBaseType `xml:"Authenticator"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthenticator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthenticator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthenticator instance.
func (me *XsdGoPkgHasElemsAuthenticator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthenticator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Authenticators {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsComplexAuthenticator Supports Authenticators with nested combinations of
// additional complexity.
type XsdGoPkgHasElemsComplexAuthenticator struct {
	//	Supports Authenticators with nested combinations of
	//	additional complexity.
	ComplexAuthenticators []*TComplexAuthenticatorType `xml:"ComplexAuthenticator"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsComplexAuthenticator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsComplexAuthenticator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsComplexAuthenticator instance.
func (me *XsdGoPkgHasElemsComplexAuthenticator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsComplexAuthenticator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ComplexAuthenticators {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPreviousSession Indicates that the Principal has been strongly
// authenticated in a previous session during which the IdP has set a
// cookie in the UA. During the present session the Principal has only
// been authenticated by the UA returning the cookie to the IdP.
type XsdGoPkgHasElemsPreviousSession struct {
	//	Indicates that the Principal has been strongly
	//	authenticated in a previous session during which the IdP has set a
	//	cookie in the UA. During the present session the Principal has only
	//	been authenticated by the UA returning the cookie to the IdP.
	PreviousSessions []*TExtensionOnlyType `xml:"PreviousSession"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPreviousSession function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPreviousSession instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPreviousSession instance.
func (me *XsdGoPkgHasElemsPreviousSession) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPreviousSession; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PreviousSessions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsResumeSession Rather like PreviousSession but using stronger
// security. A secret that was established in a previous session with
// the Authentication Authority has been cached by the local system and
// is now re-used (e.g. a Master Secret is used to derive new session
// keys in TLS, SSL, WTLS).
type XsdGoPkgHasElemsResumeSession struct {
	//	Rather like PreviousSession but using stronger
	//	security. A secret that was established in a previous session with
	//	the Authentication Authority has been cached by the local system and
	//	is now re-used (e.g. a Master Secret is used to derive new session
	//	keys in TLS, SSL, WTLS).
	ResumeSessions []*TExtensionOnlyType `xml:"ResumeSession"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsResumeSession function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsResumeSession instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsResumeSession instance.
func (me *XsdGoPkgHasElemsResumeSession) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsResumeSession; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ResumeSessions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsZeroKnowledge This element indicates that the Principal has been
// authenticated by a zero knowledge technique as specified in ISO/IEC
// 9798-5.
type XsdGoPkgHasElemsZeroKnowledge struct {
	//	This element indicates that the Principal has been
	//	authenticated by a zero knowledge technique as specified in ISO/IEC
	//	9798-5.
	ZeroKnowledges []*TExtensionOnlyType `xml:"ZeroKnowledge"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsZeroKnowledge function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsZeroKnowledge instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsZeroKnowledge instance.
func (me *XsdGoPkgHasElemsZeroKnowledge) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsZeroKnowledge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ZeroKnowledges {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSharedSecretChallengeResponse defines XsdGoPkgHasElemsSharedSecretChallengeResponse
type XsdGoPkgHasElemsSharedSecretChallengeResponse struct {
	SharedSecretChallengeResponses []*TSharedSecretChallengeResponseType `xml:"SharedSecretChallengeResponse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSharedSecretChallengeResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSharedSecretChallengeResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSharedSecretChallengeResponse instance.
func (me *XsdGoPkgHasElemsSharedSecretChallengeResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSharedSecretChallengeResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SharedSecretChallengeResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsDigSig This element indicates that the Principal has been
// authenticated by a mechanism which involves the Principal computing a
// digital signature over at least challenge data provided by the IdP.
type XsdGoPkgHasElemsDigSig struct {
	//	This element indicates that the Principal has been
	//	authenticated by a mechanism which involves the Principal computing a
	//	digital signature over at least challenge data provided by the IdP.
	DigSigs []*TPublicKeyType `xml:"DigSig"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsDigSig function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsDigSig instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsDigSig instance.
func (me *XsdGoPkgHasElemsDigSig) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsDigSig; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DigSigs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAsymmetricDecryption The local system has a private key but it is used
// in decryption mode, rather than signature mode. For example, the
// Authentication Authority generates a secret and encrypts it using the
// local system's public key: the local system then proves it has
// decrypted the secret.
type XsdGoPkgHasElemsAsymmetricDecryption struct {
	//	The local system has a private key but it is used
	//	in decryption mode, rather than signature mode. For example, the
	//	Authentication Authority generates a secret and encrypts it using the
	//	local system's public key: the local system then proves it has
	//	decrypted the secret.
	AsymmetricDecryptions []*TPublicKeyType `xml:"AsymmetricDecryption"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAsymmetricDecryption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAsymmetricDecryption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAsymmetricDecryption instance.
func (me *XsdGoPkgHasElemsAsymmetricDecryption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAsymmetricDecryption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AsymmetricDecryptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAsymmetricKeyAgreement The local system has a private key and uses it for
// shared secret key agreement with the Authentication Authority (e.g.
// via Diffie Helman).
type XsdGoPkgHasElemsAsymmetricKeyAgreement struct {
	//	The local system has a private key and uses it for
	//	shared secret key agreement with the Authentication Authority (e.g.
	//	via Diffie Helman).
	AsymmetricKeyAgreements []*TPublicKeyType `xml:"AsymmetricKeyAgreement"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAsymmetricKeyAgreement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAsymmetricKeyAgreement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAsymmetricKeyAgreement instance.
func (me *XsdGoPkgHasElemsAsymmetricKeyAgreement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAsymmetricKeyAgreement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AsymmetricKeyAgreements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsIPAddress This element indicates that the Principal has been
// authenticated through connection from a particular IP address.
type XsdGoPkgHasElemsIPAddress struct {
	//	This element indicates that the Principal has been
	//	authenticated through connection from a particular IP address.
	IPAddresses []*TExtensionOnlyType `xml:"IPAddress"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsIPAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsIPAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsIPAddress instance.
func (me *XsdGoPkgHasElemsIPAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsIPAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IPAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSharedSecretDynamicPlaintext The local system and Authentication Authority
// share a secret key. The local system uses this to encrypt a
// randomised string to pass to the Authentication Authority.
type XsdGoPkgHasElemsSharedSecretDynamicPlaintext struct {
	//	The local system and Authentication Authority
	//	share a secret key. The local system uses this to encrypt a
	//	randomised string to pass to the Authentication Authority.
	SharedSecretDynamicPlaintexts []*TExtensionOnlyType `xml:"SharedSecretDynamicPlaintext"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSharedSecretDynamicPlaintext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSharedSecretDynamicPlaintext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSharedSecretDynamicPlaintext instance.
func (me *XsdGoPkgHasElemsSharedSecretDynamicPlaintext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSharedSecretDynamicPlaintext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SharedSecretDynamicPlaintexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthenticatorTransportProtocol The protocol across which Authenticator information is
// transferred to an Authentication Authority verifier.
type XsdGoPkgHasElemsAuthenticatorTransportProtocol struct {
	//	The protocol across which Authenticator information is
	//	transferred to an Authentication Authority verifier.
	AuthenticatorTransportProtocols []*TAuthenticatorTransportProtocolType `xml:"AuthenticatorTransportProtocol"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthenticatorTransportProtocol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthenticatorTransportProtocol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthenticatorTransportProtocol instance.
func (me *XsdGoPkgHasElemsAuthenticatorTransportProtocol) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthenticatorTransportProtocol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthenticatorTransportProtocols {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsHTTP This element indicates that the Authenticator has been
// transmitted using bare HTTP utilizing no additional security
// protocols.
type XsdGoPkgHasElemsHTTP struct {
	//	This element indicates that the Authenticator has been
	//	transmitted using bare HTTP utilizing no additional security
	//	protocols.
	HTTPS []*TExtensionOnlyType `xml:"HTTP"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsHTTP function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsHTTP instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsHTTP instance.
func (me *XsdGoPkgHasElemsHTTP) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsHTTP; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HTTPS {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsIPSec This element indicates that the Authenticator has been
// transmitted using a transport mechanism protected by an IPSEC session.
type XsdGoPkgHasElemsIPSec struct {
	//	This element indicates that the Authenticator has been
	//	transmitted using a transport mechanism protected by an IPSEC session.
	IPSecs []*TExtensionOnlyType `xml:"IPSec"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsIPSec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsIPSec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsIPSec instance.
func (me *XsdGoPkgHasElemsIPSec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsIPSec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IPSecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsWtls This element indicates that the Authenticator has been
// transmitted using a transport mechanism protected by a WTLS session.
type XsdGoPkgHasElemsWtls struct {
	//	This element indicates that the Authenticator has been
	//	transmitted using a transport mechanism protected by a WTLS session.
	Wtlses []*TExtensionOnlyType `xml:"WTLS"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsWtls function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsWtls instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsWtls instance.
func (me *XsdGoPkgHasElemsWtls) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsWtls; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Wtlses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsMobileNetworkNoEncryption This element indicates that the Authenticator has been
// transmitted solely across a mobile network using no additional
// security mechanism.
type XsdGoPkgHasElemsMobileNetworkNoEncryption struct {
	//	This element indicates that the Authenticator has been
	//	transmitted solely across a mobile network using no additional
	//	security mechanism.
	MobileNetworkNoEncryptions []*TExtensionOnlyType `xml:"MobileNetworkNoEncryption"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsMobileNetworkNoEncryption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsMobileNetworkNoEncryption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsMobileNetworkNoEncryption instance.
func (me *XsdGoPkgHasElemsMobileNetworkNoEncryption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsMobileNetworkNoEncryption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MobileNetworkNoEncryptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsMobileNetworkRadioEncryption defines XsdGoPkgHasElemsMobileNetworkRadioEncryption
type XsdGoPkgHasElemsMobileNetworkRadioEncryption struct {
	MobileNetworkRadioEncryptions []*TExtensionOnlyType `xml:"MobileNetworkRadioEncryption"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsMobileNetworkRadioEncryption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsMobileNetworkRadioEncryption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsMobileNetworkRadioEncryption instance.
func (me *XsdGoPkgHasElemsMobileNetworkRadioEncryption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsMobileNetworkRadioEncryption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MobileNetworkRadioEncryptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsMobileNetworkEndToEndEncryption defines XsdGoPkgHasElemsMobileNetworkEndToEndEncryption
type XsdGoPkgHasElemsMobileNetworkEndToEndEncryption struct {
	MobileNetworkEndToEndEncryptions []*TExtensionOnlyType `xml:"MobileNetworkEndToEndEncryption"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsMobileNetworkEndToEndEncryption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsMobileNetworkEndToEndEncryption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsMobileNetworkEndToEndEncryption instance.
func (me *XsdGoPkgHasElemsMobileNetworkEndToEndEncryption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsMobileNetworkEndToEndEncryption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MobileNetworkEndToEndEncryptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSsl This element indicates that the Authenticator has been
// transmitted using a transport mechnanism protected by an SSL or TLS
// session.
type XsdGoPkgHasElemsSsl struct {
	//	This element indicates that the Authenticator has been
	//	transmitted using a transport mechnanism protected by an SSL or TLS
	//	session.
	Ssls []*TExtensionOnlyType `xml:"SSL"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSsl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSsl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSsl instance.
func (me *XsdGoPkgHasElemsSsl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSsl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ssls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPstn defines XsdGoPkgHasElemsPstn
type XsdGoPkgHasElemsPstn struct {
	Pstns []*TExtensionOnlyType `xml:"PSTN"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPstn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPstn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPstn instance.
func (me *XsdGoPkgHasElemsPstn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPstn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Pstns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsIsdn defines XsdGoPkgHasElemsIsdn
type XsdGoPkgHasElemsIsdn struct {
	Isdns []*TExtensionOnlyType `xml:"ISDN"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsIsdn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsIsdn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsIsdn instance.
func (me *XsdGoPkgHasElemsIsdn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsIsdn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Isdns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAdsl defines XsdGoPkgHasElemsAdsl
type XsdGoPkgHasElemsAdsl struct {
	Adsls []*TExtensionOnlyType `xml:"ADSL"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAdsl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAdsl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAdsl instance.
func (me *XsdGoPkgHasElemsAdsl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAdsl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Adsls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsOperationalProtection Refers to those characteristics that describe
// procedural security controls employed by the Authentication Authority.
type XsdGoPkgHasElemsOperationalProtection struct {
	//	Refers to those characteristics that describe
	//	procedural security controls employed by the Authentication Authority.
	OperationalProtections []*TOperationalProtectionType `xml:"OperationalProtection"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsOperationalProtection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsOperationalProtection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsOperationalProtection instance.
func (me *XsdGoPkgHasElemsOperationalProtection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsOperationalProtection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OperationalProtections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSecurityAudit defines XsdGoPkgHasElemsSecurityAudit
type XsdGoPkgHasElemsSecurityAudit struct {
	SecurityAudits []*TSecurityAuditType `xml:"SecurityAudit"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSecurityAudit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSecurityAudit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSecurityAudit instance.
func (me *XsdGoPkgHasElemsSecurityAudit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSecurityAudit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SecurityAudits {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSwitchAudit defines XsdGoPkgHasElemsSwitchAudit
type XsdGoPkgHasElemsSwitchAudit struct {
	SwitchAudits []*TExtensionOnlyType `xml:"SwitchAudit"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSwitchAudit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSwitchAudit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSwitchAudit instance.
func (me *XsdGoPkgHasElemsSwitchAudit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSwitchAudit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SwitchAudits {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsDeactivationCallCenter defines XsdGoPkgHasElemsDeactivationCallCenter
type XsdGoPkgHasElemsDeactivationCallCenter struct {
	DeactivationCallCenters []*TExtensionOnlyType `xml:"DeactivationCallCenter"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsDeactivationCallCenter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsDeactivationCallCenter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsDeactivationCallCenter instance.
func (me *XsdGoPkgHasElemsDeactivationCallCenter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsDeactivationCallCenter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DeactivationCallCenters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsGoverningAgreements Provides a mechanism for linking to external (likely
// human readable) documents in which additional business agreements,
// (e.g. liability constraints, obligations, etc) can be placed.
type XsdGoPkgHasElemsGoverningAgreements struct {
	//	Provides a mechanism for linking to external (likely
	//	human readable) documents in which additional business agreements,
	//	(e.g. liability constraints, obligations, etc) can be placed.
	GoverningAgreementses []*TGoverningAgreementsType `xml:"GoverningAgreements"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsGoverningAgreements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsGoverningAgreements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsGoverningAgreements instance.
func (me *XsdGoPkgHasElemsGoverningAgreements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsGoverningAgreements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GoverningAgreementses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemGoverningAgreementRef defines XsdGoPkgHasElemGoverningAgreementRef
type XsdGoPkgHasElemGoverningAgreementRef struct {
	GoverningAgreementRef *TGoverningAgreementRefType `xml:"GoverningAgreementRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemGoverningAgreementRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemGoverningAgreementRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemGoverningAgreementRef instance.
func (me *XsdGoPkgHasElemGoverningAgreementRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemGoverningAgreementRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GoverningAgreementRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRestrictedPassword defines XsdGoPkgHasElemsRestrictedPassword
type XsdGoPkgHasElemsRestrictedPassword struct {
	RestrictedPasswords []*TRestrictedPasswordType `xml:"RestrictedPassword"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRestrictedPassword function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRestrictedPassword instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRestrictedPassword instance.
func (me *XsdGoPkgHasElemsRestrictedPassword) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRestrictedPassword; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RestrictedPasswords {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAlphabet defines XsdGoPkgHasElemsAlphabet
type XsdGoPkgHasElemsAlphabet struct {
	Alphabets []*TAlphabetType `xml:"Alphabet"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAlphabet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAlphabet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAlphabet instance.
func (me *XsdGoPkgHasElemsAlphabet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAlphabet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Alphabets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsActivationLimitDuration This element indicates that the Key Activation Limit is
// defined as a specific duration of time.
type XsdGoPkgHasElemsActivationLimitDuration struct {
	//	This element indicates that the Key Activation Limit is
	//	defined as a specific duration of time.
	ActivationLimitDurations []*TActivationLimitDurationType `xml:"ActivationLimitDuration"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsActivationLimitDuration function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsActivationLimitDuration instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsActivationLimitDuration instance.
func (me *XsdGoPkgHasElemsActivationLimitDuration) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsActivationLimitDuration; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ActivationLimitDurations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsActivationLimitUsages This element indicates that the Key Activation Limit is
// defined as a number of usages.
type XsdGoPkgHasElemsActivationLimitUsages struct {
	//	This element indicates that the Key Activation Limit is
	//	defined as a number of usages.
	ActivationLimitUsageses []*TActivationLimitUsagesType `xml:"ActivationLimitUsages"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsActivationLimitUsages function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsActivationLimitUsages instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsActivationLimitUsages instance.
func (me *XsdGoPkgHasElemsActivationLimitUsages) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsActivationLimitUsages; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ActivationLimitUsageses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsActivationLimitSession This element indicates that the Key Activation Limit is
// the session.
type XsdGoPkgHasElemsActivationLimitSession struct {
	//	This element indicates that the Key Activation Limit is
	//	the session.
	ActivationLimitSessions []*TActivationLimitSessionType `xml:"ActivationLimitSession"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsActivationLimitSession function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsActivationLimitSession instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsActivationLimitSession instance.
func (me *XsdGoPkgHasElemsActivationLimitSession) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsActivationLimitSession; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ActivationLimitSessions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemExtension defines XsdGoPkgHasElemExtension
type XsdGoPkgHasElemExtension struct {
	Extension *TExtensionType `xml:"Extension"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemExtension function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemExtension instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemExtension instance.
func (me *XsdGoPkgHasElemExtension) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemExtension; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extension.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType defines XsdGoPkgHasElemsLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType
type XsdGoPkgHasElemsLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType struct {
	Lengths []*TRestrictedLengthType `xml:"Length"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType instance.
func (me *XsdGoPkgHasElemsLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lengths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasCdata defines type CDATA
type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 152 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

// XsdGoPkgWalkHandlers Provides 152 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElemActivationLimit                                                                                 func(*XsdGoPkgHasElemActivationLimit, bool) error
	TKeyStorageType                                                                                                func(*TKeyStorageType, bool) error
	XsdGoPkgHasElemPrivateKeyProtection                                                                            func(*XsdGoPkgHasElemPrivateKeyProtection, bool) error
	XsdGoPkgHasElemPrincipalAuthenticationMechanism                                                                func(*XsdGoPkgHasElemPrincipalAuthenticationMechanism, bool) error
	XsdGoPkgHasElemSharedSecretDynamicPlaintext                                                                    func(*XsdGoPkgHasElemSharedSecretDynamicPlaintext, bool) error
	XsdGoPkgHasElemsComplexAuthenticator                                                                           func(*XsdGoPkgHasElemsComplexAuthenticator, bool) error
	XsdGoPkgHasElemTechnicalProtection                                                                             func(*XsdGoPkgHasElemTechnicalProtection, bool) error
	XsdGoPkgHasElemAuthenticationContextDeclaration                                                                func(*XsdGoPkgHasElemAuthenticationContextDeclaration, bool) error
	XsdGoPkgHasElemsUserSuffix                                                                                     func(*XsdGoPkgHasElemsUserSuffix, bool) error
	XsdGoPkgHasElemsSharedSecretDynamicPlaintext                                                                   func(*XsdGoPkgHasElemsSharedSecretDynamicPlaintext, bool) error
	XsdGoPkgHasElemGeneration                                                                                      func(*XsdGoPkgHasElemGeneration, bool) error
	XsdGoPkgHasElemActivationLimitDuration                                                                         func(*XsdGoPkgHasElemActivationLimitDuration, bool) error
	XsdGoPkgHasElemToken                                                                                           func(*XsdGoPkgHasElemToken, bool) error
	XsdGoPkgHasElemAuthenticatorTransportProtocol                                                                  func(*XsdGoPkgHasElemAuthenticatorTransportProtocol, bool) error
	XsdGoPkgHasElemsSmartcard                                                                                      func(*XsdGoPkgHasElemsSmartcard, bool) error
	XsdGoPkgHasElemsGeneration                                                                                     func(*XsdGoPkgHasElemsGeneration, bool) error
	XsdGoPkgHasElemsMobileNetworkEndToEndEncryption                                                                func(*XsdGoPkgHasElemsMobileNetworkEndToEndEncryption, bool) error
	TActivationLimitDurationType                                                                                   func(*TActivationLimitDurationType, bool) error
	XsdGoPkgHasElemMobileNetworkEndToEndEncryption                                                                 func(*XsdGoPkgHasElemMobileNetworkEndToEndEncryption, bool) error
	XsdGoPkgHasElemsSharedSecretChallengeResponse                                                                  func(*XsdGoPkgHasElemsSharedSecretChallengeResponse, bool) error
	TGoverningAgreementRefType                                                                                     func(*TGoverningAgreementRefType, bool) error
	XsdGoPkgHasElemActivationLimitSession                                                                          func(*XsdGoPkgHasElemActivationLimitSession, bool) error
	TSecurityAuditType                                                                                             func(*TSecurityAuditType, bool) error
	TPasswordType                                                                                                  func(*TPasswordType, bool) error
	XsdGoPkgHasGroupAuthenticatorChoiceGroup                                                                       func(*XsdGoPkgHasGroupAuthenticatorChoiceGroup, bool) error
	XsdGoPkgHasElemPstn                                                                                            func(*XsdGoPkgHasElemPstn, bool) error
	XsdGoPkgHasElemsLength                                                                                         func(*XsdGoPkgHasElemsLength, bool) error
	XsdGoPkgHasElemsMobileNetworkRadioEncryption                                                                   func(*XsdGoPkgHasElemsMobileNetworkRadioEncryption, bool) error
	XsdGoPkgHasElemsSecurityAudit                                                                                  func(*XsdGoPkgHasElemsSecurityAudit, bool) error
	XsdGoPkgHasElemsSwitchAudit                                                                                    func(*XsdGoPkgHasElemsSwitchAudit, bool) error
	XsdGoPkgHasElemsGoverningAgreementRef                                                                          func(*XsdGoPkgHasElemsGoverningAgreementRef, bool) error
	TxsdGeneration                                                                                                 func(*TxsdGeneration, bool) error
	XsdGoPkgHasElemSecretKeyProtection                                                                             func(*XsdGoPkgHasElemSecretKeyProtection, bool) error
	XsdGoPkgHasElemRestrictedPassword                                                                              func(*XsdGoPkgHasElemRestrictedPassword, bool) error
	XsdGoPkgHasElemsWrittenConsent                                                                                 func(*XsdGoPkgHasElemsWrittenConsent, bool) error
	XsdGoPkgHasElemsAuthenticator                                                                                  func(*XsdGoPkgHasElemsAuthenticator, bool) error
	TGoverningAgreementsType                                                                                       func(*TGoverningAgreementsType, bool) error
	XsdGoPkgHasElemPassword                                                                                        func(*XsdGoPkgHasElemPassword, bool) error
	XsdGoPkgHasElemResumeSession                                                                                   func(*XsdGoPkgHasElemResumeSession, bool) error
	TAuthnMethodBaseType                                                                                           func(*TAuthnMethodBaseType, bool) error
	XsdGoPkgHasElemsIPSec                                                                                          func(*XsdGoPkgHasElemsIPSec, bool) error
	XsdGoPkgHasElemsRestrictedPassword                                                                             func(*XsdGoPkgHasElemsRestrictedPassword, bool) error
	XsdGoPkgHasElemsActivationLimitSession                                                                         func(*XsdGoPkgHasElemsActivationLimitSession, bool) error
	TLengthType                                                                                                    func(*TLengthType, bool) error
	XsdGoPkgHasElemKeySharing                                                                                      func(*XsdGoPkgHasElemKeySharing, bool) error
	XsdGoPkgHasElemDeactivationCallCenter                                                                          func(*XsdGoPkgHasElemDeactivationCallCenter, bool) error
	XsdGoPkgHasElemUserSuffix                                                                                      func(*XsdGoPkgHasElemUserSuffix, bool) error
	XsdGoPkgHasElemAuthnMethod                                                                                     func(*XsdGoPkgHasElemAuthnMethod, bool) error
	XsdGoPkgHasElemsPrivateKeyProtection                                                                           func(*XsdGoPkgHasElemsPrivateKeyProtection, bool) error
	XsdGoPkgHasElemsWtls                                                                                           func(*XsdGoPkgHasElemsWtls, bool) error
	TRestrictedPasswordType                                                                                        func(*TRestrictedPasswordType, bool) error
	TimeSyncTokenType                                                                                              func(*TimeSyncTokenType, bool) error
	XsdGoPkgHasElemSubscriberLineNumber                                                                            func(*XsdGoPkgHasElemSubscriberLineNumber, bool) error
	XsdGoPkgHasElemSsl                                                                                             func(*XsdGoPkgHasElemSsl, bool) error
	XsdGoPkgHasElemMobileNetworkRadioEncryption                                                                    func(*XsdGoPkgHasElemMobileNetworkRadioEncryption, bool) error
	XsdGoPkgHasElemMobileNetworkNoEncryption                                                                       func(*XsdGoPkgHasElemMobileNetworkNoEncryption, bool) error
	TAuthnContextDeclarationBaseType                                                                               func(*TAuthnContextDeclarationBaseType, bool) error
	XsdGoPkgHasElemsAuthenticationContextDeclaration                                                               func(*XsdGoPkgHasElemsAuthenticationContextDeclaration, bool) error
	XsdGoPkgHasElemsPassword                                                                                       func(*XsdGoPkgHasElemsPassword, bool) error
	XsdGoPkgHasCdata                                                                                               func(*XsdGoPkgHasCdata, bool) error
	TActivationLimitType                                                                                           func(*TActivationLimitType, bool) error
	TokenType                                                                                                      func(*TokenType, bool) error
	XsdGoPkgHasElemsKeyActivation                                                                                  func(*XsdGoPkgHasElemsKeyActivation, bool) error
	XsdGoPkgHasElemsDeactivationCallCenter                                                                         func(*XsdGoPkgHasElemsDeactivationCallCenter, bool) error
	XsdGoPkgHasElemsExtension                                                                                      func(*XsdGoPkgHasElemsExtension, bool) error
	TxsdPhysicalVerification                                                                                       func(*TxsdPhysicalVerification, bool) error
	XsdGoPkgHasGroupAuthenticatorSequenceGroup                                                                     func(*XsdGoPkgHasGroupAuthenticatorSequenceGroup, bool) error
	XsdGoPkgHasElemComplexAuthenticator                                                                            func(*XsdGoPkgHasElemComplexAuthenticator, bool) error
	XsdGoPkgHasElemsIsdn                                                                                           func(*XsdGoPkgHasElemsIsdn, bool) error
	TPrivateKeyProtectionType                                                                                      func(*TPrivateKeyProtectionType, bool) error
	XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType  func(*XsdGoPkgHasElemLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType, bool) error
	XsdGoPkgHasElemsSubscriberLineNumber                                                                           func(*XsdGoPkgHasElemsSubscriberLineNumber, bool) error
	TExtensionType                                                                                                 func(*TExtensionType, bool) error
	TRestrictedLengthType                                                                                          func(*TRestrictedLengthType, bool) error
	XsdGoPkgHasElemAsymmetricDecryption                                                                            func(*XsdGoPkgHasElemAsymmetricDecryption, bool) error
	XsdGoPkgHasElemAdsl                                                                                            func(*XsdGoPkgHasElemAdsl, bool) error
	XsdGoPkgHasElemsZeroKnowledge                                                                                  func(*XsdGoPkgHasElemsZeroKnowledge, bool) error
	XsdGoPkgHasElemActivationLimitUsages                                                                           func(*XsdGoPkgHasElemActivationLimitUsages, bool) error
	TKeySharingType                                                                                                func(*TKeySharingType, bool) error
	XsdGoPkgHasElemZeroKnowledge                                                                                   func(*XsdGoPkgHasElemZeroKnowledge, bool) error
	XsdGoPkgHasElemWtls                                                                                            func(*XsdGoPkgHasElemWtls, bool) error
	XsdGoPkgHasElemsKeySharing                                                                                     func(*XsdGoPkgHasElemsKeySharing, bool) error
	XsdGoPkgHasElemsAdsl                                                                                           func(*XsdGoPkgHasElemsAdsl, bool) error
	XsdGoPkgHasElemHTTP                                                                                            func(*XsdGoPkgHasElemHTTP, bool) error
	XsdGoPkgHasElemsSsl                                                                                            func(*XsdGoPkgHasElemsSsl, bool) error
	TIdentificationType                                                                                            func(*TIdentificationType, bool) error
	TAlphabetType                                                                                                  func(*TAlphabetType, bool) error
	TActivationLimitUsagesType                                                                                     func(*TActivationLimitUsagesType, bool) error
	XsdGoPkgHasElemGoverningAgreementRef                                                                           func(*XsdGoPkgHasElemGoverningAgreementRef, bool) error
	XsdGoPkgHasElemKeyStorage                                                                                      func(*XsdGoPkgHasElemKeyStorage, bool) error
	XsdGoPkgHasElemDigSig                                                                                          func(*XsdGoPkgHasElemDigSig, bool) error
	XsdGoPkgHasElemsToken                                                                                          func(*XsdGoPkgHasElemsToken, bool) error
	XsdGoPkgHasElemsAuthnMethod                                                                                    func(*XsdGoPkgHasElemsAuthnMethod, bool) error
	XsdGoPkgHasElemsPstn                                                                                           func(*XsdGoPkgHasElemsPstn, bool) error
	XsdGoPkgHasElemsGoverningAgreements                                                                            func(*XsdGoPkgHasElemsGoverningAgreements, bool) error
	XsdGoPkgHasElemsAlphabet                                                                                       func(*XsdGoPkgHasElemsAlphabet, bool) error
	XsdGoPkgHasElemsActivationLimitDuration                                                                        func(*XsdGoPkgHasElemsActivationLimitDuration, bool) error
	TExtensionOnlyType                                                                                             func(*TExtensionOnlyType, bool) error
	XsdGoPkgHasElemsPhysicalVerification                                                                           func(*XsdGoPkgHasElemsPhysicalVerification, bool) error
	XsdGoPkgHasElemsOperationalProtection                                                                          func(*XsdGoPkgHasElemsOperationalProtection, bool) error
	TComplexAuthenticatorType                                                                                      func(*TComplexAuthenticatorType, bool) error
	XsdGoPkgHasElemsLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType func(*XsdGoPkgHasElemsLengthsequencerestrictioncomplexContentRestrictedPasswordTypeschemaLengthTRestrictedLengthType, bool) error
	TechnicalProtectionBaseType                                                                                    func(*TechnicalProtectionBaseType, bool) error
	TOperationalProtectionType                                                                                     func(*TOperationalProtectionType, bool) error
	XsdGoPkgHasElemOperationalProtection                                                                           func(*XsdGoPkgHasElemOperationalProtection, bool) error
	XsdGoPkgHasElemSharedSecretChallengeResponse                                                                   func(*XsdGoPkgHasElemSharedSecretChallengeResponse, bool) error
	XsdGoPkgHasElemsDigSig                                                                                         func(*XsdGoPkgHasElemsDigSig, bool) error
	XsdGoPkgHasElemPhysicalVerification                                                                            func(*XsdGoPkgHasElemPhysicalVerification, bool) error
	XsdGoPkgHasElemsIdentification                                                                                 func(*XsdGoPkgHasElemsIdentification, bool) error
	XsdGoPkgHasElemsResumeSession                                                                                  func(*XsdGoPkgHasElemsResumeSession, bool) error
	XsdGoPkgHasElemActivationPin                                                                                   func(*XsdGoPkgHasElemActivationPin, bool) error
	XsdGoPkgHasElemSwitchAudit                                                                                     func(*XsdGoPkgHasElemSwitchAudit, bool) error
	XsdGoPkgHasElemIPAddress                                                                                       func(*XsdGoPkgHasElemIPAddress, bool) error
	XsdGoPkgHasElemPreviousSession                                                                                 func(*XsdGoPkgHasElemPreviousSession, bool) error
	XsdGoPkgHasElemsAsymmetricKeyAgreement                                                                         func(*XsdGoPkgHasElemsAsymmetricKeyAgreement, bool) error
	XsdGoPkgHasElemAsymmetricKeyAgreement                                                                          func(*XsdGoPkgHasElemAsymmetricKeyAgreement, bool) error
	XsdGoPkgHasElemIPSec                                                                                           func(*XsdGoPkgHasElemIPSec, bool) error
	XsdGoPkgHasElemsAsymmetricDecryption                                                                           func(*XsdGoPkgHasElemsAsymmetricDecryption, bool) error
	XsdGoPkgHasElemsAuthenticatorTransportProtocol                                                                 func(*XsdGoPkgHasElemsAuthenticatorTransportProtocol, bool) error
	TActivationLimitSessionType                                                                                    func(*TActivationLimitSessionType, bool) error
	XsdGoPkgHasElemSmartcard                                                                                       func(*XsdGoPkgHasElemSmartcard, bool) error
	XsdGoPkgHasElemsActivationPin                                                                                  func(*XsdGoPkgHasElemsActivationPin, bool) error
	XsdGoPkgHasElemsPrincipalAuthenticationMechanism                                                               func(*XsdGoPkgHasElemsPrincipalAuthenticationMechanism, bool) error
	XsdGoPkgHasElemGoverningAgreements                                                                             func(*XsdGoPkgHasElemGoverningAgreements, bool) error
	XsdGoPkgHasElemWrittenConsent                                                                                  func(*XsdGoPkgHasElemWrittenConsent, bool) error
	TSecretKeyProtectionType                                                                                       func(*TSecretKeyProtectionType, bool) error
	XsdGoPkgHasElemsTechnicalProtection                                                                            func(*XsdGoPkgHasElemsTechnicalProtection, bool) error
	XsdGoPkgHasElemLength                                                                                          func(*XsdGoPkgHasElemLength, bool) error
	XsdGoPkgHasElemKeyActivation                                                                                   func(*XsdGoPkgHasElemKeyActivation, bool) error
	XsdGoPkgHasElemSecurityAudit                                                                                   func(*XsdGoPkgHasElemSecurityAudit, bool) error
	TAuthenticatorBaseType                                                                                         func(*TAuthenticatorBaseType, bool) error
	XsdGoPkgHasElemsSecretKeyProtection                                                                            func(*XsdGoPkgHasElemsSecretKeyProtection, bool) error
	XsdGoPkgHasElemsActivationLimit                                                                                func(*XsdGoPkgHasElemsActivationLimit, bool) error
	XsdGoPkgHasElemExtension                                                                                       func(*XsdGoPkgHasElemExtension, bool) error
	TSharedSecretChallengeResponseType                                                                             func(*TSharedSecretChallengeResponseType, bool) error
	XsdGoPkgHasElemIsdn                                                                                            func(*XsdGoPkgHasElemIsdn, bool) error
	XsdGoPkgHasElemsMobileNetworkNoEncryption                                                                      func(*XsdGoPkgHasElemsMobileNetworkNoEncryption, bool) error
	XsdGoPkgHasElemsActivationLimitUsages                                                                          func(*XsdGoPkgHasElemsActivationLimitUsages, bool) error
	XsdGoPkgHasElemIdentification                                                                                  func(*XsdGoPkgHasElemIdentification, bool) error
	TKeyActivationType                                                                                             func(*TKeyActivationType, bool) error
	XsdGoPkgHasElemTimeSyncToken                                                                                   func(*XsdGoPkgHasElemTimeSyncToken, bool) error
	TPublicKeyType                                                                                                 func(*TPublicKeyType, bool) error
	XsdGoPkgHasElemAuthenticator                                                                                   func(*XsdGoPkgHasElemAuthenticator, bool) error
	TAuthenticatorTransportProtocolType                                                                            func(*TAuthenticatorTransportProtocolType, bool) error
	XsdGoPkgHasElemsKeyStorage                                                                                     func(*XsdGoPkgHasElemsKeyStorage, bool) error
	XsdGoPkgHasElemsTimeSyncToken                                                                                  func(*XsdGoPkgHasElemsTimeSyncToken, bool) error
	XsdGoPkgHasElemsIPAddress                                                                                      func(*XsdGoPkgHasElemsIPAddress, bool) error
	XsdGoPkgHasElemsHTTP                                                                                           func(*XsdGoPkgHasElemsHTTP, bool) error
	XsdGoPkgHasElemAlphabet                                                                                        func(*XsdGoPkgHasElemAlphabet, bool) error
	TActivationPinType                                                                                             func(*TActivationPinType, bool) error
	TPrincipalAuthenticationMechanismType                                                                          func(*TPrincipalAuthenticationMechanismType, bool) error
	XsdGoPkgHasElemsPreviousSession                                                                                func(*XsdGoPkgHasElemsPreviousSession, bool) error
}
