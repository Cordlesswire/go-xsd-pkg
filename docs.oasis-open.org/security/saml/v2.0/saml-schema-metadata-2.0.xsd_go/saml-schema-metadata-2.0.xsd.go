//	Auto-generated by the "go-xsd" package located at:
//		github.com/miracl/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd
package go_SamlMetadata20

//	Document identifier: saml-schema-metadata-2.0
//	Location: http://docs.oasis-open.org/security/saml/v2.0/
//	Revision history:
//	V2.0 (March, 2005):
//	Schema for SAML metadata, first published in SAML 2.0.

import (
	saml "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd_go"
	xml "github.com/miracl/go-xsd-pkg/www.w3.org/2001/xml.xsd_go"
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xenc "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

type TExtensionsType struct {
}

//	If the WalkHandlers.TExtensionsType function is not nil (ie. was set by outside code), calls it with this TExtensionsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TExtensionsType instance.
func (me *TExtensionsType) Walk() (err error) {
	if fn := WalkHandlers.TExtensionsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Extensions struct {
	Extensions *TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Extensions"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Extensions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Extensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Extensions instance.
func (me *XsdGoPkgHasElem_Extensions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Extensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Extensions struct {
	Extensionses []*TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Extensions"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Extensions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Extensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Extensions instance.
func (me *XsdGoPkgHasElems_Extensions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Extensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extensionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Binding_XsdtAnyURI_ struct {
	Binding xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata Binding,attr"`
}

type XsdGoPkgHasAttr_Location_XsdtAnyURI_ struct {
	Location xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata Location,attr"`
}

type XsdGoPkgHasAttr_ResponseLocation_XsdtAnyURI_ struct {
	ResponseLocation xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata ResponseLocation,attr"`
}

type TEndpointType struct {
	XsdGoPkgHasAttr_Binding_XsdtAnyURI_

	XsdGoPkgHasAttr_Location_XsdtAnyURI_

	XsdGoPkgHasAttr_ResponseLocation_XsdtAnyURI_
}

//	If the WalkHandlers.TEndpointType function is not nil (ie. was set by outside code), calls it with this TEndpointType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TEndpointType instance.
func (me *TEndpointType) Walk() (err error) {
	if fn := WalkHandlers.TEndpointType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SingleLogoutService struct {
	SingleLogoutServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleLogoutService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SingleLogoutService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SingleLogoutService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SingleLogoutService instance.
func (me *XsdGoPkgHasElems_SingleLogoutService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SingleLogoutService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SingleLogoutServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ManageNameIDService struct {
	ManageNameIDServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ManageNameIDService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ManageNameIDService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ManageNameIDService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ManageNameIDService instance.
func (me *XsdGoPkgHasElems_ManageNameIDService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ManageNameIDService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ManageNameIDServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NameIDFormat struct {
	NameIDFormats []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDFormat"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NameIDFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NameIDFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NameIDFormat instance.
func (me *XsdGoPkgHasElems_NameIDFormat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NameIDFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Company struct {
	Company xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata Company"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Company function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Company instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Company instance.
func (me *XsdGoPkgHasElem_Company) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Company; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GivenName struct {
	GivenName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata GivenName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GivenName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GivenName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GivenName instance.
func (me *XsdGoPkgHasElem_GivenName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GivenName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SurName struct {
	SurName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata SurName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SurName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SurName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SurName instance.
func (me *XsdGoPkgHasElem_SurName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SurName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmailAddress struct {
	EmailAddresses []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata EmailAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmailAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmailAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmailAddress instance.
func (me *XsdGoPkgHasElems_EmailAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmailAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TelephoneNumber struct {
	TelephoneNumbers []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata TelephoneNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TelephoneNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TelephoneNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TelephoneNumber instance.
func (me *XsdGoPkgHasElems_TelephoneNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TelephoneNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TContactTypeType xsdt.String

//	Returns true if the value of this enumerated TContactTypeType is "technical".
func (me TContactTypeType) IsTechnical() bool { return me.String() == "technical" }

//	Returns true if the value of this enumerated TContactTypeType is "support".
func (me TContactTypeType) IsSupport() bool { return me.String() == "support" }

//	Returns true if the value of this enumerated TContactTypeType is "administrative".
func (me TContactTypeType) IsAdministrative() bool { return me.String() == "administrative" }

//	Returns true if the value of this enumerated TContactTypeType is "billing".
func (me TContactTypeType) IsBilling() bool { return me.String() == "billing" }

//	Returns true if the value of this enumerated TContactTypeType is "other".
func (me TContactTypeType) IsOther() bool { return me.String() == "other" }

//	Since TContactTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TContactTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TContactTypeType is just a simple String type, this merely returns the current string value.
func (me TContactTypeType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TContactTypeType's alias type xsdt.String.
func (me TContactTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_ContactType_TContactTypeType_ struct {
	ContactType TContactTypeType `xml:"urn:oasis:names:tc:SAML:2.0:metadata contactType,attr"`
}

type TContactType struct {
	XsdGoPkgHasElem_GivenName

	XsdGoPkgHasElem_SurName

	XsdGoPkgHasElems_EmailAddress

	XsdGoPkgHasElems_TelephoneNumber

	XsdGoPkgHasAttr_ContactType_TContactTypeType_

	XsdGoPkgHasElem_Extensions

	XsdGoPkgHasElem_Company
}

//	If the WalkHandlers.TContactType function is not nil (ie. was set by outside code), calls it with this TContactType instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TContactType instance.
func (me *TContactType) Walk() (err error) {
	if fn := WalkHandlers.TContactType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_GivenName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SurName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EmailAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TelephoneNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Company.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ContactPerson struct {
	ContactPersons []*TContactType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ContactPerson"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ContactPerson function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ContactPerson instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ContactPerson instance.
func (me *XsdGoPkgHasElems_ContactPerson) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ContactPerson; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContactPersons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"urn:oasis:names:tc:SAML:2.0:metadata ID,attr"`
}

type XsdGoPkgHasAttr_ValidUntil_XsdtDateTime_ struct {
	ValidUntil xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:metadata validUntil,attr"`
}

type XsdGoPkgHasAttr_CacheDuration_XsdtDuration_ struct {
	CacheDuration xsdt.Duration `xml:"urn:oasis:names:tc:SAML:2.0:metadata cacheDuration,attr"`
}

type TanyURIListType xsdt.String

//	TanyURIListType declares a String containing a whitespace-separated list of xsdt.AnyURI values. This Values() method creates and returns a slice of all elements in that list.
func (me TanyURIListType) Values() (list []xsdt.AnyURI) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.AnyURI, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TanyURIListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TanyURIListType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TanyURIListType is just a simple String type, this merely returns the current string value.
func (me TanyURIListType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TanyURIListType's alias type xsdt.String.
func (me TanyURIListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_ProtocolSupportEnumeration_TanyURIListType_ struct {
	ProtocolSupportEnumeration TanyURIListType `xml:"urn:oasis:names:tc:SAML:2.0:metadata protocolSupportEnumeration,attr"`
}

type XsdGoPkgHasElems_EncryptionMethod struct {
	EncryptionMethods []xenc.TEncryptionMethodType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EncryptionMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EncryptionMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EncryptionMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EncryptionMethod instance.
func (me *XsdGoPkgHasElems_EncryptionMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EncryptionMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TKeyTypes xsdt.String

//	This convenience method just performs a simple type conversion to TKeyTypes's alias type xsdt.String.
func (me TKeyTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TKeyTypes is "encryption".
func (me TKeyTypes) IsEncryption() bool { return me.String() == "encryption" }

//	Returns true if the value of this enumerated TKeyTypes is "signing".
func (me TKeyTypes) IsSigning() bool { return me.String() == "signing" }

//	Since TKeyTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TKeyTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TKeyTypes is just a simple String type, this merely returns the current string value.
func (me TKeyTypes) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Use_TKeyTypes_ struct {
	Use TKeyTypes `xml:"urn:oasis:names:tc:SAML:2.0:metadata use,attr"`
}

type TKeyDescriptorType struct {
	ds.XsdGoPkgHasElem_KeyInfo

	XsdGoPkgHasElems_EncryptionMethod

	XsdGoPkgHasAttr_Use_TKeyTypes_
}

//	If the WalkHandlers.TKeyDescriptorType function is not nil (ie. was set by outside code), calls it with this TKeyDescriptorType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TKeyDescriptorType instance.
func (me *TKeyDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TKeyDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_EncryptionMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KeyDescriptor struct {
	KeyDescriptors []*TKeyDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata KeyDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KeyDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeyDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeyDescriptor instance.
func (me *XsdGoPkgHasElems_KeyDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KeyDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAnyURICdata struct {
	XsdGoPkgCDATA xsdt.AnyURI `xml:",chardata"`
}

type TlocalizedURIType struct {
	XsdGoPkgHasAnyURICdata

	xml.XsdGoPkgHasAttr_Lang
}

//	If the WalkHandlers.TlocalizedURIType function is not nil (ie. was set by outside code), calls it with this TlocalizedURIType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TlocalizedURIType instance.
func (me *TlocalizedURIType) Walk() (err error) {
	if fn := WalkHandlers.TlocalizedURIType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrganizationURL struct {
	OrganizationURLs []*TlocalizedURIType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationURL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrganizationURL function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrganizationURL instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrganizationURL instance.
func (me *XsdGoPkgHasElems_OrganizationURL) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrganizationURL; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrganizationURLs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlocalizedNameType struct {
	XsdGoPkgHasCdata

	xml.XsdGoPkgHasAttr_Lang
}

//	If the WalkHandlers.TlocalizedNameType function is not nil (ie. was set by outside code), calls it with this TlocalizedNameType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TlocalizedNameType instance.
func (me *TlocalizedNameType) Walk() (err error) {
	if fn := WalkHandlers.TlocalizedNameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrganizationName struct {
	OrganizationNames []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrganizationName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrganizationName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrganizationName instance.
func (me *XsdGoPkgHasElems_OrganizationName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrganizationName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrganizationNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OrganizationDisplayName struct {
	OrganizationDisplayNames []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationDisplayName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OrganizationDisplayName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrganizationDisplayName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrganizationDisplayName instance.
func (me *XsdGoPkgHasElems_OrganizationDisplayName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OrganizationDisplayName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrganizationDisplayNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TOrganizationType struct {
	XsdGoPkgHasElems_OrganizationDisplayName

	XsdGoPkgHasElems_OrganizationURL

	XsdGoPkgHasElem_Extensions

	XsdGoPkgHasElems_OrganizationName
}

//	If the WalkHandlers.TOrganizationType function is not nil (ie. was set by outside code), calls it with this TOrganizationType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TOrganizationType instance.
func (me *TOrganizationType) Walk() (err error) {
	if fn := WalkHandlers.TOrganizationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OrganizationName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OrganizationDisplayName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OrganizationURL.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Organization struct {
	Organization *TOrganizationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Organization"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Organization function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Organization instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Organization instance.
func (me *XsdGoPkgHasElem_Organization) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Organization; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Organization.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ErrorURL_XsdtAnyURI_ struct {
	ErrorURL xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata errorURL,attr"`
}

type TRoleDescriptorType struct {
	XsdGoPkgHasElems_ContactPerson

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Organization

	XsdGoPkgHasAttr_ErrorURL_XsdtAnyURI_

	XsdGoPkgHasAttr_ValidUntil_XsdtDateTime_

	XsdGoPkgHasAttr_CacheDuration_XsdtDuration_

	XsdGoPkgHasAttr_ProtocolSupportEnumeration_TanyURIListType_

	ds.XsdGoPkgHasElem_Signature

	XsdGoPkgHasElem_Extensions

	XsdGoPkgHasElems_KeyDescriptor
}

//	If the WalkHandlers.TRoleDescriptorType function is not nil (ie. was set by outside code), calls it with this TRoleDescriptorType instance as the single argument. Then calls the Walk() method on 4/10 embed(s) and 0/0 field(s) belonging to this TRoleDescriptorType instance.
func (me *TRoleDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TRoleDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ContactPerson.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_KeyDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Organization.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Index_XsdtUnsignedShort_ struct {
	Index xsdt.UnsignedShort `xml:"urn:oasis:names:tc:SAML:2.0:metadata index,attr"`
}

type XsdGoPkgHasAttr_IsDefault_XsdtBoolean_ struct {
	IsDefault xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:metadata isDefault,attr"`
}

type TIndexedEndpointType struct {
	TEndpointType

	XsdGoPkgHasAttr_Index_XsdtUnsignedShort_

	XsdGoPkgHasAttr_IsDefault_XsdtBoolean_
}

//	If the WalkHandlers.TIndexedEndpointType function is not nil (ie. was set by outside code), calls it with this TIndexedEndpointType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TIndexedEndpointType instance.
func (me *TIndexedEndpointType) Walk() (err error) {
	if fn := WalkHandlers.TIndexedEndpointType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TEndpointType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ArtifactResolutionService struct {
	ArtifactResolutionServices []*TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ArtifactResolutionService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ArtifactResolutionService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ArtifactResolutionService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ArtifactResolutionService instance.
func (me *XsdGoPkgHasElems_ArtifactResolutionService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ArtifactResolutionService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArtifactResolutionServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSSODescriptorType struct {
	XsdGoPkgHasElems_SingleLogoutService

	XsdGoPkgHasElems_ManageNameIDService

	XsdGoPkgHasElems_NameIDFormat

	TRoleDescriptorType

	XsdGoPkgHasElems_ArtifactResolutionService
}

//	If the WalkHandlers.TSSODescriptorType function is not nil (ie. was set by outside code), calls it with this TSSODescriptorType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TSSODescriptorType instance.
func (me *TSSODescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TSSODescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ArtifactResolutionService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SingleLogoutService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ManageNameIDService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SingleSignOnService struct {
	SingleSignOnServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleSignOnService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SingleSignOnService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SingleSignOnService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SingleSignOnService instance.
func (me *XsdGoPkgHasElems_SingleSignOnService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SingleSignOnService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SingleSignOnServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NameIDMappingService struct {
	NameIDMappingServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDMappingService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NameIDMappingService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NameIDMappingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NameIDMappingService instance.
func (me *XsdGoPkgHasElems_NameIDMappingService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NameIDMappingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDMappingServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssertionIDRequestService struct {
	AssertionIDRequestServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionIDRequestService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssertionIDRequestService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssertionIDRequestService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssertionIDRequestService instance.
func (me *XsdGoPkgHasElems_AssertionIDRequestService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssertionIDRequestService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssertionIDRequestServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttributeProfile struct {
	AttributeProfiles []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeProfile"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttributeProfile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttributeProfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttributeProfile instance.
func (me *XsdGoPkgHasElems_AttributeProfile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttributeProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_WantAuthnRequestsSigned_XsdtBoolean_ struct {
	WantAuthnRequestsSigned xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:metadata WantAuthnRequestsSigned,attr"`
}

type TIDPSSODescriptorType struct {
	XsdGoPkgHasElems_AssertionIDRequestService

	XsdGoPkgHasElems_AttributeProfile

	saml.XsdGoPkgHasElems_Attribute

	XsdGoPkgHasAttr_WantAuthnRequestsSigned_XsdtBoolean_

	TSSODescriptorType

	XsdGoPkgHasElems_SingleSignOnService

	XsdGoPkgHasElems_NameIDMappingService
}

//	If the WalkHandlers.TIDPSSODescriptorType function is not nil (ie. was set by outside code), calls it with this TIDPSSODescriptorType instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TIDPSSODescriptorType instance.
func (me *TIDPSSODescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TIDPSSODescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AttributeProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TSSODescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SingleSignOnService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NameIDMappingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IDPSSODescriptor struct {
	IDPSSODescriptors []*TIDPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata IDPSSODescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IDPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IDPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IDPSSODescriptor instance.
func (me *XsdGoPkgHasElems_IDPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IDPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IDPSSODescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RoleDescriptor struct {
	RoleDescriptors []*TRoleDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RoleDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RoleDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RoleDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RoleDescriptor instance.
func (me *XsdGoPkgHasElems_RoleDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RoleDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RoleDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssertionConsumerService struct {
	AssertionConsumerServices []*TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionConsumerService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssertionConsumerService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssertionConsumerService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssertionConsumerService instance.
func (me *XsdGoPkgHasElems_AssertionConsumerService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssertionConsumerService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssertionConsumerServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ServiceDescription struct {
	ServiceDescriptions []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ServiceDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ServiceDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ServiceDescription instance.
func (me *XsdGoPkgHasElems_ServiceDescription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ServiceDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ServiceDescriptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_IsRequired_XsdtBoolean_ struct {
	IsRequired xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:metadata isRequired,attr"`
}

type TRequestedAttributeType struct {
	saml.TAttributeType

	XsdGoPkgHasAttr_IsRequired_XsdtBoolean_
}

//	If the WalkHandlers.TRequestedAttributeType function is not nil (ie. was set by outside code), calls it with this TRequestedAttributeType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TRequestedAttributeType instance.
func (me *TRequestedAttributeType) Walk() (err error) {
	if fn := WalkHandlers.TRequestedAttributeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestedAttribute struct {
	RequestedAttributes []*TRequestedAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RequestedAttribute"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestedAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestedAttribute instance.
func (me *XsdGoPkgHasElems_RequestedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RequestedAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ServiceName struct {
	ServiceNames []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ServiceName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ServiceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ServiceName instance.
func (me *XsdGoPkgHasElems_ServiceName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ServiceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ServiceNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAttributeConsumingServiceType struct {
	XsdGoPkgHasElems_ServiceName

	XsdGoPkgHasElems_ServiceDescription

	XsdGoPkgHasElems_RequestedAttribute

	XsdGoPkgHasAttr_Index_XsdtUnsignedShort_

	XsdGoPkgHasAttr_IsDefault_XsdtBoolean_
}

//	If the WalkHandlers.TAttributeConsumingServiceType function is not nil (ie. was set by outside code), calls it with this TAttributeConsumingServiceType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TAttributeConsumingServiceType instance.
func (me *TAttributeConsumingServiceType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeConsumingServiceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ServiceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ServiceDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequestedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttributeConsumingService struct {
	AttributeConsumingServices []*TAttributeConsumingServiceType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeConsumingService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttributeConsumingService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttributeConsumingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttributeConsumingService instance.
func (me *XsdGoPkgHasElems_AttributeConsumingService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttributeConsumingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeConsumingServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_AuthnRequestsSigned_XsdtBoolean_ struct {
	AuthnRequestsSigned xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnRequestsSigned,attr"`
}

type XsdGoPkgHasAttr_WantAssertionsSigned_XsdtBoolean_ struct {
	WantAssertionsSigned xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:metadata WantAssertionsSigned,attr"`
}

type TSPSSODescriptorType struct {
	XsdGoPkgHasAttr_AuthnRequestsSigned_XsdtBoolean_

	XsdGoPkgHasAttr_WantAssertionsSigned_XsdtBoolean_

	TSSODescriptorType

	XsdGoPkgHasElems_AssertionConsumerService

	XsdGoPkgHasElems_AttributeConsumingService
}

//	If the WalkHandlers.TSPSSODescriptorType function is not nil (ie. was set by outside code), calls it with this TSPSSODescriptorType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TSPSSODescriptorType instance.
func (me *TSPSSODescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TSPSSODescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSSODescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssertionConsumerService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AttributeConsumingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SPSSODescriptor struct {
	SPSSODescriptors []*TSPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SPSSODescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SPSSODescriptor instance.
func (me *XsdGoPkgHasElems_SPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SPSSODescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthnQueryService struct {
	AuthnQueryServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnQueryService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthnQueryService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthnQueryService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthnQueryService instance.
func (me *XsdGoPkgHasElems_AuthnQueryService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthnQueryService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnQueryServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAuthnAuthorityDescriptorType struct {
	TRoleDescriptorType

	XsdGoPkgHasElems_AuthnQueryService

	XsdGoPkgHasElems_AssertionIDRequestService

	XsdGoPkgHasElems_NameIDFormat
}

//	If the WalkHandlers.TAuthnAuthorityDescriptorType function is not nil (ie. was set by outside code), calls it with this TAuthnAuthorityDescriptorType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TAuthnAuthorityDescriptorType instance.
func (me *TAuthnAuthorityDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnAuthorityDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AuthnQueryService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthnAuthorityDescriptor struct {
	AuthnAuthorityDescriptors []*TAuthnAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnAuthorityDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthnAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthnAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthnAuthorityDescriptor instance.
func (me *XsdGoPkgHasElems_AuthnAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthnAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnAuthorityDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthzService struct {
	AuthzServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthzService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthzService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthzService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthzService instance.
func (me *XsdGoPkgHasElems_AuthzService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthzService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthzServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPDPDescriptorType struct {
	TRoleDescriptorType

	XsdGoPkgHasElems_AuthzService

	XsdGoPkgHasElems_AssertionIDRequestService

	XsdGoPkgHasElems_NameIDFormat
}

//	If the WalkHandlers.TPDPDescriptorType function is not nil (ie. was set by outside code), calls it with this TPDPDescriptorType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPDPDescriptorType instance.
func (me *TPDPDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TPDPDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AuthzService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PDPDescriptor struct {
	PDPDescriptors []*TPDPDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata PDPDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PDPDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PDPDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PDPDescriptor instance.
func (me *XsdGoPkgHasElems_PDPDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PDPDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PDPDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Namespace_XsdtAnyURI_ struct {
	Namespace xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata namespace,attr"`
}

type TAdditionalMetadataLocationType struct {
	XsdGoPkgHasAnyURICdata

	XsdGoPkgHasAttr_Namespace_XsdtAnyURI_
}

//	If the WalkHandlers.TAdditionalMetadataLocationType function is not nil (ie. was set by outside code), calls it with this TAdditionalMetadataLocationType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TAdditionalMetadataLocationType instance.
func (me *TAdditionalMetadataLocationType) Walk() (err error) {
	if fn := WalkHandlers.TAdditionalMetadataLocationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AdditionalMetadataLocation struct {
	AdditionalMetadataLocations []*TAdditionalMetadataLocationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AdditionalMetadataLocation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AdditionalMetadataLocation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AdditionalMetadataLocation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AdditionalMetadataLocation instance.
func (me *XsdGoPkgHasElems_AdditionalMetadataLocation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AdditionalMetadataLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AdditionalMetadataLocations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttributeService struct {
	AttributeServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeService"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttributeService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttributeService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttributeService instance.
func (me *XsdGoPkgHasElems_AttributeService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttributeService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAttributeAuthorityDescriptorType struct {
	saml.XsdGoPkgHasElems_Attribute

	TRoleDescriptorType

	XsdGoPkgHasElems_AttributeService

	XsdGoPkgHasElems_AssertionIDRequestService

	XsdGoPkgHasElems_NameIDFormat

	XsdGoPkgHasElems_AttributeProfile
}

//	If the WalkHandlers.TAttributeAuthorityDescriptorType function is not nil (ie. was set by outside code), calls it with this TAttributeAuthorityDescriptorType instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TAttributeAuthorityDescriptorType instance.
func (me *TAttributeAuthorityDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeAuthorityDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AttributeService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AttributeProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttributeAuthorityDescriptor struct {
	AttributeAuthorityDescriptors []*TAttributeAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeAuthorityDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttributeAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttributeAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttributeAuthorityDescriptor instance.
func (me *XsdGoPkgHasElems_AttributeAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttributeAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeAuthorityDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TentityIDType xsdt.AnyURI

//	Since TentityIDType is just a simple String type, this merely sets the current value from the specified string.
func (me *TentityIDType) Set(s string) { (*xsdt.AnyURI)(me).Set(s) }

//	Since TentityIDType is just a simple String type, this merely returns the current string value.
func (me TentityIDType) String() string { return xsdt.AnyURI(me).String() }

//	This convenience method just performs a simple type conversion to TentityIDType's alias type xsdt.AnyURI.
func (me TentityIDType) ToXsdtAnyURI() xsdt.AnyURI { return xsdt.AnyURI(me) }

type XsdGoPkgHasAttr_EntityID_TentityIDType_ struct {
	EntityID TentityIDType `xml:"urn:oasis:names:tc:SAML:2.0:metadata entityID,attr"`
}

type XsdGoPkgHasElems_AffiliateMember struct {
	AffiliateMembers []TentityIDType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliateMember"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AffiliateMember function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AffiliateMember instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AffiliateMember instance.
func (me *XsdGoPkgHasElems_AffiliateMember) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AffiliateMember; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_AffiliationOwnerID_TentityIDType_ struct {
	AffiliationOwnerID TentityIDType `xml:"urn:oasis:names:tc:SAML:2.0:metadata affiliationOwnerID,attr"`
}

type TAffiliationDescriptorType struct {
	ds.XsdGoPkgHasElem_Signature

	XsdGoPkgHasElem_Extensions

	XsdGoPkgHasElems_AffiliateMember

	XsdGoPkgHasElems_KeyDescriptor

	XsdGoPkgHasAttr_ValidUntil_XsdtDateTime_

	XsdGoPkgHasAttr_CacheDuration_XsdtDuration_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_AffiliationOwnerID_TentityIDType_
}

//	If the WalkHandlers.TAffiliationDescriptorType function is not nil (ie. was set by outside code), calls it with this TAffiliationDescriptorType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TAffiliationDescriptorType instance.
func (me *TAffiliationDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TAffiliationDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AffiliateMember.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_KeyDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AffiliationDescriptor struct {
	AffiliationDescriptor *TAffiliationDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliationDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AffiliationDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AffiliationDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AffiliationDescriptor instance.
func (me *XsdGoPkgHasElem_AffiliationDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AffiliationDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AffiliationDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEntityDescriptorType struct {
	XsdGoPkgHasElem_Organization

	XsdGoPkgHasAttr_EntityID_TentityIDType_

	XsdGoPkgHasElems_AttributeAuthorityDescriptor

	XsdGoPkgHasElem_Extensions

	XsdGoPkgHasElem_AffiliationDescriptor

	XsdGoPkgHasAttr_ValidUntil_XsdtDateTime_

	XsdGoPkgHasElems_ContactPerson

	XsdGoPkgHasAttr_CacheDuration_XsdtDuration_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_IDPSSODescriptor

	ds.XsdGoPkgHasElem_Signature

	XsdGoPkgHasElems_AuthnAuthorityDescriptor

	XsdGoPkgHasElems_PDPDescriptor

	XsdGoPkgHasElems_AdditionalMetadataLocation

	XsdGoPkgHasElems_RoleDescriptor

	XsdGoPkgHasElems_SPSSODescriptor
}

//	If the WalkHandlers.TEntityDescriptorType function is not nil (ie. was set by outside code), calls it with this TEntityDescriptorType instance as the single argument. Then calls the Walk() method on 11/16 embed(s) and 0/0 field(s) belonging to this TEntityDescriptorType instance.
func (me *TEntityDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TEntityDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AffiliationDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_IDPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ContactPerson.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalMetadataLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RoleDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AuthnAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PDPDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AttributeAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Organization.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EntityDescriptor struct {
	EntityDescriptors []*TEntityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntityDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EntityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EntityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EntityDescriptor instance.
func (me *XsdGoPkgHasElems_EntityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EntityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EntityDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EntitiesDescriptor struct {
	EntitiesDescriptors []*TEntitiesDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntitiesDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EntitiesDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EntitiesDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EntitiesDescriptor instance.
func (me *XsdGoPkgHasElems_EntitiesDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EntitiesDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata Name,attr"`
}

type TEntitiesDescriptorType struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasElems_EntityDescriptor

	XsdGoPkgHasElems_EntitiesDescriptor

	ds.XsdGoPkgHasElem_Signature

	XsdGoPkgHasElem_Extensions

	XsdGoPkgHasAttr_ValidUntil_XsdtDateTime_

	XsdGoPkgHasAttr_CacheDuration_XsdtDuration_
}

//	If the WalkHandlers.TEntitiesDescriptorType function is not nil (ie. was set by outside code), calls it with this TEntitiesDescriptorType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TEntitiesDescriptorType instance.
func (me *TEntitiesDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TEntitiesDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_EntityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EntitiesDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EntitiesDescriptor struct {
	EntitiesDescriptor *TEntitiesDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntitiesDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EntitiesDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EntitiesDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EntitiesDescriptor instance.
func (me *XsdGoPkgHasElem_EntitiesDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EntitiesDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EntitiesDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EntityDescriptor struct {
	EntityDescriptor *TEntityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntityDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EntityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EntityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EntityDescriptor instance.
func (me *XsdGoPkgHasElem_EntityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EntityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EntityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Organization struct {
	Organizations []*TOrganizationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Organization"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Organization function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Organization instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Organization instance.
func (me *XsdGoPkgHasElems_Organization) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Organization; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Organizations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrganizationName struct {
	OrganizationName *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrganizationName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrganizationName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrganizationName instance.
func (me *XsdGoPkgHasElem_OrganizationName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrganizationName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrganizationName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrganizationDisplayName struct {
	OrganizationDisplayName *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationDisplayName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrganizationDisplayName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrganizationDisplayName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrganizationDisplayName instance.
func (me *XsdGoPkgHasElem_OrganizationDisplayName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrganizationDisplayName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrganizationDisplayName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OrganizationURL struct {
	OrganizationURL *TlocalizedURIType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationURL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OrganizationURL function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrganizationURL instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrganizationURL instance.
func (me *XsdGoPkgHasElem_OrganizationURL) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OrganizationURL; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrganizationURL.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ContactPerson struct {
	ContactPerson *TContactType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ContactPerson"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ContactPerson function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ContactPerson instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ContactPerson instance.
func (me *XsdGoPkgHasElem_ContactPerson) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ContactPerson; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContactPerson.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Company struct {
	Companies []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata Company"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Company function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Company instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Company instance.
func (me *XsdGoPkgHasElems_Company) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Company; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GivenName struct {
	GivenNames []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata GivenName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GivenName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GivenName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GivenName instance.
func (me *XsdGoPkgHasElems_GivenName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GivenName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SurName struct {
	SurNames []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata SurName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SurName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SurName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SurName instance.
func (me *XsdGoPkgHasElems_SurName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SurName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmailAddress struct {
	EmailAddress xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata EmailAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmailAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmailAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EmailAddress instance.
func (me *XsdGoPkgHasElem_EmailAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmailAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TelephoneNumber struct {
	TelephoneNumber xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata TelephoneNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TelephoneNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TelephoneNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TelephoneNumber instance.
func (me *XsdGoPkgHasElem_TelephoneNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TelephoneNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AdditionalMetadataLocation struct {
	AdditionalMetadataLocation *TAdditionalMetadataLocationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AdditionalMetadataLocation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AdditionalMetadataLocation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AdditionalMetadataLocation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AdditionalMetadataLocation instance.
func (me *XsdGoPkgHasElem_AdditionalMetadataLocation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AdditionalMetadataLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AdditionalMetadataLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RoleDescriptor struct {
	RoleDescriptor *TRoleDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RoleDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RoleDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RoleDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RoleDescriptor instance.
func (me *XsdGoPkgHasElem_RoleDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RoleDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RoleDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KeyDescriptor struct {
	KeyDescriptor *TKeyDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata KeyDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KeyDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeyDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_KeyDescriptor instance.
func (me *XsdGoPkgHasElem_KeyDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeyDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EncryptionMethod struct {
	EncryptionMethod xenc.TEncryptionMethodType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EncryptionMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EncryptionMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EncryptionMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EncryptionMethod instance.
func (me *XsdGoPkgHasElem_EncryptionMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EncryptionMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ArtifactResolutionService struct {
	ArtifactResolutionService *TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ArtifactResolutionService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ArtifactResolutionService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ArtifactResolutionService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ArtifactResolutionService instance.
func (me *XsdGoPkgHasElem_ArtifactResolutionService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ArtifactResolutionService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArtifactResolutionService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SingleLogoutService struct {
	SingleLogoutService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleLogoutService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SingleLogoutService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SingleLogoutService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SingleLogoutService instance.
func (me *XsdGoPkgHasElem_SingleLogoutService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SingleLogoutService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SingleLogoutService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ManageNameIDService struct {
	ManageNameIDService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ManageNameIDService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ManageNameIDService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ManageNameIDService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ManageNameIDService instance.
func (me *XsdGoPkgHasElem_ManageNameIDService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ManageNameIDService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ManageNameIDService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NameIDFormat struct {
	NameIDFormat xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDFormat"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NameIDFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NameIDFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NameIDFormat instance.
func (me *XsdGoPkgHasElem_NameIDFormat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NameIDFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IDPSSODescriptor struct {
	IDPSSODescriptor *TIDPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata IDPSSODescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IDPSSODescriptor instance.
func (me *XsdGoPkgHasElem_IDPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IDPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SingleSignOnService struct {
	SingleSignOnService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleSignOnService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SingleSignOnService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SingleSignOnService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SingleSignOnService instance.
func (me *XsdGoPkgHasElem_SingleSignOnService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SingleSignOnService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SingleSignOnService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NameIDMappingService struct {
	NameIDMappingService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDMappingService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NameIDMappingService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NameIDMappingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NameIDMappingService instance.
func (me *XsdGoPkgHasElem_NameIDMappingService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NameIDMappingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDMappingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssertionIDRequestService struct {
	AssertionIDRequestService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionIDRequestService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssertionIDRequestService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssertionIDRequestService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssertionIDRequestService instance.
func (me *XsdGoPkgHasElem_AssertionIDRequestService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssertionIDRequestService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttributeProfile struct {
	AttributeProfile xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeProfile"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttributeProfile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttributeProfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AttributeProfile instance.
func (me *XsdGoPkgHasElem_AttributeProfile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttributeProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SPSSODescriptor struct {
	SPSSODescriptor *TSPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SPSSODescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SPSSODescriptor instance.
func (me *XsdGoPkgHasElem_SPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssertionConsumerService struct {
	AssertionConsumerService *TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionConsumerService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssertionConsumerService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssertionConsumerService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssertionConsumerService instance.
func (me *XsdGoPkgHasElem_AssertionConsumerService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssertionConsumerService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssertionConsumerService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttributeConsumingService struct {
	AttributeConsumingService *TAttributeConsumingServiceType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeConsumingService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttributeConsumingService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttributeConsumingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AttributeConsumingService instance.
func (me *XsdGoPkgHasElem_AttributeConsumingService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttributeConsumingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeConsumingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ServiceName struct {
	ServiceName *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ServiceName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ServiceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ServiceName instance.
func (me *XsdGoPkgHasElem_ServiceName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ServiceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ServiceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ServiceDescription struct {
	ServiceDescription *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceDescription"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ServiceDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ServiceDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ServiceDescription instance.
func (me *XsdGoPkgHasElem_ServiceDescription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ServiceDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ServiceDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestedAttribute struct {
	RequestedAttribute *TRequestedAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RequestedAttribute"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestedAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestedAttribute instance.
func (me *XsdGoPkgHasElem_RequestedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RequestedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthnAuthorityDescriptor struct {
	AuthnAuthorityDescriptor *TAuthnAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnAuthorityDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthnAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthnAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthnAuthorityDescriptor instance.
func (me *XsdGoPkgHasElem_AuthnAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthnAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthnQueryService struct {
	AuthnQueryService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnQueryService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthnQueryService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthnQueryService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthnQueryService instance.
func (me *XsdGoPkgHasElem_AuthnQueryService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthnQueryService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnQueryService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PDPDescriptor struct {
	PDPDescriptor *TPDPDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata PDPDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PDPDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PDPDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PDPDescriptor instance.
func (me *XsdGoPkgHasElem_PDPDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PDPDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PDPDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthzService struct {
	AuthzService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthzService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthzService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthzService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthzService instance.
func (me *XsdGoPkgHasElem_AuthzService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthzService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthzService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttributeAuthorityDescriptor struct {
	AttributeAuthorityDescriptor *TAttributeAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeAuthorityDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttributeAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttributeAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AttributeAuthorityDescriptor instance.
func (me *XsdGoPkgHasElem_AttributeAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttributeAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttributeService struct {
	AttributeService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeService"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttributeService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttributeService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AttributeService instance.
func (me *XsdGoPkgHasElem_AttributeService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttributeService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AffiliationDescriptor struct {
	AffiliationDescriptors []*TAffiliationDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliationDescriptor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AffiliationDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AffiliationDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AffiliationDescriptor instance.
func (me *XsdGoPkgHasElems_AffiliationDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AffiliationDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AffiliationDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AffiliateMember struct {
	AffiliateMember TentityIDType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliateMember"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AffiliateMember function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AffiliateMember instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AffiliateMember instance.
func (me *XsdGoPkgHasElem_AffiliateMember) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AffiliateMember; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 102 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 102 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElems_OrganizationName             func(*XsdGoPkgHasElems_OrganizationName, bool) error
	TRoleDescriptorType                           func(*TRoleDescriptorType, bool) error
	TSPSSODescriptorType                          func(*TSPSSODescriptorType, bool) error
	XsdGoPkgHasElems_AdditionalMetadataLocation   func(*XsdGoPkgHasElems_AdditionalMetadataLocation, bool) error
	XsdGoPkgHasElems_EntityDescriptor             func(*XsdGoPkgHasElems_EntityDescriptor, bool) error
	XsdGoPkgHasElem_SPSSODescriptor               func(*XsdGoPkgHasElem_SPSSODescriptor, bool) error
	XsdGoPkgHasElem_SingleSignOnService           func(*XsdGoPkgHasElem_SingleSignOnService, bool) error
	XsdGoPkgHasElems_Extensions                   func(*XsdGoPkgHasElems_Extensions, bool) error
	XsdGoPkgHasElems_NameIDFormat                 func(*XsdGoPkgHasElems_NameIDFormat, bool) error
	XsdGoPkgHasElem_Company                       func(*XsdGoPkgHasElem_Company, bool) error
	TKeyDescriptorType                            func(*TKeyDescriptorType, bool) error
	XsdGoPkgHasElems_ServiceDescription           func(*XsdGoPkgHasElems_ServiceDescription, bool) error
	TAuthnAuthorityDescriptorType                 func(*TAuthnAuthorityDescriptorType, bool) error
	XsdGoPkgHasElems_Company                      func(*XsdGoPkgHasElems_Company, bool) error
	XsdGoPkgHasElems_AffiliationDescriptor        func(*XsdGoPkgHasElems_AffiliationDescriptor, bool) error
	TEndpointType                                 func(*TEndpointType, bool) error
	XsdGoPkgHasElems_ContactPerson                func(*XsdGoPkgHasElems_ContactPerson, bool) error
	XsdGoPkgHasElems_ArtifactResolutionService    func(*XsdGoPkgHasElems_ArtifactResolutionService, bool) error
	XsdGoPkgHasElems_IDPSSODescriptor             func(*XsdGoPkgHasElems_IDPSSODescriptor, bool) error
	XsdGoPkgHasElems_PDPDescriptor                func(*XsdGoPkgHasElems_PDPDescriptor, bool) error
	XsdGoPkgHasElem_OrganizationName              func(*XsdGoPkgHasElem_OrganizationName, bool) error
	XsdGoPkgHasElem_EncryptionMethod              func(*XsdGoPkgHasElem_EncryptionMethod, bool) error
	XsdGoPkgHasElems_KeyDescriptor                func(*XsdGoPkgHasElems_KeyDescriptor, bool) error
	XsdGoPkgHasElems_NameIDMappingService         func(*XsdGoPkgHasElems_NameIDMappingService, bool) error
	XsdGoPkgHasElems_RoleDescriptor               func(*XsdGoPkgHasElems_RoleDescriptor, bool) error
	TAttributeConsumingServiceType                func(*TAttributeConsumingServiceType, bool) error
	XsdGoPkgHasElem_ContactPerson                 func(*XsdGoPkgHasElem_ContactPerson, bool) error
	XsdGoPkgHasElem_IDPSSODescriptor              func(*XsdGoPkgHasElem_IDPSSODescriptor, bool) error
	TExtensionsType                               func(*TExtensionsType, bool) error
	XsdGoPkgHasElem_Organization                  func(*XsdGoPkgHasElem_Organization, bool) error
	TEntitiesDescriptorType                       func(*TEntitiesDescriptorType, bool) error
	XsdGoPkgHasElems_Organization                 func(*XsdGoPkgHasElems_Organization, bool) error
	XsdGoPkgHasElem_AssertionIDRequestService     func(*XsdGoPkgHasElem_AssertionIDRequestService, bool) error
	XsdGoPkgHasElems_TelephoneNumber              func(*XsdGoPkgHasElems_TelephoneNumber, bool) error
	XsdGoPkgHasElems_AssertionConsumerService     func(*XsdGoPkgHasElems_AssertionConsumerService, bool) error
	TAffiliationDescriptorType                    func(*TAffiliationDescriptorType, bool) error
	XsdGoPkgHasElem_OrganizationURL               func(*XsdGoPkgHasElem_OrganizationURL, bool) error
	XsdGoPkgHasElems_GivenName                    func(*XsdGoPkgHasElems_GivenName, bool) error
	XsdGoPkgHasElem_ArtifactResolutionService     func(*XsdGoPkgHasElem_ArtifactResolutionService, bool) error
	XsdGoPkgHasElem_AttributeProfile              func(*XsdGoPkgHasElem_AttributeProfile, bool) error
	XsdGoPkgHasElems_OrganizationDisplayName      func(*XsdGoPkgHasElems_OrganizationDisplayName, bool) error
	XsdGoPkgHasElems_AuthnQueryService            func(*XsdGoPkgHasElems_AuthnQueryService, bool) error
	XsdGoPkgHasElem_PDPDescriptor                 func(*XsdGoPkgHasElem_PDPDescriptor, bool) error
	XsdGoPkgHasElem_AuthzService                  func(*XsdGoPkgHasElem_AuthzService, bool) error
	XsdGoPkgHasElem_AttributeService              func(*XsdGoPkgHasElem_AttributeService, bool) error
	XsdGoPkgHasElems_ManageNameIDService          func(*XsdGoPkgHasElems_ManageNameIDService, bool) error
	XsdGoPkgHasElem_GivenName                     func(*XsdGoPkgHasElem_GivenName, bool) error
	TIndexedEndpointType                          func(*TIndexedEndpointType, bool) error
	TIDPSSODescriptorType                         func(*TIDPSSODescriptorType, bool) error
	XsdGoPkgHasElem_AdditionalMetadataLocation    func(*XsdGoPkgHasElem_AdditionalMetadataLocation, bool) error
	XsdGoPkgHasElem_AssertionConsumerService      func(*XsdGoPkgHasElem_AssertionConsumerService, bool) error
	XsdGoPkgHasElem_ServiceName                   func(*XsdGoPkgHasElem_ServiceName, bool) error
	XsdGoPkgHasCdata                              func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_SurName                       func(*XsdGoPkgHasElem_SurName, bool) error
	XsdGoPkgHasElems_EncryptionMethod             func(*XsdGoPkgHasElems_EncryptionMethod, bool) error
	XsdGoPkgHasElems_EntitiesDescriptor           func(*XsdGoPkgHasElems_EntitiesDescriptor, bool) error
	XsdGoPkgHasElem_RoleDescriptor                func(*XsdGoPkgHasElem_RoleDescriptor, bool) error
	XsdGoPkgHasElem_ManageNameIDService           func(*XsdGoPkgHasElem_ManageNameIDService, bool) error
	XsdGoPkgHasElem_NameIDMappingService          func(*XsdGoPkgHasElem_NameIDMappingService, bool) error
	XsdGoPkgHasElems_SingleLogoutService          func(*XsdGoPkgHasElems_SingleLogoutService, bool) error
	XsdGoPkgHasElem_EntitiesDescriptor            func(*XsdGoPkgHasElem_EntitiesDescriptor, bool) error
	XsdGoPkgHasElem_OrganizationDisplayName       func(*XsdGoPkgHasElem_OrganizationDisplayName, bool) error
	XsdGoPkgHasElem_SingleLogoutService           func(*XsdGoPkgHasElem_SingleLogoutService, bool) error
	XsdGoPkgHasElem_AffiliateMember               func(*XsdGoPkgHasElem_AffiliateMember, bool) error
	TlocalizedNameType                            func(*TlocalizedNameType, bool) error
	XsdGoPkgHasElems_AuthzService                 func(*XsdGoPkgHasElems_AuthzService, bool) error
	XsdGoPkgHasElem_AffiliationDescriptor         func(*XsdGoPkgHasElem_AffiliationDescriptor, bool) error
	XsdGoPkgHasElem_AttributeConsumingService     func(*XsdGoPkgHasElem_AttributeConsumingService, bool) error
	XsdGoPkgHasElem_RequestedAttribute            func(*XsdGoPkgHasElem_RequestedAttribute, bool) error
	XsdGoPkgHasElems_EmailAddress                 func(*XsdGoPkgHasElems_EmailAddress, bool) error
	TSSODescriptorType                            func(*TSSODescriptorType, bool) error
	XsdGoPkgHasElems_AffiliateMember              func(*XsdGoPkgHasElems_AffiliateMember, bool) error
	XsdGoPkgHasElem_TelephoneNumber               func(*XsdGoPkgHasElem_TelephoneNumber, bool) error
	XsdGoPkgHasElem_NameIDFormat                  func(*XsdGoPkgHasElem_NameIDFormat, bool) error
	XsdGoPkgHasElem_AuthnQueryService             func(*XsdGoPkgHasElem_AuthnQueryService, bool) error
	XsdGoPkgHasElems_OrganizationURL              func(*XsdGoPkgHasElems_OrganizationURL, bool) error
	TOrganizationType                             func(*TOrganizationType, bool) error
	XsdGoPkgHasElems_AttributeProfile             func(*XsdGoPkgHasElems_AttributeProfile, bool) error
	TPDPDescriptorType                            func(*TPDPDescriptorType, bool) error
	XsdGoPkgHasElem_KeyDescriptor                 func(*XsdGoPkgHasElem_KeyDescriptor, bool) error
	XsdGoPkgHasElem_AuthnAuthorityDescriptor      func(*XsdGoPkgHasElem_AuthnAuthorityDescriptor, bool) error
	XsdGoPkgHasElems_ServiceName                  func(*XsdGoPkgHasElems_ServiceName, bool) error
	XsdGoPkgHasElems_AuthnAuthorityDescriptor     func(*XsdGoPkgHasElems_AuthnAuthorityDescriptor, bool) error
	TAdditionalMetadataLocationType               func(*TAdditionalMetadataLocationType, bool) error
	TAttributeAuthorityDescriptorType             func(*TAttributeAuthorityDescriptorType, bool) error
	XsdGoPkgHasElems_AttributeAuthorityDescriptor func(*XsdGoPkgHasElems_AttributeAuthorityDescriptor, bool) error
	XsdGoPkgHasElem_EmailAddress                  func(*XsdGoPkgHasElem_EmailAddress, bool) error
	XsdGoPkgHasElems_SPSSODescriptor              func(*XsdGoPkgHasElems_SPSSODescriptor, bool) error
	XsdGoPkgHasElem_Extensions                    func(*XsdGoPkgHasElem_Extensions, bool) error
	TContactType                                  func(*TContactType, bool) error
	TlocalizedURIType                             func(*TlocalizedURIType, bool) error
	XsdGoPkgHasElems_SingleSignOnService          func(*XsdGoPkgHasElems_SingleSignOnService, bool) error
	XsdGoPkgHasElems_AssertionIDRequestService    func(*XsdGoPkgHasElems_AssertionIDRequestService, bool) error
	TRequestedAttributeType                       func(*TRequestedAttributeType, bool) error
	XsdGoPkgHasElems_AttributeConsumingService    func(*XsdGoPkgHasElems_AttributeConsumingService, bool) error
	XsdGoPkgHasElems_AttributeService             func(*XsdGoPkgHasElems_AttributeService, bool) error
	TEntityDescriptorType                         func(*TEntityDescriptorType, bool) error
	XsdGoPkgHasElem_EntityDescriptor              func(*XsdGoPkgHasElem_EntityDescriptor, bool) error
	XsdGoPkgHasElems_SurName                      func(*XsdGoPkgHasElems_SurName, bool) error
	XsdGoPkgHasElem_AttributeAuthorityDescriptor  func(*XsdGoPkgHasElem_AttributeAuthorityDescriptor, bool) error
	XsdGoPkgHasElems_RequestedAttribute           func(*XsdGoPkgHasElems_RequestedAttribute, bool) error
	XsdGoPkgHasElem_ServiceDescription            func(*XsdGoPkgHasElem_ServiceDescription, bool) error
}
