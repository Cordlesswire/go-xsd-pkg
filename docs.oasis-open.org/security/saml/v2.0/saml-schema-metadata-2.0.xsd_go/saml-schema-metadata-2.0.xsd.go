// Package goSamlMetadata20 : autogenerated by go-xsd
package goSamlMetadata20

//	Document identifier: saml-schema-metadata-2.0 Location: http://docs.oasis-open.org/security/saml/v2.0/ Revision history: V2.0 (March, 2005): Schema for SAML metadata, first published in SAML 2.0.

import (
	saml "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd_go"
	xml "github.com/miracl/go-xsd-pkg/www.w3.org/2001/xml.xsd_go"
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xenc "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// TExtensionsType defines TExtensionsType
type TExtensionsType struct {
}

// Walk : if the WalkHandlers.TExtensionsType function is not nil (ie. was set by outside code), calls it with this TExtensionsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TExtensionsType instance.
func (me *TExtensionsType) Walk() (err error) {
	if fn := WalkHandlers.TExtensionsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemExtensions defines XsdGoPkgHasElemExtensions
type XsdGoPkgHasElemExtensions struct {
	Extensions *TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Extensions"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemExtensions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemExtensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemExtensions instance.
func (me *XsdGoPkgHasElemExtensions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemExtensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsExtensions defines XsdGoPkgHasElemsExtensions
type XsdGoPkgHasElemsExtensions struct {
	Extensionses []*TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Extensions"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsExtensions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsExtensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsExtensions instance.
func (me *XsdGoPkgHasElemsExtensions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsExtensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extensionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrBindingXsdtAnyURI defines attribute BindingXsdtAnyURI
type XsdGoPkgHasAttrBindingXsdtAnyURI struct {
	Binding xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata Binding,attr"`
}

// XsdGoPkgHasAttrLocationXsdtAnyURI defines attribute LocationXsdtAnyURI
type XsdGoPkgHasAttrLocationXsdtAnyURI struct {
	Location xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata Location,attr"`
}

// XsdGoPkgHasAttrResponseLocationXsdtAnyURI defines attribute ResponseLocationXsdtAnyURI
type XsdGoPkgHasAttrResponseLocationXsdtAnyURI struct {
	ResponseLocation xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata ResponseLocation,attr"`
}

// TEndpointType defines TEndpointType
type TEndpointType struct {
	XsdGoPkgHasAttrBindingXsdtAnyURI

	XsdGoPkgHasAttrLocationXsdtAnyURI

	XsdGoPkgHasAttrResponseLocationXsdtAnyURI
}

// Walk : if the WalkHandlers.TEndpointType function is not nil (ie. was set by outside code), calls it with this TEndpointType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TEndpointType instance.
func (me *TEndpointType) Walk() (err error) {
	if fn := WalkHandlers.TEndpointType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSingleLogoutService defines XsdGoPkgHasElemsSingleLogoutService
type XsdGoPkgHasElemsSingleLogoutService struct {
	SingleLogoutServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleLogoutService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSingleLogoutService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSingleLogoutService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSingleLogoutService instance.
func (me *XsdGoPkgHasElemsSingleLogoutService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSingleLogoutService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SingleLogoutServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsManageNameIDService defines XsdGoPkgHasElemsManageNameIDService
type XsdGoPkgHasElemsManageNameIDService struct {
	ManageNameIDServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ManageNameIDService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsManageNameIDService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsManageNameIDService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsManageNameIDService instance.
func (me *XsdGoPkgHasElemsManageNameIDService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsManageNameIDService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ManageNameIDServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsNameIDFormat defines XsdGoPkgHasElemsNameIDFormat
type XsdGoPkgHasElemsNameIDFormat struct {
	NameIDFormats []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDFormat"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsNameIDFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsNameIDFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsNameIDFormat instance.
func (me *XsdGoPkgHasElemsNameIDFormat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsNameIDFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemCompany defines XsdGoPkgHasElemCompany
type XsdGoPkgHasElemCompany struct {
	Company xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata Company"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemCompany function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemCompany instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemCompany instance.
func (me *XsdGoPkgHasElemCompany) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemCompany; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemGivenName defines XsdGoPkgHasElemGivenName
type XsdGoPkgHasElemGivenName struct {
	GivenName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata GivenName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemGivenName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemGivenName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemGivenName instance.
func (me *XsdGoPkgHasElemGivenName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemGivenName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSurName defines XsdGoPkgHasElemSurName
type XsdGoPkgHasElemSurName struct {
	SurName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata SurName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSurName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSurName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemSurName instance.
func (me *XsdGoPkgHasElemSurName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSurName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEmailAddress defines XsdGoPkgHasElemsEmailAddress
type XsdGoPkgHasElemsEmailAddress struct {
	EmailAddresses []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata EmailAddress"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEmailAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEmailAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEmailAddress instance.
func (me *XsdGoPkgHasElemsEmailAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEmailAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTelephoneNumber defines XsdGoPkgHasElemsTelephoneNumber
type XsdGoPkgHasElemsTelephoneNumber struct {
	TelephoneNumbers []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata TelephoneNumber"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTelephoneNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTelephoneNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTelephoneNumber instance.
func (me *XsdGoPkgHasElemsTelephoneNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTelephoneNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TContactTypeType defines TContactTypeType
type TContactTypeType xsdt.String

// IsTechnical : Returns true if the value of this enumerated TContactTypeType is "technical".
func (me TContactTypeType) IsTechnical() bool { return me.String() == "technical" }

// IsSupport : Returns true if the value of this enumerated TContactTypeType is "support".
func (me TContactTypeType) IsSupport() bool { return me.String() == "support" }

// IsAdministrative : Returns true if the value of this enumerated TContactTypeType is "administrative".
func (me TContactTypeType) IsAdministrative() bool { return me.String() == "administrative" }

// IsBilling : Returns true if the value of this enumerated TContactTypeType is "billing".
func (me TContactTypeType) IsBilling() bool { return me.String() == "billing" }

// IsOther : Returns true if the value of this enumerated TContactTypeType is "other".
func (me TContactTypeType) IsOther() bool { return me.String() == "other" }

// Set : Since TContactTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TContactTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TContactTypeType is just a simple String type, this merely returns the current string value.
func (me TContactTypeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TContactTypeType's alias type xsdt.String.
func (me TContactTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrContactTypeTContactTypeType defines attribute ContactTypeTContactTypeType
type XsdGoPkgHasAttrContactTypeTContactTypeType struct {
	ContactType TContactTypeType `xml:"urn:oasis:names:tc:SAML:2.0:metadata contactType,attr"`
}

// TContactType defines TContactType
type TContactType struct {
	XsdGoPkgHasElemGivenName

	XsdGoPkgHasElemSurName

	XsdGoPkgHasElemsEmailAddress

	XsdGoPkgHasElemsTelephoneNumber

	XsdGoPkgHasAttrContactTypeTContactTypeType

	XsdGoPkgHasElemExtensions

	XsdGoPkgHasElemCompany
}

// Walk : if the WalkHandlers.TContactType function is not nil (ie. was set by outside code), calls it with this TContactType instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TContactType instance.
func (me *TContactType) Walk() (err error) {
	if fn := WalkHandlers.TContactType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemGivenName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSurName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEmailAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTelephoneNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemCompany.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsContactPerson defines XsdGoPkgHasElemsContactPerson
type XsdGoPkgHasElemsContactPerson struct {
	ContactPersons []*TContactType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ContactPerson"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsContactPerson function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsContactPerson instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsContactPerson instance.
func (me *XsdGoPkgHasElemsContactPerson) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsContactPerson; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContactPersons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrIDXsdtID defines attribute IdXsdtId
type XsdGoPkgHasAttrIDXsdtID struct {
	ID xsdt.ID `xml:"urn:oasis:names:tc:SAML:2.0:metadata ID,attr"`
}

// XsdGoPkgHasAttrValidUntilXsdtDateTime defines attribute ValidUntilXsdtDateTime
type XsdGoPkgHasAttrValidUntilXsdtDateTime struct {
	ValidUntil xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:metadata validUntil,attr"`
}

// XsdGoPkgHasAttrCacheDurationXsdtDuration defines attribute CacheDurationXsdtDuration
type XsdGoPkgHasAttrCacheDurationXsdtDuration struct {
	CacheDuration xsdt.Duration `xml:"urn:oasis:names:tc:SAML:2.0:metadata cacheDuration,attr"`
}

// TanyURIListType defines TanyURIListType
type TanyURIListType xsdt.String

// Values : TanyURIListType declares a String containing a whitespace-separated list of xsdt.AnyURI values. This Values() method creates and returns a slice of all elements in that list.
func (me TanyURIListType) Values() (list []xsdt.AnyURI) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.AnyURI, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

// Set : Since TanyURIListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TanyURIListType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TanyURIListType is just a simple String type, this merely returns the current string value.
func (me TanyURIListType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TanyURIListType's alias type xsdt.String.
func (me TanyURIListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrProtocolSupportEnumerationTanyURIListType defines attribute ProtocolSupportEnumerationTanyURIListType
type XsdGoPkgHasAttrProtocolSupportEnumerationTanyURIListType struct {
	ProtocolSupportEnumeration TanyURIListType `xml:"urn:oasis:names:tc:SAML:2.0:metadata protocolSupportEnumeration,attr"`
}

// XsdGoPkgHasElemsEncryptionMethod defines XsdGoPkgHasElemsEncryptionMethod
type XsdGoPkgHasElemsEncryptionMethod struct {
	EncryptionMethods []xenc.TEncryptionMethodType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EncryptionMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEncryptionMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEncryptionMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEncryptionMethod instance.
func (me *XsdGoPkgHasElemsEncryptionMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEncryptionMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeyTypes defines TKeyTypes
type TKeyTypes xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TKeyTypes's alias type xsdt.String.
func (me TKeyTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsEncryption : Returns true if the value of this enumerated TKeyTypes is "encryption".
func (me TKeyTypes) IsEncryption() bool { return me.String() == "encryption" }

// IsSigning : Returns true if the value of this enumerated TKeyTypes is "signing".
func (me TKeyTypes) IsSigning() bool { return me.String() == "signing" }

// Set : Since TKeyTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TKeyTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TKeyTypes is just a simple String type, this merely returns the current string value.
func (me TKeyTypes) String() string { return xsdt.String(me).String() }

// XsdGoPkgHasAttrUseTKeyTypes defines attribute UseTKeyTypes
type XsdGoPkgHasAttrUseTKeyTypes struct {
	Use TKeyTypes `xml:"urn:oasis:names:tc:SAML:2.0:metadata use,attr"`
}

// TKeyDescriptorType defines TKeyDescriptorType
type TKeyDescriptorType struct {
	ds.XsdGoPkgHasElemKeyInfo

	XsdGoPkgHasElemsEncryptionMethod

	XsdGoPkgHasAttrUseTKeyTypes
}

// Walk : if the WalkHandlers.TKeyDescriptorType function is not nil (ie. was set by outside code), calls it with this TKeyDescriptorType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TKeyDescriptorType instance.
func (me *TKeyDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TKeyDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsEncryptionMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsKeyDescriptor defines XsdGoPkgHasElemsKeyDescriptor
type XsdGoPkgHasElemsKeyDescriptor struct {
	KeyDescriptors []*TKeyDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata KeyDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsKeyDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsKeyDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsKeyDescriptor instance.
func (me *XsdGoPkgHasElemsKeyDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsKeyDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAnyURICdata defines XsdGoPkgHasAnyURICdata
type XsdGoPkgHasAnyURICdata struct {
	XsdGoPkgCDATA xsdt.AnyURI `xml:",chardata"`
}

// TlocalizedURIType defines TlocalizedURIType
type TlocalizedURIType struct {
	XsdGoPkgHasAnyURICdata

	xml.XsdGoPkgHasAttrLang
}

// Walk : if the WalkHandlers.TlocalizedURIType function is not nil (ie. was set by outside code), calls it with this TlocalizedURIType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TlocalizedURIType instance.
func (me *TlocalizedURIType) Walk() (err error) {
	if fn := WalkHandlers.TlocalizedURIType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsOrganizationURL defines XsdGoPkgHasElemsOrganizationURL
type XsdGoPkgHasElemsOrganizationURL struct {
	OrganizationURLs []*TlocalizedURIType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationURL"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsOrganizationURL function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsOrganizationURL instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsOrganizationURL instance.
func (me *XsdGoPkgHasElemsOrganizationURL) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsOrganizationURL; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrganizationURLs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TlocalizedNameType defines TlocalizedNameType
type TlocalizedNameType struct {
	XsdGoPkgHasCdata

	xml.XsdGoPkgHasAttrLang
}

// Walk : if the WalkHandlers.TlocalizedNameType function is not nil (ie. was set by outside code), calls it with this TlocalizedNameType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TlocalizedNameType instance.
func (me *TlocalizedNameType) Walk() (err error) {
	if fn := WalkHandlers.TlocalizedNameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsOrganizationName defines XsdGoPkgHasElemsOrganizationName
type XsdGoPkgHasElemsOrganizationName struct {
	OrganizationNames []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsOrganizationName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsOrganizationName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsOrganizationName instance.
func (me *XsdGoPkgHasElemsOrganizationName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsOrganizationName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrganizationNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsOrganizationDisplayName defines XsdGoPkgHasElemsOrganizationDisplayName
type XsdGoPkgHasElemsOrganizationDisplayName struct {
	OrganizationDisplayNames []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationDisplayName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsOrganizationDisplayName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsOrganizationDisplayName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsOrganizationDisplayName instance.
func (me *XsdGoPkgHasElemsOrganizationDisplayName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsOrganizationDisplayName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrganizationDisplayNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TOrganizationType defines TOrganizationType
type TOrganizationType struct {
	XsdGoPkgHasElemsOrganizationDisplayName

	XsdGoPkgHasElemsOrganizationURL

	XsdGoPkgHasElemExtensions

	XsdGoPkgHasElemsOrganizationName
}

// Walk : if the WalkHandlers.TOrganizationType function is not nil (ie. was set by outside code), calls it with this TOrganizationType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TOrganizationType instance.
func (me *TOrganizationType) Walk() (err error) {
	if fn := WalkHandlers.TOrganizationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsOrganizationName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsOrganizationDisplayName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsOrganizationURL.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemOrganization defines XsdGoPkgHasElemOrganization
type XsdGoPkgHasElemOrganization struct {
	Organization *TOrganizationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Organization"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemOrganization function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemOrganization instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemOrganization instance.
func (me *XsdGoPkgHasElemOrganization) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemOrganization; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Organization.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrErrorURLXsdtAnyURI defines attribute ErrorURLXsdtAnyURI
type XsdGoPkgHasAttrErrorURLXsdtAnyURI struct {
	ErrorURL xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata errorURL,attr"`
}

// TRoleDescriptorType defines TRoleDescriptorType
type TRoleDescriptorType struct {
	XsdGoPkgHasElemsContactPerson

	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasElemOrganization

	XsdGoPkgHasAttrErrorURLXsdtAnyURI

	XsdGoPkgHasAttrValidUntilXsdtDateTime

	XsdGoPkgHasAttrCacheDurationXsdtDuration

	XsdGoPkgHasAttrProtocolSupportEnumerationTanyURIListType

	ds.XsdGoPkgHasElemSignature

	XsdGoPkgHasElemExtensions

	XsdGoPkgHasElemsKeyDescriptor
}

// Walk : if the WalkHandlers.TRoleDescriptorType function is not nil (ie. was set by outside code), calls it with this TRoleDescriptorType instance as the single argument. Then calls the Walk() method on 4/10 embed(s) and 0/0 field(s) belonging to this TRoleDescriptorType instance.
func (me *TRoleDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TRoleDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsContactPerson.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsKeyDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemOrganization.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrIndexXsdtUnsignedShort defines attribute IndexXsdtUnsignedShort
type XsdGoPkgHasAttrIndexXsdtUnsignedShort struct {
	Index xsdt.UnsignedShort `xml:"urn:oasis:names:tc:SAML:2.0:metadata index,attr"`
}

// XsdGoPkgHasAttrIsDefaultXsdtBoolean defines attribute IsDefaultXsdtBoolean
type XsdGoPkgHasAttrIsDefaultXsdtBoolean struct {
	IsDefault xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:metadata isDefault,attr"`
}

// TIndexedEndpointType defines TIndexedEndpointType
type TIndexedEndpointType struct {
	TEndpointType

	XsdGoPkgHasAttrIndexXsdtUnsignedShort

	XsdGoPkgHasAttrIsDefaultXsdtBoolean
}

// Walk : if the WalkHandlers.TIndexedEndpointType function is not nil (ie. was set by outside code), calls it with this TIndexedEndpointType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TIndexedEndpointType instance.
func (me *TIndexedEndpointType) Walk() (err error) {
	if fn := WalkHandlers.TIndexedEndpointType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TEndpointType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsArtifactResolutionService defines XsdGoPkgHasElemsArtifactResolutionService
type XsdGoPkgHasElemsArtifactResolutionService struct {
	ArtifactResolutionServices []*TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ArtifactResolutionService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsArtifactResolutionService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsArtifactResolutionService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsArtifactResolutionService instance.
func (me *XsdGoPkgHasElemsArtifactResolutionService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsArtifactResolutionService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArtifactResolutionServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSSODescriptorType defines TSSODescriptorType
type TSSODescriptorType struct {
	XsdGoPkgHasElemsSingleLogoutService

	XsdGoPkgHasElemsManageNameIDService

	XsdGoPkgHasElemsNameIDFormat

	TRoleDescriptorType

	XsdGoPkgHasElemsArtifactResolutionService
}

// Walk : if the WalkHandlers.TSSODescriptorType function is not nil (ie. was set by outside code), calls it with this TSSODescriptorType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TSSODescriptorType instance.
func (me *TSSODescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TSSODescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsArtifactResolutionService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSingleLogoutService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsManageNameIDService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsNameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSingleSignOnService defines XsdGoPkgHasElemsSingleSignOnService
type XsdGoPkgHasElemsSingleSignOnService struct {
	SingleSignOnServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleSignOnService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSingleSignOnService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSingleSignOnService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSingleSignOnService instance.
func (me *XsdGoPkgHasElemsSingleSignOnService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSingleSignOnService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SingleSignOnServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsNameIDMappingService defines XsdGoPkgHasElemsNameIDMappingService
type XsdGoPkgHasElemsNameIDMappingService struct {
	NameIDMappingServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDMappingService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsNameIDMappingService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsNameIDMappingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsNameIDMappingService instance.
func (me *XsdGoPkgHasElemsNameIDMappingService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsNameIDMappingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDMappingServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAssertionIDRequestService defines XsdGoPkgHasElemsAssertionIDRequestService
type XsdGoPkgHasElemsAssertionIDRequestService struct {
	AssertionIDRequestServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionIDRequestService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAssertionIDRequestService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAssertionIDRequestService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAssertionIDRequestService instance.
func (me *XsdGoPkgHasElemsAssertionIDRequestService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAssertionIDRequestService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssertionIDRequestServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAttributeProfile defines XsdGoPkgHasElemsAttributeProfile
type XsdGoPkgHasElemsAttributeProfile struct {
	AttributeProfiles []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeProfile"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAttributeProfile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAttributeProfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAttributeProfile instance.
func (me *XsdGoPkgHasElemsAttributeProfile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAttributeProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrWantAuthnRequestsSignedXsdtBoolean defines attribute WantAuthnRequestsSignedXsdtBoolean
type XsdGoPkgHasAttrWantAuthnRequestsSignedXsdtBoolean struct {
	WantAuthnRequestsSigned xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:metadata WantAuthnRequestsSigned,attr"`
}

// TIDPSSODescriptorType defines TIDPSSODescriptorType
type TIDPSSODescriptorType struct {
	XsdGoPkgHasElemsAssertionIDRequestService

	XsdGoPkgHasElemsAttributeProfile

	saml.XsdGoPkgHasElemsAttribute

	XsdGoPkgHasAttrWantAuthnRequestsSignedXsdtBoolean

	TSSODescriptorType

	XsdGoPkgHasElemsSingleSignOnService

	XsdGoPkgHasElemsNameIDMappingService
}

// Walk : if the WalkHandlers.TIDPSSODescriptorType function is not nil (ie. was set by outside code), calls it with this TIDPSSODescriptorType instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TIDPSSODescriptorType instance.
func (me *TIDPSSODescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TIDPSSODescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAttributeProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TSSODescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSingleSignOnService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsNameIDMappingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsIDPSSODescriptor defines XsdGoPkgHasElemsIDPSSODescriptor
type XsdGoPkgHasElemsIDPSSODescriptor struct {
	IDPSSODescriptors []*TIDPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata IDPSSODescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsIDPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsIDPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsIDPSSODescriptor instance.
func (me *XsdGoPkgHasElemsIDPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsIDPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IDPSSODescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRoleDescriptor defines XsdGoPkgHasElemsRoleDescriptor
type XsdGoPkgHasElemsRoleDescriptor struct {
	RoleDescriptors []*TRoleDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RoleDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRoleDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRoleDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRoleDescriptor instance.
func (me *XsdGoPkgHasElemsRoleDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRoleDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RoleDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAssertionConsumerService defines XsdGoPkgHasElemsAssertionConsumerService
type XsdGoPkgHasElemsAssertionConsumerService struct {
	AssertionConsumerServices []*TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionConsumerService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAssertionConsumerService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAssertionConsumerService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAssertionConsumerService instance.
func (me *XsdGoPkgHasElemsAssertionConsumerService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAssertionConsumerService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssertionConsumerServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsServiceDescription defines XsdGoPkgHasElemsServiceDescription
type XsdGoPkgHasElemsServiceDescription struct {
	ServiceDescriptions []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceDescription"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsServiceDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsServiceDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsServiceDescription instance.
func (me *XsdGoPkgHasElemsServiceDescription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsServiceDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ServiceDescriptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrIsRequiredXsdtBoolean defines attribute IsRequiredXsdtBoolean
type XsdGoPkgHasAttrIsRequiredXsdtBoolean struct {
	IsRequired xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:metadata isRequired,attr"`
}

// TRequestedAttributeType defines TRequestedAttributeType
type TRequestedAttributeType struct {
	saml.TAttributeType

	XsdGoPkgHasAttrIsRequiredXsdtBoolean
}

// Walk : if the WalkHandlers.TRequestedAttributeType function is not nil (ie. was set by outside code), calls it with this TRequestedAttributeType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TRequestedAttributeType instance.
func (me *TRequestedAttributeType) Walk() (err error) {
	if fn := WalkHandlers.TRequestedAttributeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRequestedAttribute defines XsdGoPkgHasElemsRequestedAttribute
type XsdGoPkgHasElemsRequestedAttribute struct {
	RequestedAttributes []*TRequestedAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RequestedAttribute"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRequestedAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRequestedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRequestedAttribute instance.
func (me *XsdGoPkgHasElemsRequestedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRequestedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RequestedAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsServiceName defines XsdGoPkgHasElemsServiceName
type XsdGoPkgHasElemsServiceName struct {
	ServiceNames []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsServiceName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsServiceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsServiceName instance.
func (me *XsdGoPkgHasElemsServiceName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsServiceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ServiceNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAttributeConsumingServiceType defines TAttributeConsumingServiceType
type TAttributeConsumingServiceType struct {
	XsdGoPkgHasElemsServiceName

	XsdGoPkgHasElemsServiceDescription

	XsdGoPkgHasElemsRequestedAttribute

	XsdGoPkgHasAttrIndexXsdtUnsignedShort

	XsdGoPkgHasAttrIsDefaultXsdtBoolean
}

// Walk : if the WalkHandlers.TAttributeConsumingServiceType function is not nil (ie. was set by outside code), calls it with this TAttributeConsumingServiceType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TAttributeConsumingServiceType instance.
func (me *TAttributeConsumingServiceType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeConsumingServiceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsServiceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsServiceDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRequestedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAttributeConsumingService defines XsdGoPkgHasElemsAttributeConsumingService
type XsdGoPkgHasElemsAttributeConsumingService struct {
	AttributeConsumingServices []*TAttributeConsumingServiceType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeConsumingService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAttributeConsumingService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAttributeConsumingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAttributeConsumingService instance.
func (me *XsdGoPkgHasElemsAttributeConsumingService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAttributeConsumingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeConsumingServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrAuthnRequestsSignedXsdtBoolean defines attribute AuthnRequestsSignedXsdtBoolean
type XsdGoPkgHasAttrAuthnRequestsSignedXsdtBoolean struct {
	AuthnRequestsSigned xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnRequestsSigned,attr"`
}

// XsdGoPkgHasAttrWantAssertionsSignedXsdtBoolean defines attribute WantAssertionsSignedXsdtBoolean
type XsdGoPkgHasAttrWantAssertionsSignedXsdtBoolean struct {
	WantAssertionsSigned xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:metadata WantAssertionsSigned,attr"`
}

// TSPSSODescriptorType defines TSPSSODescriptorType
type TSPSSODescriptorType struct {
	XsdGoPkgHasAttrAuthnRequestsSignedXsdtBoolean

	XsdGoPkgHasAttrWantAssertionsSignedXsdtBoolean

	TSSODescriptorType

	XsdGoPkgHasElemsAssertionConsumerService

	XsdGoPkgHasElemsAttributeConsumingService
}

// Walk : if the WalkHandlers.TSPSSODescriptorType function is not nil (ie. was set by outside code), calls it with this TSPSSODescriptorType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TSPSSODescriptorType instance.
func (me *TSPSSODescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TSPSSODescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSSODescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAssertionConsumerService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAttributeConsumingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSPSSODescriptor defines XsdGoPkgHasElemsSPSSODescriptor
type XsdGoPkgHasElemsSPSSODescriptor struct {
	SPSSODescriptors []*TSPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SPSSODescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSPSSODescriptor instance.
func (me *XsdGoPkgHasElemsSPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SPSSODescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthnQueryService defines XsdGoPkgHasElemsAuthnQueryService
type XsdGoPkgHasElemsAuthnQueryService struct {
	AuthnQueryServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnQueryService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthnQueryService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthnQueryService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthnQueryService instance.
func (me *XsdGoPkgHasElemsAuthnQueryService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthnQueryService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnQueryServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAuthnAuthorityDescriptorType defines TAuthnAuthorityDescriptorType
type TAuthnAuthorityDescriptorType struct {
	TRoleDescriptorType

	XsdGoPkgHasElemsAuthnQueryService

	XsdGoPkgHasElemsAssertionIDRequestService

	XsdGoPkgHasElemsNameIDFormat
}

// Walk : if the WalkHandlers.TAuthnAuthorityDescriptorType function is not nil (ie. was set by outside code), calls it with this TAuthnAuthorityDescriptorType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TAuthnAuthorityDescriptorType instance.
func (me *TAuthnAuthorityDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnAuthorityDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsNameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAuthnQueryService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthnAuthorityDescriptor defines XsdGoPkgHasElemsAuthnAuthorityDescriptor
type XsdGoPkgHasElemsAuthnAuthorityDescriptor struct {
	AuthnAuthorityDescriptors []*TAuthnAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnAuthorityDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthnAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthnAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthnAuthorityDescriptor instance.
func (me *XsdGoPkgHasElemsAuthnAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthnAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnAuthorityDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthzService defines XsdGoPkgHasElemsAuthzService
type XsdGoPkgHasElemsAuthzService struct {
	AuthzServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthzService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthzService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthzService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthzService instance.
func (me *XsdGoPkgHasElemsAuthzService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthzService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthzServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TPDPDescriptorType defines TPDPDescriptorType
type TPDPDescriptorType struct {
	TRoleDescriptorType

	XsdGoPkgHasElemsAuthzService

	XsdGoPkgHasElemsAssertionIDRequestService

	XsdGoPkgHasElemsNameIDFormat
}

// Walk : if the WalkHandlers.TPDPDescriptorType function is not nil (ie. was set by outside code), calls it with this TPDPDescriptorType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPDPDescriptorType instance.
func (me *TPDPDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TPDPDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAuthzService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsNameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPDPDescriptor defines XsdGoPkgHasElemsPDPDescriptor
type XsdGoPkgHasElemsPDPDescriptor struct {
	PDPDescriptors []*TPDPDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata PDPDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPDPDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPDPDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPDPDescriptor instance.
func (me *XsdGoPkgHasElemsPDPDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPDPDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PDPDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrNamespaceXsdtAnyURI defines attribute NamespaceXsdtAnyURI
type XsdGoPkgHasAttrNamespaceXsdtAnyURI struct {
	Namespace xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata namespace,attr"`
}

// TAdditionalMetadataLocationType defines TAdditionalMetadataLocationType
type TAdditionalMetadataLocationType struct {
	XsdGoPkgHasAnyURICdata

	XsdGoPkgHasAttrNamespaceXsdtAnyURI
}

// Walk : if the WalkHandlers.TAdditionalMetadataLocationType function is not nil (ie. was set by outside code), calls it with this TAdditionalMetadataLocationType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TAdditionalMetadataLocationType instance.
func (me *TAdditionalMetadataLocationType) Walk() (err error) {
	if fn := WalkHandlers.TAdditionalMetadataLocationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAdditionalMetadataLocation defines XsdGoPkgHasElemsAdditionalMetadataLocation
type XsdGoPkgHasElemsAdditionalMetadataLocation struct {
	AdditionalMetadataLocations []*TAdditionalMetadataLocationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AdditionalMetadataLocation"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAdditionalMetadataLocation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAdditionalMetadataLocation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAdditionalMetadataLocation instance.
func (me *XsdGoPkgHasElemsAdditionalMetadataLocation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAdditionalMetadataLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AdditionalMetadataLocations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAttributeService defines XsdGoPkgHasElemsAttributeService
type XsdGoPkgHasElemsAttributeService struct {
	AttributeServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAttributeService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAttributeService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAttributeService instance.
func (me *XsdGoPkgHasElemsAttributeService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAttributeService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAttributeAuthorityDescriptorType defines TAttributeAuthorityDescriptorType
type TAttributeAuthorityDescriptorType struct {
	saml.XsdGoPkgHasElemsAttribute

	TRoleDescriptorType

	XsdGoPkgHasElemsAttributeService

	XsdGoPkgHasElemsAssertionIDRequestService

	XsdGoPkgHasElemsNameIDFormat

	XsdGoPkgHasElemsAttributeProfile
}

// Walk : if the WalkHandlers.TAttributeAuthorityDescriptorType function is not nil (ie. was set by outside code), calls it with this TAttributeAuthorityDescriptorType instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TAttributeAuthorityDescriptorType instance.
func (me *TAttributeAuthorityDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeAuthorityDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAttributeService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsNameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAttributeProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAttributeAuthorityDescriptor defines XsdGoPkgHasElemsAttributeAuthorityDescriptor
type XsdGoPkgHasElemsAttributeAuthorityDescriptor struct {
	AttributeAuthorityDescriptors []*TAttributeAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeAuthorityDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAttributeAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAttributeAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAttributeAuthorityDescriptor instance.
func (me *XsdGoPkgHasElemsAttributeAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAttributeAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeAuthorityDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TentityIDType defines TentityIDType
type TentityIDType xsdt.AnyURI

// Set : Since TentityIDType is just a simple String type, this merely sets the current value from the specified string.
func (me *TentityIDType) Set(s string) { (*xsdt.AnyURI)(me).Set(s) }

// String : Since TentityIDType is just a simple String type, this merely returns the current string value.
func (me TentityIDType) String() string { return xsdt.AnyURI(me).String() }

// ToXsdtAnyURI : This convenience method just performs a simple type conversion to TentityIDType's alias type xsdt.AnyURI.
func (me TentityIDType) ToXsdtAnyURI() xsdt.AnyURI { return xsdt.AnyURI(me) }

// XsdGoPkgHasAttrEntityIDTentityIDType defines attribute EntityIDTentityIDType
type XsdGoPkgHasAttrEntityIDTentityIDType struct {
	EntityID TentityIDType `xml:"urn:oasis:names:tc:SAML:2.0:metadata entityID,attr"`
}

// XsdGoPkgHasElemsAffiliateMember defines XsdGoPkgHasElemsAffiliateMember
type XsdGoPkgHasElemsAffiliateMember struct {
	AffiliateMembers []TentityIDType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliateMember"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAffiliateMember function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAffiliateMember instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAffiliateMember instance.
func (me *XsdGoPkgHasElemsAffiliateMember) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAffiliateMember; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrAffiliationOwnerIDTentityIDType defines attribute AffiliationOwnerIDTentityIDType
type XsdGoPkgHasAttrAffiliationOwnerIDTentityIDType struct {
	AffiliationOwnerID TentityIDType `xml:"urn:oasis:names:tc:SAML:2.0:metadata affiliationOwnerID,attr"`
}

// TAffiliationDescriptorType defines TAffiliationDescriptorType
type TAffiliationDescriptorType struct {
	ds.XsdGoPkgHasElemSignature

	XsdGoPkgHasElemExtensions

	XsdGoPkgHasElemsAffiliateMember

	XsdGoPkgHasElemsKeyDescriptor

	XsdGoPkgHasAttrValidUntilXsdtDateTime

	XsdGoPkgHasAttrCacheDurationXsdtDuration

	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasAttrAffiliationOwnerIDTentityIDType
}

// Walk : if the WalkHandlers.TAffiliationDescriptorType function is not nil (ie. was set by outside code), calls it with this TAffiliationDescriptorType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TAffiliationDescriptorType instance.
func (me *TAffiliationDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TAffiliationDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAffiliateMember.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsKeyDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAffiliationDescriptor defines XsdGoPkgHasElemAffiliationDescriptor
type XsdGoPkgHasElemAffiliationDescriptor struct {
	AffiliationDescriptor *TAffiliationDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliationDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAffiliationDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAffiliationDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAffiliationDescriptor instance.
func (me *XsdGoPkgHasElemAffiliationDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAffiliationDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AffiliationDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEntityDescriptorType defines TEntityDescriptorType
type TEntityDescriptorType struct {
	XsdGoPkgHasElemOrganization

	XsdGoPkgHasAttrEntityIDTentityIDType

	XsdGoPkgHasElemsAttributeAuthorityDescriptor

	XsdGoPkgHasElemExtensions

	XsdGoPkgHasElemAffiliationDescriptor

	XsdGoPkgHasAttrValidUntilXsdtDateTime

	XsdGoPkgHasElemsContactPerson

	XsdGoPkgHasAttrCacheDurationXsdtDuration

	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasElemsIDPSSODescriptor

	ds.XsdGoPkgHasElemSignature

	XsdGoPkgHasElemsAuthnAuthorityDescriptor

	XsdGoPkgHasElemsPDPDescriptor

	XsdGoPkgHasElemsAdditionalMetadataLocation

	XsdGoPkgHasElemsRoleDescriptor

	XsdGoPkgHasElemsSPSSODescriptor
}

// Walk : if the WalkHandlers.TEntityDescriptorType function is not nil (ie. was set by outside code), calls it with this TEntityDescriptorType instance as the single argument. Then calls the Walk() method on 11/16 embed(s) and 0/0 field(s) belonging to this TEntityDescriptorType instance.
func (me *TEntityDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TEntityDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemAffiliationDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsIDPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsContactPerson.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAdditionalMetadataLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRoleDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAuthnAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPDPDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAttributeAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemOrganization.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEntityDescriptor defines XsdGoPkgHasElemsEntityDescriptor
type XsdGoPkgHasElemsEntityDescriptor struct {
	EntityDescriptors []*TEntityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntityDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEntityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEntityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEntityDescriptor instance.
func (me *XsdGoPkgHasElemsEntityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEntityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EntityDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEntitiesDescriptor defines XsdGoPkgHasElemsEntitiesDescriptor
type XsdGoPkgHasElemsEntitiesDescriptor struct {
	EntitiesDescriptors []*TEntitiesDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntitiesDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEntitiesDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEntitiesDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEntitiesDescriptor instance.
func (me *XsdGoPkgHasElemsEntitiesDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEntitiesDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrNameXsdtString defines attribute NameXsdtString
type XsdGoPkgHasAttrNameXsdtString struct {
	Name xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata Name,attr"`
}

// TEntitiesDescriptorType defines TEntitiesDescriptorType
type TEntitiesDescriptorType struct {
	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasAttrNameXsdtString

	XsdGoPkgHasElemsEntityDescriptor

	XsdGoPkgHasElemsEntitiesDescriptor

	ds.XsdGoPkgHasElemSignature

	XsdGoPkgHasElemExtensions

	XsdGoPkgHasAttrValidUntilXsdtDateTime

	XsdGoPkgHasAttrCacheDurationXsdtDuration
}

// Walk : if the WalkHandlers.TEntitiesDescriptorType function is not nil (ie. was set by outside code), calls it with this TEntitiesDescriptorType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TEntitiesDescriptorType instance.
func (me *TEntitiesDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TEntitiesDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsEntityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEntitiesDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEntitiesDescriptor defines XsdGoPkgHasElemEntitiesDescriptor
type XsdGoPkgHasElemEntitiesDescriptor struct {
	EntitiesDescriptor *TEntitiesDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntitiesDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEntitiesDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEntitiesDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEntitiesDescriptor instance.
func (me *XsdGoPkgHasElemEntitiesDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEntitiesDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EntitiesDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEntityDescriptor defines XsdGoPkgHasElemEntityDescriptor
type XsdGoPkgHasElemEntityDescriptor struct {
	EntityDescriptor *TEntityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntityDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEntityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEntityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEntityDescriptor instance.
func (me *XsdGoPkgHasElemEntityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEntityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EntityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsOrganization defines XsdGoPkgHasElemsOrganization
type XsdGoPkgHasElemsOrganization struct {
	Organizations []*TOrganizationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Organization"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsOrganization function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsOrganization instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsOrganization instance.
func (me *XsdGoPkgHasElemsOrganization) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsOrganization; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Organizations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemOrganizationName defines XsdGoPkgHasElemOrganizationName
type XsdGoPkgHasElemOrganizationName struct {
	OrganizationName *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemOrganizationName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemOrganizationName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemOrganizationName instance.
func (me *XsdGoPkgHasElemOrganizationName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemOrganizationName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrganizationName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemOrganizationDisplayName defines XsdGoPkgHasElemOrganizationDisplayName
type XsdGoPkgHasElemOrganizationDisplayName struct {
	OrganizationDisplayName *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationDisplayName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemOrganizationDisplayName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemOrganizationDisplayName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemOrganizationDisplayName instance.
func (me *XsdGoPkgHasElemOrganizationDisplayName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemOrganizationDisplayName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrganizationDisplayName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemOrganizationURL defines XsdGoPkgHasElemOrganizationURL
type XsdGoPkgHasElemOrganizationURL struct {
	OrganizationURL *TlocalizedURIType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationURL"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemOrganizationURL function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemOrganizationURL instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemOrganizationURL instance.
func (me *XsdGoPkgHasElemOrganizationURL) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemOrganizationURL; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrganizationURL.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemContactPerson defines XsdGoPkgHasElemContactPerson
type XsdGoPkgHasElemContactPerson struct {
	ContactPerson *TContactType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ContactPerson"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemContactPerson function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemContactPerson instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemContactPerson instance.
func (me *XsdGoPkgHasElemContactPerson) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemContactPerson; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContactPerson.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsCompany defines XsdGoPkgHasElemsCompany
type XsdGoPkgHasElemsCompany struct {
	Companies []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata Company"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsCompany function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsCompany instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsCompany instance.
func (me *XsdGoPkgHasElemsCompany) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsCompany; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsGivenName defines XsdGoPkgHasElemsGivenName
type XsdGoPkgHasElemsGivenName struct {
	GivenNames []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata GivenName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsGivenName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsGivenName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsGivenName instance.
func (me *XsdGoPkgHasElemsGivenName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsGivenName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSurName defines XsdGoPkgHasElemsSurName
type XsdGoPkgHasElemsSurName struct {
	SurNames []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata SurName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSurName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSurName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSurName instance.
func (me *XsdGoPkgHasElemsSurName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSurName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEmailAddress defines XsdGoPkgHasElemEmailAddress
type XsdGoPkgHasElemEmailAddress struct {
	EmailAddress xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata EmailAddress"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEmailAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEmailAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemEmailAddress instance.
func (me *XsdGoPkgHasElemEmailAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEmailAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTelephoneNumber defines XsdGoPkgHasElemTelephoneNumber
type XsdGoPkgHasElemTelephoneNumber struct {
	TelephoneNumber xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata TelephoneNumber"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTelephoneNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTelephoneNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemTelephoneNumber instance.
func (me *XsdGoPkgHasElemTelephoneNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTelephoneNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAdditionalMetadataLocation defines XsdGoPkgHasElemAdditionalMetadataLocation
type XsdGoPkgHasElemAdditionalMetadataLocation struct {
	AdditionalMetadataLocation *TAdditionalMetadataLocationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AdditionalMetadataLocation"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAdditionalMetadataLocation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAdditionalMetadataLocation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAdditionalMetadataLocation instance.
func (me *XsdGoPkgHasElemAdditionalMetadataLocation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAdditionalMetadataLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AdditionalMetadataLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRoleDescriptor defines XsdGoPkgHasElemRoleDescriptor
type XsdGoPkgHasElemRoleDescriptor struct {
	RoleDescriptor *TRoleDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RoleDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRoleDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRoleDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemRoleDescriptor instance.
func (me *XsdGoPkgHasElemRoleDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRoleDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RoleDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemKeyDescriptor defines XsdGoPkgHasElemKeyDescriptor
type XsdGoPkgHasElemKeyDescriptor struct {
	KeyDescriptor *TKeyDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata KeyDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemKeyDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemKeyDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemKeyDescriptor instance.
func (me *XsdGoPkgHasElemKeyDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemKeyDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEncryptionMethod defines XsdGoPkgHasElemEncryptionMethod
type XsdGoPkgHasElemEncryptionMethod struct {
	EncryptionMethod xenc.TEncryptionMethodType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EncryptionMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEncryptionMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEncryptionMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemEncryptionMethod instance.
func (me *XsdGoPkgHasElemEncryptionMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEncryptionMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemArtifactResolutionService defines XsdGoPkgHasElemArtifactResolutionService
type XsdGoPkgHasElemArtifactResolutionService struct {
	ArtifactResolutionService *TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ArtifactResolutionService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemArtifactResolutionService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemArtifactResolutionService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemArtifactResolutionService instance.
func (me *XsdGoPkgHasElemArtifactResolutionService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemArtifactResolutionService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArtifactResolutionService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSingleLogoutService defines XsdGoPkgHasElemSingleLogoutService
type XsdGoPkgHasElemSingleLogoutService struct {
	SingleLogoutService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleLogoutService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSingleLogoutService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSingleLogoutService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSingleLogoutService instance.
func (me *XsdGoPkgHasElemSingleLogoutService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSingleLogoutService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SingleLogoutService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemManageNameIDService defines XsdGoPkgHasElemManageNameIDService
type XsdGoPkgHasElemManageNameIDService struct {
	ManageNameIDService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ManageNameIDService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemManageNameIDService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemManageNameIDService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemManageNameIDService instance.
func (me *XsdGoPkgHasElemManageNameIDService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemManageNameIDService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ManageNameIDService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemNameIDFormat defines XsdGoPkgHasElemNameIDFormat
type XsdGoPkgHasElemNameIDFormat struct {
	NameIDFormat xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDFormat"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemNameIDFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemNameIDFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemNameIDFormat instance.
func (me *XsdGoPkgHasElemNameIDFormat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemNameIDFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemIDPSSODescriptor defines XsdGoPkgHasElemIDPSSODescriptor
type XsdGoPkgHasElemIDPSSODescriptor struct {
	IDPSSODescriptor *TIDPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata IDPSSODescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemIDPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemIDPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemIDPSSODescriptor instance.
func (me *XsdGoPkgHasElemIDPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemIDPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IDPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSingleSignOnService defines XsdGoPkgHasElemSingleSignOnService
type XsdGoPkgHasElemSingleSignOnService struct {
	SingleSignOnService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleSignOnService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSingleSignOnService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSingleSignOnService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSingleSignOnService instance.
func (me *XsdGoPkgHasElemSingleSignOnService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSingleSignOnService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SingleSignOnService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemNameIDMappingService defines XsdGoPkgHasElemNameIDMappingService
type XsdGoPkgHasElemNameIDMappingService struct {
	NameIDMappingService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDMappingService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemNameIDMappingService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemNameIDMappingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemNameIDMappingService instance.
func (me *XsdGoPkgHasElemNameIDMappingService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemNameIDMappingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDMappingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAssertionIDRequestService defines XsdGoPkgHasElemAssertionIDRequestService
type XsdGoPkgHasElemAssertionIDRequestService struct {
	AssertionIDRequestService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionIDRequestService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAssertionIDRequestService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAssertionIDRequestService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAssertionIDRequestService instance.
func (me *XsdGoPkgHasElemAssertionIDRequestService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAssertionIDRequestService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAttributeProfile defines XsdGoPkgHasElemAttributeProfile
type XsdGoPkgHasElemAttributeProfile struct {
	AttributeProfile xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeProfile"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAttributeProfile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAttributeProfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemAttributeProfile instance.
func (me *XsdGoPkgHasElemAttributeProfile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAttributeProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSPSSODescriptor defines XsdGoPkgHasElemSPSSODescriptor
type XsdGoPkgHasElemSPSSODescriptor struct {
	SPSSODescriptor *TSPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SPSSODescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSPSSODescriptor instance.
func (me *XsdGoPkgHasElemSPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAssertionConsumerService defines XsdGoPkgHasElemAssertionConsumerService
type XsdGoPkgHasElemAssertionConsumerService struct {
	AssertionConsumerService *TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionConsumerService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAssertionConsumerService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAssertionConsumerService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAssertionConsumerService instance.
func (me *XsdGoPkgHasElemAssertionConsumerService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAssertionConsumerService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssertionConsumerService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAttributeConsumingService defines XsdGoPkgHasElemAttributeConsumingService
type XsdGoPkgHasElemAttributeConsumingService struct {
	AttributeConsumingService *TAttributeConsumingServiceType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeConsumingService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAttributeConsumingService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAttributeConsumingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAttributeConsumingService instance.
func (me *XsdGoPkgHasElemAttributeConsumingService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAttributeConsumingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeConsumingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemServiceName defines XsdGoPkgHasElemServiceName
type XsdGoPkgHasElemServiceName struct {
	ServiceName *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemServiceName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemServiceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemServiceName instance.
func (me *XsdGoPkgHasElemServiceName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemServiceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ServiceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemServiceDescription defines XsdGoPkgHasElemServiceDescription
type XsdGoPkgHasElemServiceDescription struct {
	ServiceDescription *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceDescription"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemServiceDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemServiceDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemServiceDescription instance.
func (me *XsdGoPkgHasElemServiceDescription) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemServiceDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ServiceDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRequestedAttribute defines XsdGoPkgHasElemRequestedAttribute
type XsdGoPkgHasElemRequestedAttribute struct {
	RequestedAttribute *TRequestedAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RequestedAttribute"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRequestedAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRequestedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemRequestedAttribute instance.
func (me *XsdGoPkgHasElemRequestedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRequestedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RequestedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthnAuthorityDescriptor defines XsdGoPkgHasElemAuthnAuthorityDescriptor
type XsdGoPkgHasElemAuthnAuthorityDescriptor struct {
	AuthnAuthorityDescriptor *TAuthnAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnAuthorityDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthnAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthnAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthnAuthorityDescriptor instance.
func (me *XsdGoPkgHasElemAuthnAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthnAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthnQueryService defines XsdGoPkgHasElemAuthnQueryService
type XsdGoPkgHasElemAuthnQueryService struct {
	AuthnQueryService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnQueryService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthnQueryService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthnQueryService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthnQueryService instance.
func (me *XsdGoPkgHasElemAuthnQueryService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthnQueryService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnQueryService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPDPDescriptor defines XsdGoPkgHasElemPDPDescriptor
type XsdGoPkgHasElemPDPDescriptor struct {
	PDPDescriptor *TPDPDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata PDPDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPDPDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPDPDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPDPDescriptor instance.
func (me *XsdGoPkgHasElemPDPDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPDPDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PDPDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthzService defines XsdGoPkgHasElemAuthzService
type XsdGoPkgHasElemAuthzService struct {
	AuthzService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthzService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthzService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthzService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthzService instance.
func (me *XsdGoPkgHasElemAuthzService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthzService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthzService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAttributeAuthorityDescriptor defines XsdGoPkgHasElemAttributeAuthorityDescriptor
type XsdGoPkgHasElemAttributeAuthorityDescriptor struct {
	AttributeAuthorityDescriptor *TAttributeAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeAuthorityDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAttributeAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAttributeAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAttributeAuthorityDescriptor instance.
func (me *XsdGoPkgHasElemAttributeAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAttributeAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAttributeService defines XsdGoPkgHasElemAttributeService
type XsdGoPkgHasElemAttributeService struct {
	AttributeService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeService"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAttributeService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAttributeService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAttributeService instance.
func (me *XsdGoPkgHasElemAttributeService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAttributeService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAffiliationDescriptor defines XsdGoPkgHasElemsAffiliationDescriptor
type XsdGoPkgHasElemsAffiliationDescriptor struct {
	AffiliationDescriptors []*TAffiliationDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliationDescriptor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAffiliationDescriptor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAffiliationDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAffiliationDescriptor instance.
func (me *XsdGoPkgHasElemsAffiliationDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAffiliationDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AffiliationDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAffiliateMember defines XsdGoPkgHasElemAffiliateMember
type XsdGoPkgHasElemAffiliateMember struct {
	AffiliateMember TentityIDType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliateMember"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAffiliateMember function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAffiliateMember instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemAffiliateMember instance.
func (me *XsdGoPkgHasElemAffiliateMember) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAffiliateMember; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasCdata defines type CDATA
type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 102 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

// XsdGoPkgWalkHandlers Provides 102 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElemsOrganizationName             func(*XsdGoPkgHasElemsOrganizationName, bool) error
	TRoleDescriptorType                          func(*TRoleDescriptorType, bool) error
	TSPSSODescriptorType                         func(*TSPSSODescriptorType, bool) error
	XsdGoPkgHasElemsAdditionalMetadataLocation   func(*XsdGoPkgHasElemsAdditionalMetadataLocation, bool) error
	XsdGoPkgHasElemsEntityDescriptor             func(*XsdGoPkgHasElemsEntityDescriptor, bool) error
	XsdGoPkgHasElemSPSSODescriptor               func(*XsdGoPkgHasElemSPSSODescriptor, bool) error
	XsdGoPkgHasElemSingleSignOnService           func(*XsdGoPkgHasElemSingleSignOnService, bool) error
	XsdGoPkgHasElemsExtensions                   func(*XsdGoPkgHasElemsExtensions, bool) error
	XsdGoPkgHasElemsNameIDFormat                 func(*XsdGoPkgHasElemsNameIDFormat, bool) error
	XsdGoPkgHasElemCompany                       func(*XsdGoPkgHasElemCompany, bool) error
	TKeyDescriptorType                           func(*TKeyDescriptorType, bool) error
	XsdGoPkgHasElemsServiceDescription           func(*XsdGoPkgHasElemsServiceDescription, bool) error
	TAuthnAuthorityDescriptorType                func(*TAuthnAuthorityDescriptorType, bool) error
	XsdGoPkgHasElemsCompany                      func(*XsdGoPkgHasElemsCompany, bool) error
	XsdGoPkgHasElemsAffiliationDescriptor        func(*XsdGoPkgHasElemsAffiliationDescriptor, bool) error
	TEndpointType                                func(*TEndpointType, bool) error
	XsdGoPkgHasElemsContactPerson                func(*XsdGoPkgHasElemsContactPerson, bool) error
	XsdGoPkgHasElemsArtifactResolutionService    func(*XsdGoPkgHasElemsArtifactResolutionService, bool) error
	XsdGoPkgHasElemsIDPSSODescriptor             func(*XsdGoPkgHasElemsIDPSSODescriptor, bool) error
	XsdGoPkgHasElemsPDPDescriptor                func(*XsdGoPkgHasElemsPDPDescriptor, bool) error
	XsdGoPkgHasElemOrganizationName              func(*XsdGoPkgHasElemOrganizationName, bool) error
	XsdGoPkgHasElemEncryptionMethod              func(*XsdGoPkgHasElemEncryptionMethod, bool) error
	XsdGoPkgHasElemsKeyDescriptor                func(*XsdGoPkgHasElemsKeyDescriptor, bool) error
	XsdGoPkgHasElemsNameIDMappingService         func(*XsdGoPkgHasElemsNameIDMappingService, bool) error
	XsdGoPkgHasElemsRoleDescriptor               func(*XsdGoPkgHasElemsRoleDescriptor, bool) error
	TAttributeConsumingServiceType               func(*TAttributeConsumingServiceType, bool) error
	XsdGoPkgHasElemContactPerson                 func(*XsdGoPkgHasElemContactPerson, bool) error
	XsdGoPkgHasElemIDPSSODescriptor              func(*XsdGoPkgHasElemIDPSSODescriptor, bool) error
	TExtensionsType                              func(*TExtensionsType, bool) error
	XsdGoPkgHasElemOrganization                  func(*XsdGoPkgHasElemOrganization, bool) error
	TEntitiesDescriptorType                      func(*TEntitiesDescriptorType, bool) error
	XsdGoPkgHasElemsOrganization                 func(*XsdGoPkgHasElemsOrganization, bool) error
	XsdGoPkgHasElemAssertionIDRequestService     func(*XsdGoPkgHasElemAssertionIDRequestService, bool) error
	XsdGoPkgHasElemsTelephoneNumber              func(*XsdGoPkgHasElemsTelephoneNumber, bool) error
	XsdGoPkgHasElemsAssertionConsumerService     func(*XsdGoPkgHasElemsAssertionConsumerService, bool) error
	TAffiliationDescriptorType                   func(*TAffiliationDescriptorType, bool) error
	XsdGoPkgHasElemOrganizationURL               func(*XsdGoPkgHasElemOrganizationURL, bool) error
	XsdGoPkgHasElemsGivenName                    func(*XsdGoPkgHasElemsGivenName, bool) error
	XsdGoPkgHasElemArtifactResolutionService     func(*XsdGoPkgHasElemArtifactResolutionService, bool) error
	XsdGoPkgHasElemAttributeProfile              func(*XsdGoPkgHasElemAttributeProfile, bool) error
	XsdGoPkgHasElemsOrganizationDisplayName      func(*XsdGoPkgHasElemsOrganizationDisplayName, bool) error
	XsdGoPkgHasElemsAuthnQueryService            func(*XsdGoPkgHasElemsAuthnQueryService, bool) error
	XsdGoPkgHasElemPDPDescriptor                 func(*XsdGoPkgHasElemPDPDescriptor, bool) error
	XsdGoPkgHasElemAuthzService                  func(*XsdGoPkgHasElemAuthzService, bool) error
	XsdGoPkgHasElemAttributeService              func(*XsdGoPkgHasElemAttributeService, bool) error
	XsdGoPkgHasElemsManageNameIDService          func(*XsdGoPkgHasElemsManageNameIDService, bool) error
	XsdGoPkgHasElemGivenName                     func(*XsdGoPkgHasElemGivenName, bool) error
	TIndexedEndpointType                         func(*TIndexedEndpointType, bool) error
	TIDPSSODescriptorType                        func(*TIDPSSODescriptorType, bool) error
	XsdGoPkgHasElemAdditionalMetadataLocation    func(*XsdGoPkgHasElemAdditionalMetadataLocation, bool) error
	XsdGoPkgHasElemAssertionConsumerService      func(*XsdGoPkgHasElemAssertionConsumerService, bool) error
	XsdGoPkgHasElemServiceName                   func(*XsdGoPkgHasElemServiceName, bool) error
	XsdGoPkgHasCdata                             func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElemSurName                       func(*XsdGoPkgHasElemSurName, bool) error
	XsdGoPkgHasElemsEncryptionMethod             func(*XsdGoPkgHasElemsEncryptionMethod, bool) error
	XsdGoPkgHasElemsEntitiesDescriptor           func(*XsdGoPkgHasElemsEntitiesDescriptor, bool) error
	XsdGoPkgHasElemRoleDescriptor                func(*XsdGoPkgHasElemRoleDescriptor, bool) error
	XsdGoPkgHasElemManageNameIDService           func(*XsdGoPkgHasElemManageNameIDService, bool) error
	XsdGoPkgHasElemNameIDMappingService          func(*XsdGoPkgHasElemNameIDMappingService, bool) error
	XsdGoPkgHasElemsSingleLogoutService          func(*XsdGoPkgHasElemsSingleLogoutService, bool) error
	XsdGoPkgHasElemEntitiesDescriptor            func(*XsdGoPkgHasElemEntitiesDescriptor, bool) error
	XsdGoPkgHasElemOrganizationDisplayName       func(*XsdGoPkgHasElemOrganizationDisplayName, bool) error
	XsdGoPkgHasElemSingleLogoutService           func(*XsdGoPkgHasElemSingleLogoutService, bool) error
	XsdGoPkgHasElemAffiliateMember               func(*XsdGoPkgHasElemAffiliateMember, bool) error
	TlocalizedNameType                           func(*TlocalizedNameType, bool) error
	XsdGoPkgHasElemsAuthzService                 func(*XsdGoPkgHasElemsAuthzService, bool) error
	XsdGoPkgHasElemAffiliationDescriptor         func(*XsdGoPkgHasElemAffiliationDescriptor, bool) error
	XsdGoPkgHasElemAttributeConsumingService     func(*XsdGoPkgHasElemAttributeConsumingService, bool) error
	XsdGoPkgHasElemRequestedAttribute            func(*XsdGoPkgHasElemRequestedAttribute, bool) error
	XsdGoPkgHasElemsEmailAddress                 func(*XsdGoPkgHasElemsEmailAddress, bool) error
	TSSODescriptorType                           func(*TSSODescriptorType, bool) error
	XsdGoPkgHasElemsAffiliateMember              func(*XsdGoPkgHasElemsAffiliateMember, bool) error
	XsdGoPkgHasElemTelephoneNumber               func(*XsdGoPkgHasElemTelephoneNumber, bool) error
	XsdGoPkgHasElemNameIDFormat                  func(*XsdGoPkgHasElemNameIDFormat, bool) error
	XsdGoPkgHasElemAuthnQueryService             func(*XsdGoPkgHasElemAuthnQueryService, bool) error
	XsdGoPkgHasElemsOrganizationURL              func(*XsdGoPkgHasElemsOrganizationURL, bool) error
	TOrganizationType                            func(*TOrganizationType, bool) error
	XsdGoPkgHasElemsAttributeProfile             func(*XsdGoPkgHasElemsAttributeProfile, bool) error
	TPDPDescriptorType                           func(*TPDPDescriptorType, bool) error
	XsdGoPkgHasElemKeyDescriptor                 func(*XsdGoPkgHasElemKeyDescriptor, bool) error
	XsdGoPkgHasElemAuthnAuthorityDescriptor      func(*XsdGoPkgHasElemAuthnAuthorityDescriptor, bool) error
	XsdGoPkgHasElemsServiceName                  func(*XsdGoPkgHasElemsServiceName, bool) error
	XsdGoPkgHasElemsAuthnAuthorityDescriptor     func(*XsdGoPkgHasElemsAuthnAuthorityDescriptor, bool) error
	TAdditionalMetadataLocationType              func(*TAdditionalMetadataLocationType, bool) error
	TAttributeAuthorityDescriptorType            func(*TAttributeAuthorityDescriptorType, bool) error
	XsdGoPkgHasElemsAttributeAuthorityDescriptor func(*XsdGoPkgHasElemsAttributeAuthorityDescriptor, bool) error
	XsdGoPkgHasElemEmailAddress                  func(*XsdGoPkgHasElemEmailAddress, bool) error
	XsdGoPkgHasElemsSPSSODescriptor              func(*XsdGoPkgHasElemsSPSSODescriptor, bool) error
	XsdGoPkgHasElemExtensions                    func(*XsdGoPkgHasElemExtensions, bool) error
	TContactType                                 func(*TContactType, bool) error
	TlocalizedURIType                            func(*TlocalizedURIType, bool) error
	XsdGoPkgHasElemsSingleSignOnService          func(*XsdGoPkgHasElemsSingleSignOnService, bool) error
	XsdGoPkgHasElemsAssertionIDRequestService    func(*XsdGoPkgHasElemsAssertionIDRequestService, bool) error
	TRequestedAttributeType                      func(*TRequestedAttributeType, bool) error
	XsdGoPkgHasElemsAttributeConsumingService    func(*XsdGoPkgHasElemsAttributeConsumingService, bool) error
	XsdGoPkgHasElemsAttributeService             func(*XsdGoPkgHasElemsAttributeService, bool) error
	TEntityDescriptorType                        func(*TEntityDescriptorType, bool) error
	XsdGoPkgHasElemEntityDescriptor              func(*XsdGoPkgHasElemEntityDescriptor, bool) error
	XsdGoPkgHasElemsSurName                      func(*XsdGoPkgHasElemsSurName, bool) error
	XsdGoPkgHasElemAttributeAuthorityDescriptor  func(*XsdGoPkgHasElemAttributeAuthorityDescriptor, bool) error
	XsdGoPkgHasElemsRequestedAttribute           func(*XsdGoPkgHasElemsRequestedAttribute, bool) error
	XsdGoPkgHasElemServiceDescription            func(*XsdGoPkgHasElemServiceDescription, bool) error
}
