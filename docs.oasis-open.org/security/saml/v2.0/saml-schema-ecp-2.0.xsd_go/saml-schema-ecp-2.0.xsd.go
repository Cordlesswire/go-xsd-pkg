// Package goSamlEcp20 : autogenerated by go-xsd
package goSamlEcp20

//	Document identifier: saml-schema-ecp-2.0 Location: http://docs.oasis-open.org/security/saml/v2.0/ Revision history: V2.0 (March, 2005): Custom schema for ECP profile, first published in SAML 2.0.

import (
	saml "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd_go"
	samlp "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-protocol-2.0.xsd_go"
	S "github.com/miracl/go-xsd-pkg/schemas.xmlsoap.org/soap/envelope_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// XsdGoPkgHasAttrProviderNameXsdtString defines attribute ProviderNameXsdtString
type XsdGoPkgHasAttrProviderNameXsdtString struct {
	ProviderName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp ProviderName,attr"`
}

// XsdGoPkgHasAttrIsPassiveXsdtBoolean defines attribute IsPassiveXsdtBoolean
type XsdGoPkgHasAttrIsPassiveXsdtBoolean struct {
	IsPassive xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp IsPassive,attr"`
}

// TRequestType defines TRequestType
type TRequestType struct {
	samlp.XsdGoPkgHasElemIDPList

	S.XsdGoPkgHasAttrActor

	XsdGoPkgHasAttrProviderNameXsdtString

	XsdGoPkgHasAttrIsPassiveXsdtBoolean

	S.XsdGoPkgHasAttrMustUnderstand

	saml.XsdGoPkgHasElemIssuer
}

// Walk : if the WalkHandlers.TRequestType function is not nil (ie. was set by outside code), calls it with this TRequestType instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TRequestType instance.
func (me *TRequestType) Walk() (err error) {
	if fn := WalkHandlers.TRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRequest defines XsdGoPkgHasElemRequest
type XsdGoPkgHasElemRequest struct {
	Request *TRequestType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp Request"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemRequest instance.
func (me *XsdGoPkgHasElemRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRequest defines XsdGoPkgHasElemsRequest
type XsdGoPkgHasElemsRequest struct {
	Requests []*TRequestType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp Request"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRequest instance.
func (me *XsdGoPkgHasElemsRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrAssertionConsumerServiceURLXsdtAnyURI defines attribute AssertionConsumerServiceURLXsdtAnyURI
type XsdGoPkgHasAttrAssertionConsumerServiceURLXsdtAnyURI struct {
	AssertionConsumerServiceURL xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp AssertionConsumerServiceURL,attr"`
}

// TResponseType defines TResponseType
type TResponseType struct {
	S.XsdGoPkgHasAttrMustUnderstand

	S.XsdGoPkgHasAttrActor

	XsdGoPkgHasAttrAssertionConsumerServiceURLXsdtAnyURI
}

// Walk : if the WalkHandlers.TResponseType function is not nil (ie. was set by outside code), calls it with this TResponseType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TResponseType instance.
func (me *TResponseType) Walk() (err error) {
	if fn := WalkHandlers.TResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemResponse defines XsdGoPkgHasElemResponse
type XsdGoPkgHasElemResponse struct {
	Response *TResponseType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp Response"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemResponse instance.
func (me *XsdGoPkgHasElemResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Response.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsResponse defines XsdGoPkgHasElemsResponse
type XsdGoPkgHasElemsResponse struct {
	Responses []*TResponseType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp Response"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsResponse instance.
func (me *XsdGoPkgHasElemsResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Responses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TRelayStateType defines TRelayStateType
type TRelayStateType struct {
	XsdGoPkgHasCdata

	S.XsdGoPkgHasAttrMustUnderstand

	S.XsdGoPkgHasAttrActor
}

// Walk : if the WalkHandlers.TRelayStateType function is not nil (ie. was set by outside code), calls it with this TRelayStateType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TRelayStateType instance.
func (me *TRelayStateType) Walk() (err error) {
	if fn := WalkHandlers.TRelayStateType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRelayState defines XsdGoPkgHasElemRelayState
type XsdGoPkgHasElemRelayState struct {
	RelayState *TRelayStateType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp RelayState"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRelayState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRelayState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemRelayState instance.
func (me *XsdGoPkgHasElemRelayState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRelayState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RelayState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRelayState defines XsdGoPkgHasElemsRelayState
type XsdGoPkgHasElemsRelayState struct {
	RelayStates []*TRelayStateType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp RelayState"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRelayState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRelayState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRelayState instance.
func (me *XsdGoPkgHasElemsRelayState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRelayState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RelayStates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasCdata defines type CDATA
type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 10 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

// XsdGoPkgWalkHandlers Provides 10 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TRequestType               func(*TRequestType, bool) error
	XsdGoPkgHasElemsRequest    func(*XsdGoPkgHasElemsRequest, bool) error
	TResponseType              func(*TResponseType, bool) error
	XsdGoPkgHasElemResponse    func(*XsdGoPkgHasElemResponse, bool) error
	XsdGoPkgHasElemRelayState  func(*XsdGoPkgHasElemRelayState, bool) error
	XsdGoPkgHasElemRequest     func(*XsdGoPkgHasElemRequest, bool) error
	XsdGoPkgHasElemsResponse   func(*XsdGoPkgHasElemsResponse, bool) error
	TRelayStateType            func(*TRelayStateType, bool) error
	XsdGoPkgHasElemsRelayState func(*XsdGoPkgHasElemsRelayState, bool) error
	XsdGoPkgHasCdata           func(*XsdGoPkgHasCdata, bool) error
}
