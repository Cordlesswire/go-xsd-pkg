//	Auto-generated by the "go-xsd" package located at:
//		github.com/miracl/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		docs.oasis-open.org/security/saml/v2.0/saml-schema-ecp-2.0.xsd
package go_SamlEcp20

//	Document identifier: saml-schema-ecp-2.0
//	Location: http://docs.oasis-open.org/security/saml/v2.0/
//	Revision history:
//	V2.0 (March, 2005):
//	Custom schema for ECP profile, first published in SAML 2.0.

import (
	saml "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd_go"
	samlp "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-protocol-2.0.xsd_go"
	S "github.com/miracl/go-xsd-pkg/schemas.xmlsoap.org/soap/envelope_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

type XsdGoPkgHasAttr_ProviderName_XsdtString_ struct {
	ProviderName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp ProviderName,attr"`
}

type XsdGoPkgHasAttr_IsPassive_XsdtBoolean_ struct {
	IsPassive xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp IsPassive,attr"`
}

type TRequestType struct {
	samlp.XsdGoPkgHasElem_IDPList

	S.XsdGoPkgHasAttr_Actor

	XsdGoPkgHasAttr_ProviderName_XsdtString_

	XsdGoPkgHasAttr_IsPassive_XsdtBoolean_

	S.XsdGoPkgHasAttr_MustUnderstand

	saml.XsdGoPkgHasElem_Issuer
}

//	If the WalkHandlers.TRequestType function is not nil (ie. was set by outside code), calls it with this TRequestType instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TRequestType instance.
func (me *TRequestType) Walk() (err error) {
	if fn := WalkHandlers.TRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Request struct {
	Request *TRequestType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Request function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Request instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Request instance.
func (me *XsdGoPkgHasElem_Request) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Request; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Request struct {
	Requests []*TRequestType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp Request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Request function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Request instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Request instance.
func (me *XsdGoPkgHasElems_Request) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Request; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_AssertionConsumerServiceURL_XsdtAnyURI_ struct {
	AssertionConsumerServiceURL xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp AssertionConsumerServiceURL,attr"`
}

type TResponseType struct {
	S.XsdGoPkgHasAttr_MustUnderstand

	S.XsdGoPkgHasAttr_Actor

	XsdGoPkgHasAttr_AssertionConsumerServiceURL_XsdtAnyURI_
}

//	If the WalkHandlers.TResponseType function is not nil (ie. was set by outside code), calls it with this TResponseType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TResponseType instance.
func (me *TResponseType) Walk() (err error) {
	if fn := WalkHandlers.TResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Response struct {
	Response *TResponseType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp Response"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Response function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Response instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Response instance.
func (me *XsdGoPkgHasElem_Response) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Response; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Response.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Response struct {
	Responses []*TResponseType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp Response"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Response function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Response instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Response instance.
func (me *XsdGoPkgHasElems_Response) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Response; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Responses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRelayStateType struct {
	XsdGoPkgHasCdata

	S.XsdGoPkgHasAttr_MustUnderstand

	S.XsdGoPkgHasAttr_Actor
}

//	If the WalkHandlers.TRelayStateType function is not nil (ie. was set by outside code), calls it with this TRelayStateType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TRelayStateType instance.
func (me *TRelayStateType) Walk() (err error) {
	if fn := WalkHandlers.TRelayStateType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RelayState struct {
	RelayState *TRelayStateType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp RelayState"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RelayState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RelayState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RelayState instance.
func (me *XsdGoPkgHasElem_RelayState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RelayState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RelayState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RelayState struct {
	RelayStates []*TRelayStateType `xml:"urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp RelayState"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RelayState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RelayState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RelayState instance.
func (me *XsdGoPkgHasElems_RelayState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RelayState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RelayStates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 10 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 10 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TRequestType                func(*TRequestType, bool) error
	XsdGoPkgHasElems_Request    func(*XsdGoPkgHasElems_Request, bool) error
	TResponseType               func(*TResponseType, bool) error
	XsdGoPkgHasElem_Response    func(*XsdGoPkgHasElem_Response, bool) error
	XsdGoPkgHasElem_RelayState  func(*XsdGoPkgHasElem_RelayState, bool) error
	XsdGoPkgHasElem_Request     func(*XsdGoPkgHasElem_Request, bool) error
	XsdGoPkgHasElems_Response   func(*XsdGoPkgHasElems_Response, bool) error
	TRelayStateType             func(*TRelayStateType, bool) error
	XsdGoPkgHasElems_RelayState func(*XsdGoPkgHasElems_RelayState, bool) error
	XsdGoPkgHasCdata            func(*XsdGoPkgHasCdata, bool) error
}
