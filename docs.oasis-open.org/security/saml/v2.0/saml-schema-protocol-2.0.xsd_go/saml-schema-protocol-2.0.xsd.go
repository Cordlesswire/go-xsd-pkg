// Package goSamlProtocol20 : autogenerated by go-xsd
package goSamlProtocol20

//	Document identifier: saml-schema-protocol-2.0 Location: http://docs.oasis-open.org/security/saml/v2.0/ Revision history: V1.0 (November, 2002): Initial Standard Schema. V1.1 (September, 2003): Updates within the same V1.0 namespace. V2.0 (March, 2005): New protocol schema based in a SAML V2.0 namespace.

import (
	saml "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd_go"
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// TExtensionsType defines TExtensionsType
type TExtensionsType struct {
}

// Walk : if the WalkHandlers.TExtensionsType function is not nil (ie. was set by outside code), calls it with this TExtensionsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TExtensionsType instance.
func (me *TExtensionsType) Walk() (err error) {
	if fn := WalkHandlers.TExtensionsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemExtensions defines XsdGoPkgHasElemExtensions
type XsdGoPkgHasElemExtensions struct {
	Extensions *TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Extensions"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemExtensions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemExtensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemExtensions instance.
func (me *XsdGoPkgHasElemExtensions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemExtensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsExtensions defines XsdGoPkgHasElemsExtensions
type XsdGoPkgHasElemsExtensions struct {
	Extensionses []*TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Extensions"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsExtensions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsExtensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsExtensions instance.
func (me *XsdGoPkgHasElemsExtensions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsExtensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extensionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemStatusMessage defines XsdGoPkgHasElemStatusMessage
type XsdGoPkgHasElemStatusMessage struct {
	StatusMessage xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusMessage"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemStatusMessage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemStatusMessage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemStatusMessage instance.
func (me *XsdGoPkgHasElemStatusMessage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemStatusMessage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TStatusDetailType defines TStatusDetailType
type TStatusDetailType struct {
}

// Walk : if the WalkHandlers.TStatusDetailType function is not nil (ie. was set by outside code), calls it with this TStatusDetailType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TStatusDetailType instance.
func (me *TStatusDetailType) Walk() (err error) {
	if fn := WalkHandlers.TStatusDetailType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemStatusDetail defines XsdGoPkgHasElemStatusDetail
type XsdGoPkgHasElemStatusDetail struct {
	StatusDetail *TStatusDetailType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusDetail"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemStatusDetail function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemStatusDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemStatusDetail instance.
func (me *XsdGoPkgHasElemStatusDetail) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemStatusDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StatusDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrValueXsdtAnyURI defines attribute ValueXsdtAnyURI
type XsdGoPkgHasAttrValueXsdtAnyURI struct {
	Value xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Value,attr"`
}

// TStatusCodeType defines TStatusCodeType
type TStatusCodeType struct {
	XsdGoPkgHasElemStatusCode

	XsdGoPkgHasAttrValueXsdtAnyURI
}

// Walk : if the WalkHandlers.TStatusCodeType function is not nil (ie. was set by outside code), calls it with this TStatusCodeType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TStatusCodeType instance.
func (me *TStatusCodeType) Walk() (err error) {
	if fn := WalkHandlers.TStatusCodeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemStatusCode defines XsdGoPkgHasElemStatusCode
type XsdGoPkgHasElemStatusCode struct {
	StatusCode *TStatusCodeType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusCode"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemStatusCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemStatusCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemStatusCode instance.
func (me *XsdGoPkgHasElemStatusCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemStatusCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StatusCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TStatusType defines TStatusType
type TStatusType struct {
	XsdGoPkgHasElemStatusMessage

	XsdGoPkgHasElemStatusDetail

	XsdGoPkgHasElemStatusCode
}

// Walk : if the WalkHandlers.TStatusType function is not nil (ie. was set by outside code), calls it with this TStatusType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TStatusType instance.
func (me *TStatusType) Walk() (err error) {
	if fn := WalkHandlers.TStatusType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemStatusCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemStatusMessage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemStatusDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemStatus defines XsdGoPkgHasElemStatus
type XsdGoPkgHasElemStatus struct {
	Status *TStatusType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Status"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemStatus instance.
func (me *XsdGoPkgHasElemStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Status.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsStatus defines XsdGoPkgHasElemsStatus
type XsdGoPkgHasElemsStatus struct {
	Statuses []*TStatusType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Status"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsStatus function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsStatus instance.
func (me *XsdGoPkgHasElemsStatus) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Statuses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsStatusCode defines XsdGoPkgHasElemsStatusCode
type XsdGoPkgHasElemsStatusCode struct {
	StatusCodes []*TStatusCodeType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusCode"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsStatusCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsStatusCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsStatusCode instance.
func (me *XsdGoPkgHasElemsStatusCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsStatusCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StatusCodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsStatusMessage defines XsdGoPkgHasElemsStatusMessage
type XsdGoPkgHasElemsStatusMessage struct {
	StatusMessages []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusMessage"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsStatusMessage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsStatusMessage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsStatusMessage instance.
func (me *XsdGoPkgHasElemsStatusMessage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsStatusMessage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsStatusDetail defines XsdGoPkgHasElemsStatusDetail
type XsdGoPkgHasElemsStatusDetail struct {
	StatusDetails []*TStatusDetailType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusDetail"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsStatusDetail function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsStatusDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsStatusDetail instance.
func (me *XsdGoPkgHasElemsStatusDetail) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsStatusDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StatusDetails {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrDestinationXsdtAnyURI defines attribute DestinationXsdtAnyURI
type XsdGoPkgHasAttrDestinationXsdtAnyURI struct {
	Destination xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Destination,attr"`
}

// XsdGoPkgHasAttrConsentXsdtAnyURI defines attribute ConsentXsdtAnyURI
type XsdGoPkgHasAttrConsentXsdtAnyURI struct {
	Consent xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Consent,attr"`
}

// XsdGoPkgHasAttrIDXsdtID defines attribute IdXsdtId
type XsdGoPkgHasAttrIDXsdtID struct {
	ID xsdt.ID `xml:"urn:oasis:names:tc:SAML:2.0:protocol ID,attr"`
}

// XsdGoPkgHasAttrVersionXsdtString defines attribute VersionXsdtString
type XsdGoPkgHasAttrVersionXsdtString struct {
	Version xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Version,attr"`
}

// XsdGoPkgHasAttrIssueInstantXsdtDateTime defines attribute IssueInstantXsdtDateTime
type XsdGoPkgHasAttrIssueInstantXsdtDateTime struct {
	IssueInstant xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:protocol IssueInstant,attr"`
}

// TRequestAbstractType defines TRequestAbstractType
type TRequestAbstractType struct {
	XsdGoPkgHasElemExtensions

	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasAttrVersionXsdtString

	XsdGoPkgHasAttrIssueInstantXsdtDateTime

	XsdGoPkgHasAttrDestinationXsdtAnyURI

	XsdGoPkgHasAttrConsentXsdtAnyURI

	saml.XsdGoPkgHasElemIssuer

	ds.XsdGoPkgHasElemSignature
}

// Walk : if the WalkHandlers.TRequestAbstractType function is not nil (ie. was set by outside code), calls it with this TRequestAbstractType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TRequestAbstractType instance.
func (me *TRequestAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TRequestAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAssertionIDRequestType defines TAssertionIDRequestType
type TAssertionIDRequestType struct {
	saml.XsdGoPkgHasElemsAssertionIDRef

	TRequestAbstractType
}

// Walk : if the WalkHandlers.TAssertionIDRequestType function is not nil (ie. was set by outside code), calls it with this TAssertionIDRequestType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAssertionIDRequestType instance.
func (me *TAssertionIDRequestType) Walk() (err error) {
	if fn := WalkHandlers.TAssertionIDRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAssertionIDRequest defines XsdGoPkgHasElemAssertionIDRequest
type XsdGoPkgHasElemAssertionIDRequest struct {
	AssertionIDRequest *TAssertionIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AssertionIDRequest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAssertionIDRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAssertionIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAssertionIDRequest instance.
func (me *XsdGoPkgHasElemAssertionIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAssertionIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssertionIDRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAssertionIDRequest defines XsdGoPkgHasElemsAssertionIDRequest
type XsdGoPkgHasElemsAssertionIDRequest struct {
	AssertionIDRequests []*TAssertionIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AssertionIDRequest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAssertionIDRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAssertionIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAssertionIDRequest instance.
func (me *XsdGoPkgHasElemsAssertionIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAssertionIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssertionIDRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSubjectQueryAbstractType defines TSubjectQueryAbstractType
type TSubjectQueryAbstractType struct {
	TRequestAbstractType

	saml.XsdGoPkgHasElemSubject
}

// Walk : if the WalkHandlers.TSubjectQueryAbstractType function is not nil (ie. was set by outside code), calls it with this TSubjectQueryAbstractType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSubjectQueryAbstractType instance.
func (me *TSubjectQueryAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectQueryAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSubjectQuery defines XsdGoPkgHasElemsSubjectQuery
type XsdGoPkgHasElemsSubjectQuery struct {
	SubjectQueries []*TSubjectQueryAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:protocol SubjectQuery"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSubjectQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSubjectQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSubjectQuery instance.
func (me *XsdGoPkgHasElemsSubjectQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSubjectQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSubjectQuery defines XsdGoPkgHasElemSubjectQuery
type XsdGoPkgHasElemSubjectQuery struct {
	SubjectQuery *TSubjectQueryAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:protocol SubjectQuery"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSubjectQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSubjectQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSubjectQuery instance.
func (me *XsdGoPkgHasElemSubjectQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSubjectQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAuthnContextComparisonType defines TAuthnContextComparisonType
type TAuthnContextComparisonType xsdt.String

// String : Since TAuthnContextComparisonType is just a simple String type, this merely returns the current string value.
func (me TAuthnContextComparisonType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TAuthnContextComparisonType's alias type xsdt.String.
func (me TAuthnContextComparisonType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsExact : Returns true if the value of this enumerated TAuthnContextComparisonType is "exact".
func (me TAuthnContextComparisonType) IsExact() bool { return me.String() == "exact" }

// IsMinimum : Returns true if the value of this enumerated TAuthnContextComparisonType is "minimum".
func (me TAuthnContextComparisonType) IsMinimum() bool { return me.String() == "minimum" }

// IsMaximum : Returns true if the value of this enumerated TAuthnContextComparisonType is "maximum".
func (me TAuthnContextComparisonType) IsMaximum() bool { return me.String() == "maximum" }

// IsBetter : Returns true if the value of this enumerated TAuthnContextComparisonType is "better".
func (me TAuthnContextComparisonType) IsBetter() bool { return me.String() == "better" }

// Set : Since TAuthnContextComparisonType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAuthnContextComparisonType) Set(s string) { (*xsdt.String)(me).Set(s) }

// XsdGoPkgHasAttrComparisonTAuthnContextComparisonType defines attribute ComparisonTAuthnContextComparisonType
type XsdGoPkgHasAttrComparisonTAuthnContextComparisonType struct {
	Comparison TAuthnContextComparisonType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Comparison,attr"`
}

// TRequestedAuthnContextType defines TRequestedAuthnContextType
type TRequestedAuthnContextType struct {
	saml.XsdGoPkgHasElemsAuthnContextClassRef

	saml.XsdGoPkgHasElemsAuthnContextDeclRef

	XsdGoPkgHasAttrComparisonTAuthnContextComparisonType
}

// Walk : if the WalkHandlers.TRequestedAuthnContextType function is not nil (ie. was set by outside code), calls it with this TRequestedAuthnContextType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TRequestedAuthnContextType instance.
func (me *TRequestedAuthnContextType) Walk() (err error) {
	if fn := WalkHandlers.TRequestedAuthnContextType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRequestedAuthnContext defines XsdGoPkgHasElemRequestedAuthnContext
type XsdGoPkgHasElemRequestedAuthnContext struct {
	RequestedAuthnContext *TRequestedAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequestedAuthnContext"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRequestedAuthnContext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRequestedAuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemRequestedAuthnContext instance.
func (me *XsdGoPkgHasElemRequestedAuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRequestedAuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RequestedAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrSessionIndexXsdtString defines attribute SessionIndexXsdtString
type XsdGoPkgHasAttrSessionIndexXsdtString struct {
	SessionIndex xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol SessionIndex,attr"`
}

// TAuthnQueryType defines TAuthnQueryType
type TAuthnQueryType struct {
	TSubjectQueryAbstractType

	XsdGoPkgHasElemRequestedAuthnContext

	XsdGoPkgHasAttrSessionIndexXsdtString
}

// Walk : if the WalkHandlers.TAuthnQueryType function is not nil (ie. was set by outside code), calls it with this TAuthnQueryType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TAuthnQueryType instance.
func (me *TAuthnQueryType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnQueryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectQueryAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemRequestedAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthnQuery defines XsdGoPkgHasElemAuthnQuery
type XsdGoPkgHasElemAuthnQuery struct {
	AuthnQuery *TAuthnQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnQuery"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthnQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthnQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthnQuery instance.
func (me *XsdGoPkgHasElemAuthnQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthnQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthnQuery defines XsdGoPkgHasElemsAuthnQuery
type XsdGoPkgHasElemsAuthnQuery struct {
	AuthnQueries []*TAuthnQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnQuery"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthnQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthnQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthnQuery instance.
func (me *XsdGoPkgHasElemsAuthnQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthnQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRequestedAuthnContext defines XsdGoPkgHasElemsRequestedAuthnContext
type XsdGoPkgHasElemsRequestedAuthnContext struct {
	RequestedAuthnContexts []*TRequestedAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequestedAuthnContext"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRequestedAuthnContext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRequestedAuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRequestedAuthnContext instance.
func (me *XsdGoPkgHasElemsRequestedAuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRequestedAuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RequestedAuthnContexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAttributeQueryType defines TAttributeQueryType
type TAttributeQueryType struct {
	TSubjectQueryAbstractType

	saml.XsdGoPkgHasElemsAttribute
}

// Walk : if the WalkHandlers.TAttributeQueryType function is not nil (ie. was set by outside code), calls it with this TAttributeQueryType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAttributeQueryType instance.
func (me *TAttributeQueryType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeQueryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectQueryAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAttributeQuery defines XsdGoPkgHasElemAttributeQuery
type XsdGoPkgHasElemAttributeQuery struct {
	AttributeQuery *TAttributeQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AttributeQuery"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAttributeQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAttributeQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAttributeQuery instance.
func (me *XsdGoPkgHasElemAttributeQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAttributeQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAttributeQuery defines XsdGoPkgHasElemsAttributeQuery
type XsdGoPkgHasElemsAttributeQuery struct {
	AttributeQueries []*TAttributeQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AttributeQuery"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAttributeQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAttributeQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAttributeQuery instance.
func (me *XsdGoPkgHasElemsAttributeQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAttributeQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrResourceXsdtAnyURI defines attribute ResourceXsdtAnyURI
type XsdGoPkgHasAttrResourceXsdtAnyURI struct {
	Resource xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Resource,attr"`
}

// TAuthzDecisionQueryType defines TAuthzDecisionQueryType
type TAuthzDecisionQueryType struct {
	TSubjectQueryAbstractType

	saml.XsdGoPkgHasElemsAction

	saml.XsdGoPkgHasElemEvidence

	XsdGoPkgHasAttrResourceXsdtAnyURI
}

// Walk : if the WalkHandlers.TAuthzDecisionQueryType function is not nil (ie. was set by outside code), calls it with this TAuthzDecisionQueryType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TAuthzDecisionQueryType instance.
func (me *TAuthzDecisionQueryType) Walk() (err error) {
	if fn := WalkHandlers.TAuthzDecisionQueryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectQueryAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthzDecisionQuery defines XsdGoPkgHasElemAuthzDecisionQuery
type XsdGoPkgHasElemAuthzDecisionQuery struct {
	AuthzDecisionQuery *TAuthzDecisionQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthzDecisionQuery"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthzDecisionQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthzDecisionQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthzDecisionQuery instance.
func (me *XsdGoPkgHasElemAuthzDecisionQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthzDecisionQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthzDecisionQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthzDecisionQuery defines XsdGoPkgHasElemsAuthzDecisionQuery
type XsdGoPkgHasElemsAuthzDecisionQuery struct {
	AuthzDecisionQueries []*TAuthzDecisionQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthzDecisionQuery"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthzDecisionQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthzDecisionQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthzDecisionQuery instance.
func (me *XsdGoPkgHasElemsAuthzDecisionQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthzDecisionQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthzDecisionQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrAttributeConsumingServiceIndexXsdtUnsignedShort defines attribute AttributeConsumingServiceIndexXsdtUnsignedShort
type XsdGoPkgHasAttrAttributeConsumingServiceIndexXsdtUnsignedShort struct {
	AttributeConsumingServiceIndex xsdt.UnsignedShort `xml:"urn:oasis:names:tc:SAML:2.0:protocol AttributeConsumingServiceIndex,attr"`
}

// XsdGoPkgHasAttrProviderNameXsdtString defines attribute ProviderNameXsdtString
type XsdGoPkgHasAttrProviderNameXsdtString struct {
	ProviderName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol ProviderName,attr"`
}

// XsdGoPkgHasAttrIsPassiveXsdtBoolean defines attribute IsPassiveXsdtBoolean
type XsdGoPkgHasAttrIsPassiveXsdtBoolean struct {
	IsPassive xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:protocol IsPassive,attr"`
}

// XsdGoPkgHasAttrAssertionConsumerServiceIndexXsdtUnsignedShort defines attribute AssertionConsumerServiceIndexXsdtUnsignedShort
type XsdGoPkgHasAttrAssertionConsumerServiceIndexXsdtUnsignedShort struct {
	AssertionConsumerServiceIndex xsdt.UnsignedShort `xml:"urn:oasis:names:tc:SAML:2.0:protocol AssertionConsumerServiceIndex,attr"`
}

// XsdGoPkgHasAttrFormatXsdtAnyURI defines attribute FormatXsdtAnyURI
type XsdGoPkgHasAttrFormatXsdtAnyURI struct {
	Format xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Format,attr"`
}

// XsdGoPkgHasAttrSPNameQualifierXsdtString defines attribute SPNameQualifierXsdtString
type XsdGoPkgHasAttrSPNameQualifierXsdtString struct {
	SPNameQualifier xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol SPNameQualifier,attr"`
}

// XsdGoPkgHasAttrAllowCreateXsdtBoolean defines attribute AllowCreateXsdtBoolean
type XsdGoPkgHasAttrAllowCreateXsdtBoolean struct {
	AllowCreate xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:protocol AllowCreate,attr"`
}

// TNameIDPolicyType defines TNameIDPolicyType
type TNameIDPolicyType struct {
	XsdGoPkgHasAttrFormatXsdtAnyURI

	XsdGoPkgHasAttrSPNameQualifierXsdtString

	XsdGoPkgHasAttrAllowCreateXsdtBoolean
}

// Walk : if the WalkHandlers.TNameIDPolicyType function is not nil (ie. was set by outside code), calls it with this TNameIDPolicyType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TNameIDPolicyType instance.
func (me *TNameIDPolicyType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDPolicyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemNameIDPolicy defines XsdGoPkgHasElemNameIDPolicy
type XsdGoPkgHasElemNameIDPolicy struct {
	NameIDPolicy *TNameIDPolicyType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDPolicy"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemNameIDPolicy function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemNameIDPolicy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemNameIDPolicy instance.
func (me *XsdGoPkgHasElemNameIDPolicy) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemNameIDPolicy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrLocXsdtAnyURI defines attribute LocXsdtAnyURI
type XsdGoPkgHasAttrLocXsdtAnyURI struct {
	Loc xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Loc,attr"`
}

// XsdGoPkgHasAttrProviderIDXsdtAnyURI defines attribute ProviderIDXsdtAnyURI
type XsdGoPkgHasAttrProviderIDXsdtAnyURI struct {
	ProviderID xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol ProviderID,attr"`
}

// XsdGoPkgHasAttrNameXsdtString defines attribute NameXsdtString
type XsdGoPkgHasAttrNameXsdtString struct {
	Name xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Name,attr"`
}

// TIDPEntryType defines TIDPEntryType
type TIDPEntryType struct {
	XsdGoPkgHasAttrLocXsdtAnyURI

	XsdGoPkgHasAttrProviderIDXsdtAnyURI

	XsdGoPkgHasAttrNameXsdtString
}

// Walk : if the WalkHandlers.TIDPEntryType function is not nil (ie. was set by outside code), calls it with this TIDPEntryType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TIDPEntryType instance.
func (me *TIDPEntryType) Walk() (err error) {
	if fn := WalkHandlers.TIDPEntryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsIDPEntry defines XsdGoPkgHasElemsIDPEntry
type XsdGoPkgHasElemsIDPEntry struct {
	IDPEntries []*TIDPEntryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPEntry"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsIDPEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsIDPEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsIDPEntry instance.
func (me *XsdGoPkgHasElemsIDPEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsIDPEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IDPEntries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemGetComplete defines XsdGoPkgHasElemGetComplete
type XsdGoPkgHasElemGetComplete struct {
	GetComplete xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol GetComplete"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemGetComplete function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemGetComplete instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemGetComplete instance.
func (me *XsdGoPkgHasElemGetComplete) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemGetComplete; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TIDPListType defines TIDPListType
type TIDPListType struct {
	XsdGoPkgHasElemsIDPEntry

	XsdGoPkgHasElemGetComplete
}

// Walk : if the WalkHandlers.TIDPListType function is not nil (ie. was set by outside code), calls it with this TIDPListType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TIDPListType instance.
func (me *TIDPListType) Walk() (err error) {
	if fn := WalkHandlers.TIDPListType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsIDPEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemGetComplete.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemIDPList defines XsdGoPkgHasElemIDPList
type XsdGoPkgHasElemIDPList struct {
	IDPList *TIDPListType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPList"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemIDPList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemIDPList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemIDPList instance.
func (me *XsdGoPkgHasElemIDPList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemIDPList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IDPList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRequesterID defines XsdGoPkgHasElemsRequesterID
type XsdGoPkgHasElemsRequesterID struct {
	RequesterIDs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequesterID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRequesterID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRequesterID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRequesterID instance.
func (me *XsdGoPkgHasElemsRequesterID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRequesterID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrProxyCountXsdtNonNegativeInteger defines attribute ProxyCountXsdtNonNegativeInteger
type XsdGoPkgHasAttrProxyCountXsdtNonNegativeInteger struct {
	ProxyCount xsdt.NonNegativeInteger `xml:"urn:oasis:names:tc:SAML:2.0:protocol ProxyCount,attr"`
}

// TScopingType defines TScopingType
type TScopingType struct {
	XsdGoPkgHasElemIDPList

	XsdGoPkgHasElemsRequesterID

	XsdGoPkgHasAttrProxyCountXsdtNonNegativeInteger
}

// Walk : if the WalkHandlers.TScopingType function is not nil (ie. was set by outside code), calls it with this TScopingType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TScopingType instance.
func (me *TScopingType) Walk() (err error) {
	if fn := WalkHandlers.TScopingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemIDPList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRequesterID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemScoping defines XsdGoPkgHasElemScoping
type XsdGoPkgHasElemScoping struct {
	Scoping *TScopingType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Scoping"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemScoping function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemScoping instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemScoping instance.
func (me *XsdGoPkgHasElemScoping) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemScoping; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scoping.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrAssertionConsumerServiceURLXsdtAnyURI defines attribute AssertionConsumerServiceURLXsdtAnyURI
type XsdGoPkgHasAttrAssertionConsumerServiceURLXsdtAnyURI struct {
	AssertionConsumerServiceURL xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol AssertionConsumerServiceURL,attr"`
}

// XsdGoPkgHasAttrForceAuthnXsdtBoolean defines attribute ForceAuthnXsdtBoolean
type XsdGoPkgHasAttrForceAuthnXsdtBoolean struct {
	ForceAuthn xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:protocol ForceAuthn,attr"`
}

// XsdGoPkgHasAttrProtocolBindingXsdtAnyURI defines attribute ProtocolBindingXsdtAnyURI
type XsdGoPkgHasAttrProtocolBindingXsdtAnyURI struct {
	ProtocolBinding xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol ProtocolBinding,attr"`
}

// TAuthnRequestType defines TAuthnRequestType
type TAuthnRequestType struct {
	XsdGoPkgHasAttrForceAuthnXsdtBoolean

	XsdGoPkgHasAttrProtocolBindingXsdtAnyURI

	XsdGoPkgHasElemNameIDPolicy

	saml.XsdGoPkgHasElemConditions

	XsdGoPkgHasElemScoping

	XsdGoPkgHasAttrAssertionConsumerServiceURLXsdtAnyURI

	XsdGoPkgHasAttrProviderNameXsdtString

	XsdGoPkgHasAttrIsPassiveXsdtBoolean

	XsdGoPkgHasAttrAssertionConsumerServiceIndexXsdtUnsignedShort

	TRequestAbstractType

	saml.XsdGoPkgHasElemSubject

	XsdGoPkgHasElemRequestedAuthnContext

	XsdGoPkgHasAttrAttributeConsumingServiceIndexXsdtUnsignedShort
}

// Walk : if the WalkHandlers.TAuthnRequestType function is not nil (ie. was set by outside code), calls it with this TAuthnRequestType instance as the single argument. Then calls the Walk() method on 4/13 embed(s) and 0/0 field(s) belonging to this TAuthnRequestType instance.
func (me *TAuthnRequestType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemRequestedAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemNameIDPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemScoping.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAuthnRequest defines XsdGoPkgHasElemAuthnRequest
type XsdGoPkgHasElemAuthnRequest struct {
	AuthnRequest *TAuthnRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnRequest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAuthnRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAuthnRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAuthnRequest instance.
func (me *XsdGoPkgHasElemAuthnRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAuthnRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAuthnRequest defines XsdGoPkgHasElemsAuthnRequest
type XsdGoPkgHasElemsAuthnRequest struct {
	AuthnRequests []*TAuthnRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnRequest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAuthnRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAuthnRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAuthnRequest instance.
func (me *XsdGoPkgHasElemsAuthnRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAuthnRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsNameIDPolicy defines XsdGoPkgHasElemsNameIDPolicy
type XsdGoPkgHasElemsNameIDPolicy struct {
	NameIDPolicies []*TNameIDPolicyType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDPolicy"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsNameIDPolicy function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsNameIDPolicy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsNameIDPolicy instance.
func (me *XsdGoPkgHasElemsNameIDPolicy) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsNameIDPolicy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDPolicies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsScoping defines XsdGoPkgHasElemsScoping
type XsdGoPkgHasElemsScoping struct {
	Scopings []*TScopingType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Scoping"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsScoping function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsScoping instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsScoping instance.
func (me *XsdGoPkgHasElemsScoping) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsScoping; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Scopings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRequesterID defines XsdGoPkgHasElemRequesterID
type XsdGoPkgHasElemRequesterID struct {
	RequesterID xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequesterID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRequesterID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRequesterID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemRequesterID instance.
func (me *XsdGoPkgHasElemRequesterID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRequesterID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsIDPList defines XsdGoPkgHasElemsIDPList
type XsdGoPkgHasElemsIDPList struct {
	IDPLists []*TIDPListType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPList"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsIDPList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsIDPList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsIDPList instance.
func (me *XsdGoPkgHasElemsIDPList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsIDPList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IDPLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemIDPEntry defines XsdGoPkgHasElemIDPEntry
type XsdGoPkgHasElemIDPEntry struct {
	IDPEntry *TIDPEntryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPEntry"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemIDPEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemIDPEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemIDPEntry instance.
func (me *XsdGoPkgHasElemIDPEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemIDPEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IDPEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsGetComplete defines XsdGoPkgHasElemsGetComplete
type XsdGoPkgHasElemsGetComplete struct {
	GetCompletes []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol GetComplete"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsGetComplete function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsGetComplete instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsGetComplete instance.
func (me *XsdGoPkgHasElemsGetComplete) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsGetComplete; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrInResponseToXsdtNCName defines attribute InResponseToXsdtNCName
type XsdGoPkgHasAttrInResponseToXsdtNCName struct {
	InResponseTo xsdt.NCName `xml:"urn:oasis:names:tc:SAML:2.0:protocol InResponseTo,attr"`
}

// TStatusResponseType defines TStatusResponseType
type TStatusResponseType struct {
	XsdGoPkgHasAttrVersionXsdtString

	XsdGoPkgHasAttrDestinationXsdtAnyURI

	XsdGoPkgHasAttrConsentXsdtAnyURI

	saml.XsdGoPkgHasElemIssuer

	XsdGoPkgHasElemStatus

	XsdGoPkgHasAttrInResponseToXsdtNCName

	XsdGoPkgHasAttrIssueInstantXsdtDateTime

	ds.XsdGoPkgHasElemSignature

	XsdGoPkgHasElemExtensions

	XsdGoPkgHasAttrIDXsdtID
}

// Walk : if the WalkHandlers.TStatusResponseType function is not nil (ie. was set by outside code), calls it with this TStatusResponseType instance as the single argument. Then calls the Walk() method on 2/10 embed(s) and 0/0 field(s) belonging to this TStatusResponseType instance.
func (me *TStatusResponseType) Walk() (err error) {
	if fn := WalkHandlers.TStatusResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TResponseType defines TResponseType
type TResponseType struct {
	TStatusResponseType

	saml.XsdGoPkgHasElemsAssertion

	saml.XsdGoPkgHasElemsEncryptedAssertion
}

// Walk : if the WalkHandlers.TResponseType function is not nil (ie. was set by outside code), calls it with this TResponseType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TResponseType instance.
func (me *TResponseType) Walk() (err error) {
	if fn := WalkHandlers.TResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatusResponseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemResponse defines XsdGoPkgHasElemResponse
type XsdGoPkgHasElemResponse struct {
	Response *TResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Response"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemResponse instance.
func (me *XsdGoPkgHasElemResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Response.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsResponse defines XsdGoPkgHasElemsResponse
type XsdGoPkgHasElemsResponse struct {
	Responses []*TResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Response"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsResponse instance.
func (me *XsdGoPkgHasElemsResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Responses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemArtifact defines XsdGoPkgHasElemArtifact
type XsdGoPkgHasElemArtifact struct {
	Artifact xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Artifact"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemArtifact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemArtifact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemArtifact instance.
func (me *XsdGoPkgHasElemArtifact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemArtifact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TArtifactResolveType defines TArtifactResolveType
type TArtifactResolveType struct {
	TRequestAbstractType

	XsdGoPkgHasElemArtifact
}

// Walk : if the WalkHandlers.TArtifactResolveType function is not nil (ie. was set by outside code), calls it with this TArtifactResolveType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TArtifactResolveType instance.
func (me *TArtifactResolveType) Walk() (err error) {
	if fn := WalkHandlers.TArtifactResolveType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemArtifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemArtifactResolve defines XsdGoPkgHasElemArtifactResolve
type XsdGoPkgHasElemArtifactResolve struct {
	ArtifactResolve *TArtifactResolveType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResolve"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemArtifactResolve function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemArtifactResolve instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemArtifactResolve instance.
func (me *XsdGoPkgHasElemArtifactResolve) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemArtifactResolve; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArtifactResolve.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsArtifactResolve defines XsdGoPkgHasElemsArtifactResolve
type XsdGoPkgHasElemsArtifactResolve struct {
	ArtifactResolves []*TArtifactResolveType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResolve"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsArtifactResolve function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsArtifactResolve instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsArtifactResolve instance.
func (me *XsdGoPkgHasElemsArtifactResolve) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsArtifactResolve; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArtifactResolves {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsArtifact defines XsdGoPkgHasElemsArtifact
type XsdGoPkgHasElemsArtifact struct {
	Artifacts []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Artifact"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsArtifact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsArtifact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsArtifact instance.
func (me *XsdGoPkgHasElemsArtifact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsArtifact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TArtifactResponseType defines TArtifactResponseType
type TArtifactResponseType struct {
	TStatusResponseType
}

// Walk : if the WalkHandlers.TArtifactResponseType function is not nil (ie. was set by outside code), calls it with this TArtifactResponseType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TArtifactResponseType instance.
func (me *TArtifactResponseType) Walk() (err error) {
	if fn := WalkHandlers.TArtifactResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatusResponseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemArtifactResponse defines XsdGoPkgHasElemArtifactResponse
type XsdGoPkgHasElemArtifactResponse struct {
	ArtifactResponse *TArtifactResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResponse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemArtifactResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemArtifactResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemArtifactResponse instance.
func (me *XsdGoPkgHasElemArtifactResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemArtifactResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArtifactResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsArtifactResponse defines XsdGoPkgHasElemsArtifactResponse
type XsdGoPkgHasElemsArtifactResponse struct {
	ArtifactResponses []*TArtifactResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResponse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsArtifactResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsArtifactResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsArtifactResponse instance.
func (me *XsdGoPkgHasElemsArtifactResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsArtifactResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArtifactResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemNewID defines XsdGoPkgHasElemNewID
type XsdGoPkgHasElemNewID struct {
	NewID xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemNewID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemNewID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemNewID instance.
func (me *XsdGoPkgHasElemNewID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemNewID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemNewEncryptedID defines XsdGoPkgHasElemNewEncryptedID
type XsdGoPkgHasElemNewEncryptedID struct {
	NewEncryptedID saml.TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewEncryptedID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemNewEncryptedID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemNewEncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemNewEncryptedID instance.
func (me *XsdGoPkgHasElemNewEncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemNewEncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TerminateType defines TerminateType
type TerminateType struct {
}

// Walk : if the WalkHandlers.TerminateType function is not nil (ie. was set by outside code), calls it with this TerminateType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TerminateType instance.
func (me *TerminateType) Walk() (err error) {
	if fn := WalkHandlers.TerminateType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTerminate defines XsdGoPkgHasElemTerminate
type XsdGoPkgHasElemTerminate struct {
	Terminate *TerminateType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Terminate"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTerminate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTerminate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemTerminate instance.
func (me *XsdGoPkgHasElemTerminate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTerminate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Terminate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TManageNameIDRequestType defines TManageNameIDRequestType
type TManageNameIDRequestType struct {
	XsdGoPkgHasElemNewID

	XsdGoPkgHasElemNewEncryptedID

	XsdGoPkgHasElemTerminate

	TRequestAbstractType

	saml.XsdGoPkgHasElemNameID

	saml.XsdGoPkgHasElemEncryptedID
}

// Walk : if the WalkHandlers.TManageNameIDRequestType function is not nil (ie. was set by outside code), calls it with this TManageNameIDRequestType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TManageNameIDRequestType instance.
func (me *TManageNameIDRequestType) Walk() (err error) {
	if fn := WalkHandlers.TManageNameIDRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemNewID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemNewEncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemTerminate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemManageNameIDRequest defines XsdGoPkgHasElemManageNameIDRequest
type XsdGoPkgHasElemManageNameIDRequest struct {
	ManageNameIDRequest *TManageNameIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDRequest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemManageNameIDRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemManageNameIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemManageNameIDRequest instance.
func (me *XsdGoPkgHasElemManageNameIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemManageNameIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ManageNameIDRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsManageNameIDRequest defines XsdGoPkgHasElemsManageNameIDRequest
type XsdGoPkgHasElemsManageNameIDRequest struct {
	ManageNameIDRequests []*TManageNameIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDRequest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsManageNameIDRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsManageNameIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsManageNameIDRequest instance.
func (me *XsdGoPkgHasElemsManageNameIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsManageNameIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ManageNameIDRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsNewID defines XsdGoPkgHasElemsNewID
type XsdGoPkgHasElemsNewID struct {
	NewIDs []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsNewID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsNewID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsNewID instance.
func (me *XsdGoPkgHasElemsNewID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsNewID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsNewEncryptedID defines XsdGoPkgHasElemsNewEncryptedID
type XsdGoPkgHasElemsNewEncryptedID struct {
	NewEncryptedIDs []saml.TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewEncryptedID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsNewEncryptedID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsNewEncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsNewEncryptedID instance.
func (me *XsdGoPkgHasElemsNewEncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsNewEncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTerminate defines XsdGoPkgHasElemsTerminate
type XsdGoPkgHasElemsTerminate struct {
	Terminates []*TerminateType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Terminate"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTerminate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTerminate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTerminate instance.
func (me *XsdGoPkgHasElemsTerminate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTerminate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Terminates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemManageNameIDResponse defines XsdGoPkgHasElemManageNameIDResponse
type XsdGoPkgHasElemManageNameIDResponse struct {
	ManageNameIDResponse *TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDResponse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemManageNameIDResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemManageNameIDResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemManageNameIDResponse instance.
func (me *XsdGoPkgHasElemManageNameIDResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemManageNameIDResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ManageNameIDResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsManageNameIDResponse defines XsdGoPkgHasElemsManageNameIDResponse
type XsdGoPkgHasElemsManageNameIDResponse struct {
	ManageNameIDResponses []*TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDResponse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsManageNameIDResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsManageNameIDResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsManageNameIDResponse instance.
func (me *XsdGoPkgHasElemsManageNameIDResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsManageNameIDResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ManageNameIDResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSessionIndex defines XsdGoPkgHasElemsSessionIndex
type XsdGoPkgHasElemsSessionIndex struct {
	SessionIndexs []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol SessionIndex"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSessionIndex function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSessionIndex instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSessionIndex instance.
func (me *XsdGoPkgHasElemsSessionIndex) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSessionIndex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrReasonXsdtString defines attribute ReasonXsdtString
type XsdGoPkgHasAttrReasonXsdtString struct {
	Reason xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Reason,attr"`
}

// XsdGoPkgHasAttrNotOnOrAfterXsdtDateTime defines attribute NotOnOrAfterXsdtDateTime
type XsdGoPkgHasAttrNotOnOrAfterXsdtDateTime struct {
	NotOnOrAfter xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:protocol NotOnOrAfter,attr"`
}

// TLogoutRequestType defines TLogoutRequestType
type TLogoutRequestType struct {
	XsdGoPkgHasAttrReasonXsdtString

	XsdGoPkgHasAttrNotOnOrAfterXsdtDateTime

	TRequestAbstractType

	saml.XsdGoPkgHasElemBaseID

	saml.XsdGoPkgHasElemNameID

	saml.XsdGoPkgHasElemEncryptedID

	XsdGoPkgHasElemsSessionIndex
}

// Walk : if the WalkHandlers.TLogoutRequestType function is not nil (ie. was set by outside code), calls it with this TLogoutRequestType instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TLogoutRequestType instance.
func (me *TLogoutRequestType) Walk() (err error) {
	if fn := WalkHandlers.TLogoutRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsSessionIndex.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsLogoutRequest defines XsdGoPkgHasElemsLogoutRequest
type XsdGoPkgHasElemsLogoutRequest struct {
	LogoutRequests []*TLogoutRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutRequest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsLogoutRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsLogoutRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsLogoutRequest instance.
func (me *XsdGoPkgHasElemsLogoutRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsLogoutRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LogoutRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemLogoutRequest defines XsdGoPkgHasElemLogoutRequest
type XsdGoPkgHasElemLogoutRequest struct {
	LogoutRequest *TLogoutRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutRequest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemLogoutRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemLogoutRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemLogoutRequest instance.
func (me *XsdGoPkgHasElemLogoutRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemLogoutRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogoutRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSessionIndex defines XsdGoPkgHasElemSessionIndex
type XsdGoPkgHasElemSessionIndex struct {
	SessionIndex xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol SessionIndex"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSessionIndex function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSessionIndex instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemSessionIndex instance.
func (me *XsdGoPkgHasElemSessionIndex) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSessionIndex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemLogoutResponse defines XsdGoPkgHasElemLogoutResponse
type XsdGoPkgHasElemLogoutResponse struct {
	LogoutResponse *TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutResponse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemLogoutResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemLogoutResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemLogoutResponse instance.
func (me *XsdGoPkgHasElemLogoutResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemLogoutResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogoutResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsLogoutResponse defines XsdGoPkgHasElemsLogoutResponse
type XsdGoPkgHasElemsLogoutResponse struct {
	LogoutResponses []*TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutResponse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsLogoutResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsLogoutResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsLogoutResponse instance.
func (me *XsdGoPkgHasElemsLogoutResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsLogoutResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LogoutResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TNameIDMappingRequestType defines TNameIDMappingRequestType
type TNameIDMappingRequestType struct {
	TRequestAbstractType

	saml.XsdGoPkgHasElemBaseID

	saml.XsdGoPkgHasElemNameID

	saml.XsdGoPkgHasElemEncryptedID

	XsdGoPkgHasElemNameIDPolicy
}

// Walk : if the WalkHandlers.TNameIDMappingRequestType function is not nil (ie. was set by outside code), calls it with this TNameIDMappingRequestType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TNameIDMappingRequestType instance.
func (me *TNameIDMappingRequestType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDMappingRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemNameIDPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemNameIDMappingRequest defines XsdGoPkgHasElemNameIDMappingRequest
type XsdGoPkgHasElemNameIDMappingRequest struct {
	NameIDMappingRequest *TNameIDMappingRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingRequest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemNameIDMappingRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemNameIDMappingRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemNameIDMappingRequest instance.
func (me *XsdGoPkgHasElemNameIDMappingRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemNameIDMappingRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDMappingRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsNameIDMappingRequest defines XsdGoPkgHasElemsNameIDMappingRequest
type XsdGoPkgHasElemsNameIDMappingRequest struct {
	NameIDMappingRequests []*TNameIDMappingRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingRequest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsNameIDMappingRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsNameIDMappingRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsNameIDMappingRequest instance.
func (me *XsdGoPkgHasElemsNameIDMappingRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsNameIDMappingRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDMappingRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TNameIDMappingResponseType defines TNameIDMappingResponseType
type TNameIDMappingResponseType struct {
	TStatusResponseType

	saml.XsdGoPkgHasElemNameID

	saml.XsdGoPkgHasElemEncryptedID
}

// Walk : if the WalkHandlers.TNameIDMappingResponseType function is not nil (ie. was set by outside code), calls it with this TNameIDMappingResponseType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TNameIDMappingResponseType instance.
func (me *TNameIDMappingResponseType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDMappingResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatusResponseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemNameIDMappingResponse defines XsdGoPkgHasElemNameIDMappingResponse
type XsdGoPkgHasElemNameIDMappingResponse struct {
	NameIDMappingResponse *TNameIDMappingResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingResponse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemNameIDMappingResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemNameIDMappingResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemNameIDMappingResponse instance.
func (me *XsdGoPkgHasElemNameIDMappingResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemNameIDMappingResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDMappingResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsNameIDMappingResponse defines XsdGoPkgHasElemsNameIDMappingResponse
type XsdGoPkgHasElemsNameIDMappingResponse struct {
	NameIDMappingResponses []*TNameIDMappingResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingResponse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsNameIDMappingResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsNameIDMappingResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsNameIDMappingResponse instance.
func (me *XsdGoPkgHasElemsNameIDMappingResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsNameIDMappingResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDMappingResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasCdata defines type CDATA
type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

// XsdGoPkgWalkHandlers provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElemsAssertionIDRequest    func(*XsdGoPkgHasElemsAssertionIDRequest, bool) error
	TSubjectQueryAbstractType             func(*TSubjectQueryAbstractType, bool) error
	XsdGoPkgHasElemsIDPList               func(*XsdGoPkgHasElemsIDPList, bool) error
	XsdGoPkgHasElemArtifactResponse       func(*XsdGoPkgHasElemArtifactResponse, bool) error
	XsdGoPkgHasElemsManageNameIDRequest   func(*XsdGoPkgHasElemsManageNameIDRequest, bool) error
	XsdGoPkgHasElemsTerminate             func(*XsdGoPkgHasElemsTerminate, bool) error
	TLogoutRequestType                    func(*TLogoutRequestType, bool) error
	TStatusCodeType                       func(*TStatusCodeType, bool) error
	TAuthnQueryType                       func(*TAuthnQueryType, bool) error
	XsdGoPkgHasElemsIDPEntry              func(*XsdGoPkgHasElemsIDPEntry, bool) error
	XsdGoPkgHasElemIDPList                func(*XsdGoPkgHasElemIDPList, bool) error
	XsdGoPkgHasElemResponse               func(*XsdGoPkgHasElemResponse, bool) error
	XsdGoPkgHasElemStatus                 func(*XsdGoPkgHasElemStatus, bool) error
	XsdGoPkgHasElemsExtensions            func(*XsdGoPkgHasElemsExtensions, bool) error
	XsdGoPkgHasElemsStatusCode            func(*XsdGoPkgHasElemsStatusCode, bool) error
	XsdGoPkgHasElemRequestedAuthnContext  func(*XsdGoPkgHasElemRequestedAuthnContext, bool) error
	XsdGoPkgHasElemsAuthnRequest          func(*XsdGoPkgHasElemsAuthnRequest, bool) error
	XsdGoPkgHasElemArtifactResolve        func(*XsdGoPkgHasElemArtifactResolve, bool) error
	XsdGoPkgHasElemExtensions             func(*XsdGoPkgHasElemExtensions, bool) error
	TRequestedAuthnContextType            func(*TRequestedAuthnContextType, bool) error
	XsdGoPkgHasElemAttributeQuery         func(*XsdGoPkgHasElemAttributeQuery, bool) error
	XsdGoPkgHasElemAuthzDecisionQuery     func(*XsdGoPkgHasElemAuthzDecisionQuery, bool) error
	XsdGoPkgHasElemsNameIDPolicy          func(*XsdGoPkgHasElemsNameIDPolicy, bool) error
	XsdGoPkgHasElemArtifact               func(*XsdGoPkgHasElemArtifact, bool) error
	XsdGoPkgHasElemsLogoutRequest         func(*XsdGoPkgHasElemsLogoutRequest, bool) error
	XsdGoPkgHasElemLogoutResponse         func(*XsdGoPkgHasElemLogoutResponse, bool) error
	TStatusType                           func(*TStatusType, bool) error
	XsdGoPkgHasElemNameIDMappingResponse  func(*XsdGoPkgHasElemNameIDMappingResponse, bool) error
	TNameIDPolicyType                     func(*TNameIDPolicyType, bool) error
	XsdGoPkgHasElemNameIDPolicy           func(*XsdGoPkgHasElemNameIDPolicy, bool) error
	TIDPEntryType                         func(*TIDPEntryType, bool) error
	XsdGoPkgHasElemAuthnQuery             func(*XsdGoPkgHasElemAuthnQuery, bool) error
	TAuthnRequestType                     func(*TAuthnRequestType, bool) error
	XsdGoPkgHasElemIDPEntry               func(*XsdGoPkgHasElemIDPEntry, bool) error
	XsdGoPkgHasElemsArtifactResolve       func(*XsdGoPkgHasElemsArtifactResolve, bool) error
	TerminateType                         func(*TerminateType, bool) error
	XsdGoPkgHasElemsManageNameIDResponse  func(*XsdGoPkgHasElemsManageNameIDResponse, bool) error
	XsdGoPkgHasElemSessionIndex           func(*XsdGoPkgHasElemSessionIndex, bool) error
	XsdGoPkgHasElemsNameIDMappingResponse func(*XsdGoPkgHasElemsNameIDMappingResponse, bool) error
	TAuthzDecisionQueryType               func(*TAuthzDecisionQueryType, bool) error
	TIDPListType                          func(*TIDPListType, bool) error
	XsdGoPkgHasElemScoping                func(*XsdGoPkgHasElemScoping, bool) error
	XsdGoPkgHasElemsGetComplete           func(*XsdGoPkgHasElemsGetComplete, bool) error
	XsdGoPkgHasElemsArtifact              func(*XsdGoPkgHasElemsArtifact, bool) error
	XsdGoPkgHasElemsNewEncryptedID        func(*XsdGoPkgHasElemsNewEncryptedID, bool) error
	XsdGoPkgHasElemsNameIDMappingRequest  func(*XsdGoPkgHasElemsNameIDMappingRequest, bool) error
	TRequestAbstractType                  func(*TRequestAbstractType, bool) error
	XsdGoPkgHasElemManageNameIDResponse   func(*XsdGoPkgHasElemManageNameIDResponse, bool) error
	XsdGoPkgHasElemLogoutRequest          func(*XsdGoPkgHasElemLogoutRequest, bool) error
	XsdGoPkgHasCdata                      func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElemsRequestedAuthnContext func(*XsdGoPkgHasElemsRequestedAuthnContext, bool) error
	XsdGoPkgHasElemsRequesterID           func(*XsdGoPkgHasElemsRequesterID, bool) error
	TArtifactResolveType                  func(*TArtifactResolveType, bool) error
	XsdGoPkgHasElemsSessionIndex          func(*XsdGoPkgHasElemsSessionIndex, bool) error
	XsdGoPkgHasElemsLogoutResponse        func(*XsdGoPkgHasElemsLogoutResponse, bool) error
	XsdGoPkgHasElemStatusCode             func(*XsdGoPkgHasElemStatusCode, bool) error
	XsdGoPkgHasElemAssertionIDRequest     func(*XsdGoPkgHasElemAssertionIDRequest, bool) error
	XsdGoPkgHasElemSubjectQuery           func(*XsdGoPkgHasElemSubjectQuery, bool) error
	XsdGoPkgHasElemsAuthzDecisionQuery    func(*XsdGoPkgHasElemsAuthzDecisionQuery, bool) error
	XsdGoPkgHasElemNewID                  func(*XsdGoPkgHasElemNewID, bool) error
	TNameIDMappingRequestType             func(*TNameIDMappingRequestType, bool) error
	XsdGoPkgHasElemsStatusDetail          func(*XsdGoPkgHasElemsStatusDetail, bool) error
	XsdGoPkgHasElemRequesterID            func(*XsdGoPkgHasElemRequesterID, bool) error
	TArtifactResponseType                 func(*TArtifactResponseType, bool) error
	XsdGoPkgHasElemNameIDMappingRequest   func(*XsdGoPkgHasElemNameIDMappingRequest, bool) error
	TAttributeQueryType                   func(*TAttributeQueryType, bool) error
	XsdGoPkgHasElemsStatus                func(*XsdGoPkgHasElemsStatus, bool) error
	XsdGoPkgHasElemManageNameIDRequest    func(*XsdGoPkgHasElemManageNameIDRequest, bool) error
	TStatusDetailType                     func(*TStatusDetailType, bool) error
	TAssertionIDRequestType               func(*TAssertionIDRequestType, bool) error
	XsdGoPkgHasElemsSubjectQuery          func(*XsdGoPkgHasElemsSubjectQuery, bool) error
	XsdGoPkgHasElemsAuthnQuery            func(*XsdGoPkgHasElemsAuthnQuery, bool) error
	XsdGoPkgHasElemsAttributeQuery        func(*XsdGoPkgHasElemsAttributeQuery, bool) error
	XsdGoPkgHasElemGetComplete            func(*XsdGoPkgHasElemGetComplete, bool) error
	XsdGoPkgHasElemAuthnRequest           func(*XsdGoPkgHasElemAuthnRequest, bool) error
	TResponseType                         func(*TResponseType, bool) error
	XsdGoPkgHasElemStatusMessage          func(*XsdGoPkgHasElemStatusMessage, bool) error
	TNameIDMappingResponseType            func(*TNameIDMappingResponseType, bool) error
	XsdGoPkgHasElemsResponse              func(*XsdGoPkgHasElemsResponse, bool) error
	XsdGoPkgHasElemsStatusMessage         func(*XsdGoPkgHasElemsStatusMessage, bool) error
	XsdGoPkgHasElemsScoping               func(*XsdGoPkgHasElemsScoping, bool) error
	TStatusResponseType                   func(*TStatusResponseType, bool) error
	XsdGoPkgHasElemsArtifactResponse      func(*XsdGoPkgHasElemsArtifactResponse, bool) error
	XsdGoPkgHasElemsNewID                 func(*XsdGoPkgHasElemsNewID, bool) error
	TExtensionsType                       func(*TExtensionsType, bool) error
	TScopingType                          func(*TScopingType, bool) error
	XsdGoPkgHasElemNewEncryptedID         func(*XsdGoPkgHasElemNewEncryptedID, bool) error
	XsdGoPkgHasElemTerminate              func(*XsdGoPkgHasElemTerminate, bool) error
	TManageNameIDRequestType              func(*TManageNameIDRequestType, bool) error
	XsdGoPkgHasElemStatusDetail           func(*XsdGoPkgHasElemStatusDetail, bool) error
}
