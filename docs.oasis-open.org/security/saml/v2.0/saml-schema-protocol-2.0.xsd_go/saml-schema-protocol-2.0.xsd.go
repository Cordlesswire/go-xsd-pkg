//	Auto-generated by the "go-xsd" package located at:
//		github.com/miracl/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		docs.oasis-open.org/security/saml/v2.0/saml-schema-protocol-2.0.xsd
package go_SamlProtocol20

//	Document identifier: saml-schema-protocol-2.0
//	Location: http://docs.oasis-open.org/security/saml/v2.0/
//	Revision history:
//	V1.0 (November, 2002):
//	Initial Standard Schema.
//	V1.1 (September, 2003):
//	Updates within the same V1.0 namespace.
//	V2.0 (March, 2005):
//	New protocol schema based in a SAML V2.0 namespace.

import (
	saml "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd_go"
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

type TExtensionsType struct {
}

//	If the WalkHandlers.TExtensionsType function is not nil (ie. was set by outside code), calls it with this TExtensionsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TExtensionsType instance.
func (me *TExtensionsType) Walk() (err error) {
	if fn := WalkHandlers.TExtensionsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Extensions struct {
	Extensions *TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Extensions"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Extensions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Extensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Extensions instance.
func (me *XsdGoPkgHasElem_Extensions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Extensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Extensions struct {
	Extensionses []*TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Extensions"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Extensions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Extensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Extensions instance.
func (me *XsdGoPkgHasElems_Extensions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Extensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extensionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StatusMessage struct {
	StatusMessage xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusMessage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StatusMessage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StatusMessage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StatusMessage instance.
func (me *XsdGoPkgHasElem_StatusMessage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StatusMessage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TStatusDetailType struct {
}

//	If the WalkHandlers.TStatusDetailType function is not nil (ie. was set by outside code), calls it with this TStatusDetailType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TStatusDetailType instance.
func (me *TStatusDetailType) Walk() (err error) {
	if fn := WalkHandlers.TStatusDetailType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StatusDetail struct {
	StatusDetail *TStatusDetailType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusDetail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StatusDetail function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StatusDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StatusDetail instance.
func (me *XsdGoPkgHasElem_StatusDetail) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StatusDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StatusDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_XsdtAnyURI_ struct {
	Value xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Value,attr"`
}

type TStatusCodeType struct {
	XsdGoPkgHasElem_StatusCode

	XsdGoPkgHasAttr_Value_XsdtAnyURI_
}

//	If the WalkHandlers.TStatusCodeType function is not nil (ie. was set by outside code), calls it with this TStatusCodeType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TStatusCodeType instance.
func (me *TStatusCodeType) Walk() (err error) {
	if fn := WalkHandlers.TStatusCodeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StatusCode struct {
	StatusCode *TStatusCodeType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StatusCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StatusCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StatusCode instance.
func (me *XsdGoPkgHasElem_StatusCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StatusCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StatusCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TStatusType struct {
	XsdGoPkgHasElem_StatusMessage

	XsdGoPkgHasElem_StatusDetail

	XsdGoPkgHasElem_StatusCode
}

//	If the WalkHandlers.TStatusType function is not nil (ie. was set by outside code), calls it with this TStatusType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TStatusType instance.
func (me *TStatusType) Walk() (err error) {
	if fn := WalkHandlers.TStatusType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StatusCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StatusMessage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StatusDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Status struct {
	Status *TStatusType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Status"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Status function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Status instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Status instance.
func (me *XsdGoPkgHasElem_Status) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Status; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Status.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Status struct {
	Statuses []*TStatusType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Status"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Status function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Status instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Status instance.
func (me *XsdGoPkgHasElems_Status) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Status; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Statuses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StatusCode struct {
	StatusCodes []*TStatusCodeType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StatusCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StatusCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StatusCode instance.
func (me *XsdGoPkgHasElems_StatusCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StatusCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StatusCodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StatusMessage struct {
	StatusMessages []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusMessage"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StatusMessage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StatusMessage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StatusMessage instance.
func (me *XsdGoPkgHasElems_StatusMessage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StatusMessage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StatusDetail struct {
	StatusDetails []*TStatusDetailType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusDetail"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StatusDetail function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StatusDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StatusDetail instance.
func (me *XsdGoPkgHasElems_StatusDetail) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StatusDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StatusDetails {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Destination_XsdtAnyURI_ struct {
	Destination xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Destination,attr"`
}

type XsdGoPkgHasAttr_Consent_XsdtAnyURI_ struct {
	Consent xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Consent,attr"`
}

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"urn:oasis:names:tc:SAML:2.0:protocol ID,attr"`
}

type XsdGoPkgHasAttr_Version_XsdtString_ struct {
	Version xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Version,attr"`
}

type XsdGoPkgHasAttr_IssueInstant_XsdtDateTime_ struct {
	IssueInstant xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:protocol IssueInstant,attr"`
}

type TRequestAbstractType struct {
	XsdGoPkgHasElem_Extensions

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Version_XsdtString_

	XsdGoPkgHasAttr_IssueInstant_XsdtDateTime_

	XsdGoPkgHasAttr_Destination_XsdtAnyURI_

	XsdGoPkgHasAttr_Consent_XsdtAnyURI_

	saml.XsdGoPkgHasElem_Issuer

	ds.XsdGoPkgHasElem_Signature
}

//	If the WalkHandlers.TRequestAbstractType function is not nil (ie. was set by outside code), calls it with this TRequestAbstractType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TRequestAbstractType instance.
func (me *TRequestAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TRequestAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAssertionIDRequestType struct {
	saml.XsdGoPkgHasElems_AssertionIDRef

	TRequestAbstractType
}

//	If the WalkHandlers.TAssertionIDRequestType function is not nil (ie. was set by outside code), calls it with this TAssertionIDRequestType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAssertionIDRequestType instance.
func (me *TAssertionIDRequestType) Walk() (err error) {
	if fn := WalkHandlers.TAssertionIDRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssertionIDRequest struct {
	AssertionIDRequest *TAssertionIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AssertionIDRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssertionIDRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssertionIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssertionIDRequest instance.
func (me *XsdGoPkgHasElem_AssertionIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssertionIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssertionIDRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssertionIDRequest struct {
	AssertionIDRequests []*TAssertionIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AssertionIDRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssertionIDRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssertionIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssertionIDRequest instance.
func (me *XsdGoPkgHasElems_AssertionIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssertionIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssertionIDRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSubjectQueryAbstractType struct {
	TRequestAbstractType

	saml.XsdGoPkgHasElem_Subject
}

//	If the WalkHandlers.TSubjectQueryAbstractType function is not nil (ie. was set by outside code), calls it with this TSubjectQueryAbstractType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSubjectQueryAbstractType instance.
func (me *TSubjectQueryAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectQueryAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubjectQuery struct {
	SubjectQueries []*TSubjectQueryAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:protocol SubjectQuery"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubjectQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubjectQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubjectQuery instance.
func (me *XsdGoPkgHasElems_SubjectQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubjectQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubjectQuery struct {
	SubjectQuery *TSubjectQueryAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:protocol SubjectQuery"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubjectQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubjectQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubjectQuery instance.
func (me *XsdGoPkgHasElem_SubjectQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubjectQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAuthnContextComparisonType xsdt.String

//	Since TAuthnContextComparisonType is just a simple String type, this merely returns the current string value.
func (me TAuthnContextComparisonType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TAuthnContextComparisonType's alias type xsdt.String.
func (me TAuthnContextComparisonType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TAuthnContextComparisonType is "exact".
func (me TAuthnContextComparisonType) IsExact() bool { return me.String() == "exact" }

//	Returns true if the value of this enumerated TAuthnContextComparisonType is "minimum".
func (me TAuthnContextComparisonType) IsMinimum() bool { return me.String() == "minimum" }

//	Returns true if the value of this enumerated TAuthnContextComparisonType is "maximum".
func (me TAuthnContextComparisonType) IsMaximum() bool { return me.String() == "maximum" }

//	Returns true if the value of this enumerated TAuthnContextComparisonType is "better".
func (me TAuthnContextComparisonType) IsBetter() bool { return me.String() == "better" }

//	Since TAuthnContextComparisonType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAuthnContextComparisonType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_Comparison_TAuthnContextComparisonType_ struct {
	Comparison TAuthnContextComparisonType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Comparison,attr"`
}

type TRequestedAuthnContextType struct {
	saml.XsdGoPkgHasElems_AuthnContextClassRef

	saml.XsdGoPkgHasElems_AuthnContextDeclRef

	XsdGoPkgHasAttr_Comparison_TAuthnContextComparisonType_
}

//	If the WalkHandlers.TRequestedAuthnContextType function is not nil (ie. was set by outside code), calls it with this TRequestedAuthnContextType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TRequestedAuthnContextType instance.
func (me *TRequestedAuthnContextType) Walk() (err error) {
	if fn := WalkHandlers.TRequestedAuthnContextType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequestedAuthnContext struct {
	RequestedAuthnContext *TRequestedAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequestedAuthnContext"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequestedAuthnContext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequestedAuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RequestedAuthnContext instance.
func (me *XsdGoPkgHasElem_RequestedAuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequestedAuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RequestedAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_SessionIndex_XsdtString_ struct {
	SessionIndex xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol SessionIndex,attr"`
}

type TAuthnQueryType struct {
	TSubjectQueryAbstractType

	XsdGoPkgHasElem_RequestedAuthnContext

	XsdGoPkgHasAttr_SessionIndex_XsdtString_
}

//	If the WalkHandlers.TAuthnQueryType function is not nil (ie. was set by outside code), calls it with this TAuthnQueryType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TAuthnQueryType instance.
func (me *TAuthnQueryType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnQueryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectQueryAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RequestedAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthnQuery struct {
	AuthnQuery *TAuthnQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnQuery"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthnQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthnQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthnQuery instance.
func (me *XsdGoPkgHasElem_AuthnQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthnQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthnQuery struct {
	AuthnQueries []*TAuthnQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnQuery"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthnQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthnQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthnQuery instance.
func (me *XsdGoPkgHasElems_AuthnQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthnQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequestedAuthnContext struct {
	RequestedAuthnContexts []*TRequestedAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequestedAuthnContext"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequestedAuthnContext function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequestedAuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequestedAuthnContext instance.
func (me *XsdGoPkgHasElems_RequestedAuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequestedAuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RequestedAuthnContexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAttributeQueryType struct {
	TSubjectQueryAbstractType

	saml.XsdGoPkgHasElems_Attribute
}

//	If the WalkHandlers.TAttributeQueryType function is not nil (ie. was set by outside code), calls it with this TAttributeQueryType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAttributeQueryType instance.
func (me *TAttributeQueryType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeQueryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectQueryAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttributeQuery struct {
	AttributeQuery *TAttributeQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AttributeQuery"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttributeQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttributeQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AttributeQuery instance.
func (me *XsdGoPkgHasElem_AttributeQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttributeQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttributeQuery struct {
	AttributeQueries []*TAttributeQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AttributeQuery"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttributeQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttributeQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttributeQuery instance.
func (me *XsdGoPkgHasElems_AttributeQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttributeQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Resource_XsdtAnyURI_ struct {
	Resource xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Resource,attr"`
}

type TAuthzDecisionQueryType struct {
	TSubjectQueryAbstractType

	saml.XsdGoPkgHasElems_Action

	saml.XsdGoPkgHasElem_Evidence

	XsdGoPkgHasAttr_Resource_XsdtAnyURI_
}

//	If the WalkHandlers.TAuthzDecisionQueryType function is not nil (ie. was set by outside code), calls it with this TAuthzDecisionQueryType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TAuthzDecisionQueryType instance.
func (me *TAuthzDecisionQueryType) Walk() (err error) {
	if fn := WalkHandlers.TAuthzDecisionQueryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectQueryAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthzDecisionQuery struct {
	AuthzDecisionQuery *TAuthzDecisionQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthzDecisionQuery"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthzDecisionQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthzDecisionQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthzDecisionQuery instance.
func (me *XsdGoPkgHasElem_AuthzDecisionQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthzDecisionQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthzDecisionQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthzDecisionQuery struct {
	AuthzDecisionQueries []*TAuthzDecisionQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthzDecisionQuery"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthzDecisionQuery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthzDecisionQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthzDecisionQuery instance.
func (me *XsdGoPkgHasElems_AuthzDecisionQuery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthzDecisionQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthzDecisionQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_AttributeConsumingServiceIndex_XsdtUnsignedShort_ struct {
	AttributeConsumingServiceIndex xsdt.UnsignedShort `xml:"urn:oasis:names:tc:SAML:2.0:protocol AttributeConsumingServiceIndex,attr"`
}

type XsdGoPkgHasAttr_ProviderName_XsdtString_ struct {
	ProviderName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol ProviderName,attr"`
}

type XsdGoPkgHasAttr_IsPassive_XsdtBoolean_ struct {
	IsPassive xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:protocol IsPassive,attr"`
}

type XsdGoPkgHasAttr_AssertionConsumerServiceIndex_XsdtUnsignedShort_ struct {
	AssertionConsumerServiceIndex xsdt.UnsignedShort `xml:"urn:oasis:names:tc:SAML:2.0:protocol AssertionConsumerServiceIndex,attr"`
}

type XsdGoPkgHasAttr_Format_XsdtAnyURI_ struct {
	Format xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Format,attr"`
}

type XsdGoPkgHasAttr_SPNameQualifier_XsdtString_ struct {
	SPNameQualifier xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol SPNameQualifier,attr"`
}

type XsdGoPkgHasAttr_AllowCreate_XsdtBoolean_ struct {
	AllowCreate xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:protocol AllowCreate,attr"`
}

type TNameIDPolicyType struct {
	XsdGoPkgHasAttr_Format_XsdtAnyURI_

	XsdGoPkgHasAttr_SPNameQualifier_XsdtString_

	XsdGoPkgHasAttr_AllowCreate_XsdtBoolean_
}

//	If the WalkHandlers.TNameIDPolicyType function is not nil (ie. was set by outside code), calls it with this TNameIDPolicyType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TNameIDPolicyType instance.
func (me *TNameIDPolicyType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDPolicyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NameIDPolicy struct {
	NameIDPolicy *TNameIDPolicyType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDPolicy"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NameIDPolicy function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NameIDPolicy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NameIDPolicy instance.
func (me *XsdGoPkgHasElem_NameIDPolicy) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NameIDPolicy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Loc_XsdtAnyURI_ struct {
	Loc xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol Loc,attr"`
}

type XsdGoPkgHasAttr_ProviderID_XsdtAnyURI_ struct {
	ProviderID xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol ProviderID,attr"`
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Name,attr"`
}

type TIDPEntryType struct {
	XsdGoPkgHasAttr_Loc_XsdtAnyURI_

	XsdGoPkgHasAttr_ProviderID_XsdtAnyURI_

	XsdGoPkgHasAttr_Name_XsdtString_
}

//	If the WalkHandlers.TIDPEntryType function is not nil (ie. was set by outside code), calls it with this TIDPEntryType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TIDPEntryType instance.
func (me *TIDPEntryType) Walk() (err error) {
	if fn := WalkHandlers.TIDPEntryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IDPEntry struct {
	IDPEntries []*TIDPEntryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPEntry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IDPEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IDPEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IDPEntry instance.
func (me *XsdGoPkgHasElems_IDPEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IDPEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IDPEntries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GetComplete struct {
	GetComplete xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol GetComplete"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GetComplete function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GetComplete instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GetComplete instance.
func (me *XsdGoPkgHasElem_GetComplete) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GetComplete; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TIDPListType struct {
	XsdGoPkgHasElems_IDPEntry

	XsdGoPkgHasElem_GetComplete
}

//	If the WalkHandlers.TIDPListType function is not nil (ie. was set by outside code), calls it with this TIDPListType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TIDPListType instance.
func (me *TIDPListType) Walk() (err error) {
	if fn := WalkHandlers.TIDPListType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_IDPEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GetComplete.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IDPList struct {
	IDPList *TIDPListType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDPList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDPList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IDPList instance.
func (me *XsdGoPkgHasElem_IDPList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDPList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IDPList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RequesterID struct {
	RequesterIDs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequesterID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RequesterID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RequesterID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RequesterID instance.
func (me *XsdGoPkgHasElems_RequesterID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RequesterID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ProxyCount_XsdtNonNegativeInteger_ struct {
	ProxyCount xsdt.NonNegativeInteger `xml:"urn:oasis:names:tc:SAML:2.0:protocol ProxyCount,attr"`
}

type TScopingType struct {
	XsdGoPkgHasElem_IDPList

	XsdGoPkgHasElems_RequesterID

	XsdGoPkgHasAttr_ProxyCount_XsdtNonNegativeInteger_
}

//	If the WalkHandlers.TScopingType function is not nil (ie. was set by outside code), calls it with this TScopingType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TScopingType instance.
func (me *TScopingType) Walk() (err error) {
	if fn := WalkHandlers.TScopingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IDPList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RequesterID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Scoping struct {
	Scoping *TScopingType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Scoping"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Scoping function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Scoping instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Scoping instance.
func (me *XsdGoPkgHasElem_Scoping) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Scoping; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scoping.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_AssertionConsumerServiceURL_XsdtAnyURI_ struct {
	AssertionConsumerServiceURL xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol AssertionConsumerServiceURL,attr"`
}

type XsdGoPkgHasAttr_ForceAuthn_XsdtBoolean_ struct {
	ForceAuthn xsdt.Boolean `xml:"urn:oasis:names:tc:SAML:2.0:protocol ForceAuthn,attr"`
}

type XsdGoPkgHasAttr_ProtocolBinding_XsdtAnyURI_ struct {
	ProtocolBinding xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol ProtocolBinding,attr"`
}

type TAuthnRequestType struct {
	XsdGoPkgHasAttr_ForceAuthn_XsdtBoolean_

	XsdGoPkgHasAttr_ProtocolBinding_XsdtAnyURI_

	XsdGoPkgHasElem_NameIDPolicy

	saml.XsdGoPkgHasElem_Conditions

	XsdGoPkgHasElem_Scoping

	XsdGoPkgHasAttr_AssertionConsumerServiceURL_XsdtAnyURI_

	XsdGoPkgHasAttr_ProviderName_XsdtString_

	XsdGoPkgHasAttr_IsPassive_XsdtBoolean_

	XsdGoPkgHasAttr_AssertionConsumerServiceIndex_XsdtUnsignedShort_

	TRequestAbstractType

	saml.XsdGoPkgHasElem_Subject

	XsdGoPkgHasElem_RequestedAuthnContext

	XsdGoPkgHasAttr_AttributeConsumingServiceIndex_XsdtUnsignedShort_
}

//	If the WalkHandlers.TAuthnRequestType function is not nil (ie. was set by outside code), calls it with this TAuthnRequestType instance as the single argument. Then calls the Walk() method on 4/13 embed(s) and 0/0 field(s) belonging to this TAuthnRequestType instance.
func (me *TAuthnRequestType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RequestedAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NameIDPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Scoping.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AuthnRequest struct {
	AuthnRequest *TAuthnRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AuthnRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AuthnRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AuthnRequest instance.
func (me *XsdGoPkgHasElem_AuthnRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AuthnRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AuthnRequest struct {
	AuthnRequests []*TAuthnRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AuthnRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AuthnRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AuthnRequest instance.
func (me *XsdGoPkgHasElems_AuthnRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AuthnRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NameIDPolicy struct {
	NameIDPolicies []*TNameIDPolicyType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDPolicy"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NameIDPolicy function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NameIDPolicy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NameIDPolicy instance.
func (me *XsdGoPkgHasElems_NameIDPolicy) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NameIDPolicy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDPolicies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Scoping struct {
	Scopings []*TScopingType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Scoping"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Scoping function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Scoping instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Scoping instance.
func (me *XsdGoPkgHasElems_Scoping) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Scoping; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Scopings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RequesterID struct {
	RequesterID xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequesterID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RequesterID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RequesterID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RequesterID instance.
func (me *XsdGoPkgHasElem_RequesterID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RequesterID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IDPList struct {
	IDPLists []*TIDPListType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IDPList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IDPList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IDPList instance.
func (me *XsdGoPkgHasElems_IDPList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IDPList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IDPLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IDPEntry struct {
	IDPEntry *TIDPEntryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPEntry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDPEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDPEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IDPEntry instance.
func (me *XsdGoPkgHasElem_IDPEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDPEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IDPEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GetComplete struct {
	GetCompletes []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol GetComplete"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GetComplete function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GetComplete instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GetComplete instance.
func (me *XsdGoPkgHasElems_GetComplete) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GetComplete; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_InResponseTo_XsdtNCName_ struct {
	InResponseTo xsdt.NCName `xml:"urn:oasis:names:tc:SAML:2.0:protocol InResponseTo,attr"`
}

type TStatusResponseType struct {
	XsdGoPkgHasAttr_Version_XsdtString_

	XsdGoPkgHasAttr_Destination_XsdtAnyURI_

	XsdGoPkgHasAttr_Consent_XsdtAnyURI_

	saml.XsdGoPkgHasElem_Issuer

	XsdGoPkgHasElem_Status

	XsdGoPkgHasAttr_InResponseTo_XsdtNCName_

	XsdGoPkgHasAttr_IssueInstant_XsdtDateTime_

	ds.XsdGoPkgHasElem_Signature

	XsdGoPkgHasElem_Extensions

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TStatusResponseType function is not nil (ie. was set by outside code), calls it with this TStatusResponseType instance as the single argument. Then calls the Walk() method on 2/10 embed(s) and 0/0 field(s) belonging to this TStatusResponseType instance.
func (me *TStatusResponseType) Walk() (err error) {
	if fn := WalkHandlers.TStatusResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Status.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TResponseType struct {
	TStatusResponseType

	saml.XsdGoPkgHasElems_Assertion

	saml.XsdGoPkgHasElems_EncryptedAssertion
}

//	If the WalkHandlers.TResponseType function is not nil (ie. was set by outside code), calls it with this TResponseType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TResponseType instance.
func (me *TResponseType) Walk() (err error) {
	if fn := WalkHandlers.TResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatusResponseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Response struct {
	Response *TResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Response"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Response function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Response instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Response instance.
func (me *XsdGoPkgHasElem_Response) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Response; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Response.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Response struct {
	Responses []*TResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Response"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Response function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Response instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Response instance.
func (me *XsdGoPkgHasElems_Response) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Response; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Responses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Artifact struct {
	Artifact xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Artifact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Artifact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Artifact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Artifact instance.
func (me *XsdGoPkgHasElem_Artifact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Artifact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArtifactResolveType struct {
	TRequestAbstractType

	XsdGoPkgHasElem_Artifact
}

//	If the WalkHandlers.TArtifactResolveType function is not nil (ie. was set by outside code), calls it with this TArtifactResolveType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TArtifactResolveType instance.
func (me *TArtifactResolveType) Walk() (err error) {
	if fn := WalkHandlers.TArtifactResolveType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Artifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ArtifactResolve struct {
	ArtifactResolve *TArtifactResolveType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResolve"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ArtifactResolve function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ArtifactResolve instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ArtifactResolve instance.
func (me *XsdGoPkgHasElem_ArtifactResolve) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ArtifactResolve; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArtifactResolve.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ArtifactResolve struct {
	ArtifactResolves []*TArtifactResolveType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResolve"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ArtifactResolve function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ArtifactResolve instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ArtifactResolve instance.
func (me *XsdGoPkgHasElems_ArtifactResolve) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ArtifactResolve; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArtifactResolves {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Artifact struct {
	Artifacts []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Artifact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Artifact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Artifact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Artifact instance.
func (me *XsdGoPkgHasElems_Artifact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Artifact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TArtifactResponseType struct {
	TStatusResponseType
}

//	If the WalkHandlers.TArtifactResponseType function is not nil (ie. was set by outside code), calls it with this TArtifactResponseType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TArtifactResponseType instance.
func (me *TArtifactResponseType) Walk() (err error) {
	if fn := WalkHandlers.TArtifactResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatusResponseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ArtifactResponse struct {
	ArtifactResponse *TArtifactResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ArtifactResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ArtifactResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ArtifactResponse instance.
func (me *XsdGoPkgHasElem_ArtifactResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ArtifactResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArtifactResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ArtifactResponse struct {
	ArtifactResponses []*TArtifactResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ArtifactResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ArtifactResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ArtifactResponse instance.
func (me *XsdGoPkgHasElems_ArtifactResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ArtifactResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArtifactResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NewID struct {
	NewID xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NewID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NewID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NewID instance.
func (me *XsdGoPkgHasElem_NewID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NewID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NewEncryptedID struct {
	NewEncryptedID saml.TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewEncryptedID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NewEncryptedID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NewEncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NewEncryptedID instance.
func (me *XsdGoPkgHasElem_NewEncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NewEncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TerminateType struct {
}

//	If the WalkHandlers.TerminateType function is not nil (ie. was set by outside code), calls it with this TerminateType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TerminateType instance.
func (me *TerminateType) Walk() (err error) {
	if fn := WalkHandlers.TerminateType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Terminate struct {
	Terminate *TerminateType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Terminate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Terminate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Terminate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Terminate instance.
func (me *XsdGoPkgHasElem_Terminate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Terminate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Terminate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TManageNameIDRequestType struct {
	XsdGoPkgHasElem_NewID

	XsdGoPkgHasElem_NewEncryptedID

	XsdGoPkgHasElem_Terminate

	TRequestAbstractType

	saml.XsdGoPkgHasElem_NameID

	saml.XsdGoPkgHasElem_EncryptedID
}

//	If the WalkHandlers.TManageNameIDRequestType function is not nil (ie. was set by outside code), calls it with this TManageNameIDRequestType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TManageNameIDRequestType instance.
func (me *TManageNameIDRequestType) Walk() (err error) {
	if fn := WalkHandlers.TManageNameIDRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NewID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NewEncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Terminate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ManageNameIDRequest struct {
	ManageNameIDRequest *TManageNameIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ManageNameIDRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ManageNameIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ManageNameIDRequest instance.
func (me *XsdGoPkgHasElem_ManageNameIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ManageNameIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ManageNameIDRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ManageNameIDRequest struct {
	ManageNameIDRequests []*TManageNameIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ManageNameIDRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ManageNameIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ManageNameIDRequest instance.
func (me *XsdGoPkgHasElems_ManageNameIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ManageNameIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ManageNameIDRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NewID struct {
	NewIDs []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NewID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NewID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NewID instance.
func (me *XsdGoPkgHasElems_NewID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NewID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NewEncryptedID struct {
	NewEncryptedIDs []saml.TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewEncryptedID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NewEncryptedID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NewEncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NewEncryptedID instance.
func (me *XsdGoPkgHasElems_NewEncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NewEncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Terminate struct {
	Terminates []*TerminateType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Terminate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Terminate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Terminate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Terminate instance.
func (me *XsdGoPkgHasElems_Terminate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Terminate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Terminates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ManageNameIDResponse struct {
	ManageNameIDResponse *TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ManageNameIDResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ManageNameIDResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ManageNameIDResponse instance.
func (me *XsdGoPkgHasElem_ManageNameIDResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ManageNameIDResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ManageNameIDResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ManageNameIDResponse struct {
	ManageNameIDResponses []*TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ManageNameIDResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ManageNameIDResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ManageNameIDResponse instance.
func (me *XsdGoPkgHasElems_ManageNameIDResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ManageNameIDResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ManageNameIDResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SessionIndex struct {
	SessionIndexs []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol SessionIndex"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SessionIndex function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SessionIndex instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SessionIndex instance.
func (me *XsdGoPkgHasElems_SessionIndex) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SessionIndex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Reason_XsdtString_ struct {
	Reason xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Reason,attr"`
}

type XsdGoPkgHasAttr_NotOnOrAfter_XsdtDateTime_ struct {
	NotOnOrAfter xsdt.DateTime `xml:"urn:oasis:names:tc:SAML:2.0:protocol NotOnOrAfter,attr"`
}

type TLogoutRequestType struct {
	XsdGoPkgHasAttr_Reason_XsdtString_

	XsdGoPkgHasAttr_NotOnOrAfter_XsdtDateTime_

	TRequestAbstractType

	saml.XsdGoPkgHasElem_BaseID

	saml.XsdGoPkgHasElem_NameID

	saml.XsdGoPkgHasElem_EncryptedID

	XsdGoPkgHasElems_SessionIndex
}

//	If the WalkHandlers.TLogoutRequestType function is not nil (ie. was set by outside code), calls it with this TLogoutRequestType instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TLogoutRequestType instance.
func (me *TLogoutRequestType) Walk() (err error) {
	if fn := WalkHandlers.TLogoutRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SessionIndex.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LogoutRequest struct {
	LogoutRequests []*TLogoutRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LogoutRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LogoutRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LogoutRequest instance.
func (me *XsdGoPkgHasElems_LogoutRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LogoutRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LogoutRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LogoutRequest struct {
	LogoutRequest *TLogoutRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LogoutRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LogoutRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LogoutRequest instance.
func (me *XsdGoPkgHasElem_LogoutRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LogoutRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogoutRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SessionIndex struct {
	SessionIndex xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol SessionIndex"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SessionIndex function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SessionIndex instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SessionIndex instance.
func (me *XsdGoPkgHasElem_SessionIndex) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SessionIndex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LogoutResponse struct {
	LogoutResponse *TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LogoutResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LogoutResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LogoutResponse instance.
func (me *XsdGoPkgHasElem_LogoutResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LogoutResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogoutResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LogoutResponse struct {
	LogoutResponses []*TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LogoutResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LogoutResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LogoutResponse instance.
func (me *XsdGoPkgHasElems_LogoutResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LogoutResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LogoutResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNameIDMappingRequestType struct {
	TRequestAbstractType

	saml.XsdGoPkgHasElem_BaseID

	saml.XsdGoPkgHasElem_NameID

	saml.XsdGoPkgHasElem_EncryptedID

	XsdGoPkgHasElem_NameIDPolicy
}

//	If the WalkHandlers.TNameIDMappingRequestType function is not nil (ie. was set by outside code), calls it with this TNameIDMappingRequestType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TNameIDMappingRequestType instance.
func (me *TNameIDMappingRequestType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDMappingRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NameIDPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NameIDMappingRequest struct {
	NameIDMappingRequest *TNameIDMappingRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NameIDMappingRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NameIDMappingRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NameIDMappingRequest instance.
func (me *XsdGoPkgHasElem_NameIDMappingRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NameIDMappingRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDMappingRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NameIDMappingRequest struct {
	NameIDMappingRequests []*TNameIDMappingRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingRequest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NameIDMappingRequest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NameIDMappingRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NameIDMappingRequest instance.
func (me *XsdGoPkgHasElems_NameIDMappingRequest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NameIDMappingRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDMappingRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TNameIDMappingResponseType struct {
	TStatusResponseType

	saml.XsdGoPkgHasElem_NameID

	saml.XsdGoPkgHasElem_EncryptedID
}

//	If the WalkHandlers.TNameIDMappingResponseType function is not nil (ie. was set by outside code), calls it with this TNameIDMappingResponseType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TNameIDMappingResponseType instance.
func (me *TNameIDMappingResponseType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDMappingResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatusResponseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NameIDMappingResponse struct {
	NameIDMappingResponse *TNameIDMappingResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NameIDMappingResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NameIDMappingResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NameIDMappingResponse instance.
func (me *XsdGoPkgHasElem_NameIDMappingResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NameIDMappingResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDMappingResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NameIDMappingResponse struct {
	NameIDMappingResponses []*TNameIDMappingResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingResponse"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NameIDMappingResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NameIDMappingResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NameIDMappingResponse instance.
func (me *XsdGoPkgHasElems_NameIDMappingResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NameIDMappingResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDMappingResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElems_AssertionIDRequest    func(*XsdGoPkgHasElems_AssertionIDRequest, bool) error
	TSubjectQueryAbstractType              func(*TSubjectQueryAbstractType, bool) error
	XsdGoPkgHasElems_IDPList               func(*XsdGoPkgHasElems_IDPList, bool) error
	XsdGoPkgHasElem_ArtifactResponse       func(*XsdGoPkgHasElem_ArtifactResponse, bool) error
	XsdGoPkgHasElems_ManageNameIDRequest   func(*XsdGoPkgHasElems_ManageNameIDRequest, bool) error
	XsdGoPkgHasElems_Terminate             func(*XsdGoPkgHasElems_Terminate, bool) error
	TLogoutRequestType                     func(*TLogoutRequestType, bool) error
	TStatusCodeType                        func(*TStatusCodeType, bool) error
	TAuthnQueryType                        func(*TAuthnQueryType, bool) error
	XsdGoPkgHasElems_IDPEntry              func(*XsdGoPkgHasElems_IDPEntry, bool) error
	XsdGoPkgHasElem_IDPList                func(*XsdGoPkgHasElem_IDPList, bool) error
	XsdGoPkgHasElem_Response               func(*XsdGoPkgHasElem_Response, bool) error
	XsdGoPkgHasElem_Status                 func(*XsdGoPkgHasElem_Status, bool) error
	XsdGoPkgHasElems_Extensions            func(*XsdGoPkgHasElems_Extensions, bool) error
	XsdGoPkgHasElems_StatusCode            func(*XsdGoPkgHasElems_StatusCode, bool) error
	XsdGoPkgHasElem_RequestedAuthnContext  func(*XsdGoPkgHasElem_RequestedAuthnContext, bool) error
	XsdGoPkgHasElems_AuthnRequest          func(*XsdGoPkgHasElems_AuthnRequest, bool) error
	XsdGoPkgHasElem_ArtifactResolve        func(*XsdGoPkgHasElem_ArtifactResolve, bool) error
	XsdGoPkgHasElem_Extensions             func(*XsdGoPkgHasElem_Extensions, bool) error
	TRequestedAuthnContextType             func(*TRequestedAuthnContextType, bool) error
	XsdGoPkgHasElem_AttributeQuery         func(*XsdGoPkgHasElem_AttributeQuery, bool) error
	XsdGoPkgHasElem_AuthzDecisionQuery     func(*XsdGoPkgHasElem_AuthzDecisionQuery, bool) error
	XsdGoPkgHasElems_NameIDPolicy          func(*XsdGoPkgHasElems_NameIDPolicy, bool) error
	XsdGoPkgHasElem_Artifact               func(*XsdGoPkgHasElem_Artifact, bool) error
	XsdGoPkgHasElems_LogoutRequest         func(*XsdGoPkgHasElems_LogoutRequest, bool) error
	XsdGoPkgHasElem_LogoutResponse         func(*XsdGoPkgHasElem_LogoutResponse, bool) error
	TStatusType                            func(*TStatusType, bool) error
	XsdGoPkgHasElem_NameIDMappingResponse  func(*XsdGoPkgHasElem_NameIDMappingResponse, bool) error
	TNameIDPolicyType                      func(*TNameIDPolicyType, bool) error
	XsdGoPkgHasElem_NameIDPolicy           func(*XsdGoPkgHasElem_NameIDPolicy, bool) error
	TIDPEntryType                          func(*TIDPEntryType, bool) error
	XsdGoPkgHasElem_AuthnQuery             func(*XsdGoPkgHasElem_AuthnQuery, bool) error
	TAuthnRequestType                      func(*TAuthnRequestType, bool) error
	XsdGoPkgHasElem_IDPEntry               func(*XsdGoPkgHasElem_IDPEntry, bool) error
	XsdGoPkgHasElems_ArtifactResolve       func(*XsdGoPkgHasElems_ArtifactResolve, bool) error
	TerminateType                          func(*TerminateType, bool) error
	XsdGoPkgHasElems_ManageNameIDResponse  func(*XsdGoPkgHasElems_ManageNameIDResponse, bool) error
	XsdGoPkgHasElem_SessionIndex           func(*XsdGoPkgHasElem_SessionIndex, bool) error
	XsdGoPkgHasElems_NameIDMappingResponse func(*XsdGoPkgHasElems_NameIDMappingResponse, bool) error
	TAuthzDecisionQueryType                func(*TAuthzDecisionQueryType, bool) error
	TIDPListType                           func(*TIDPListType, bool) error
	XsdGoPkgHasElem_Scoping                func(*XsdGoPkgHasElem_Scoping, bool) error
	XsdGoPkgHasElems_GetComplete           func(*XsdGoPkgHasElems_GetComplete, bool) error
	XsdGoPkgHasElems_Artifact              func(*XsdGoPkgHasElems_Artifact, bool) error
	XsdGoPkgHasElems_NewEncryptedID        func(*XsdGoPkgHasElems_NewEncryptedID, bool) error
	XsdGoPkgHasElems_NameIDMappingRequest  func(*XsdGoPkgHasElems_NameIDMappingRequest, bool) error
	TRequestAbstractType                   func(*TRequestAbstractType, bool) error
	XsdGoPkgHasElem_ManageNameIDResponse   func(*XsdGoPkgHasElem_ManageNameIDResponse, bool) error
	XsdGoPkgHasElem_LogoutRequest          func(*XsdGoPkgHasElem_LogoutRequest, bool) error
	XsdGoPkgHasCdata                       func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_RequestedAuthnContext func(*XsdGoPkgHasElems_RequestedAuthnContext, bool) error
	XsdGoPkgHasElems_RequesterID           func(*XsdGoPkgHasElems_RequesterID, bool) error
	TArtifactResolveType                   func(*TArtifactResolveType, bool) error
	XsdGoPkgHasElems_SessionIndex          func(*XsdGoPkgHasElems_SessionIndex, bool) error
	XsdGoPkgHasElems_LogoutResponse        func(*XsdGoPkgHasElems_LogoutResponse, bool) error
	XsdGoPkgHasElem_StatusCode             func(*XsdGoPkgHasElem_StatusCode, bool) error
	XsdGoPkgHasElem_AssertionIDRequest     func(*XsdGoPkgHasElem_AssertionIDRequest, bool) error
	XsdGoPkgHasElem_SubjectQuery           func(*XsdGoPkgHasElem_SubjectQuery, bool) error
	XsdGoPkgHasElems_AuthzDecisionQuery    func(*XsdGoPkgHasElems_AuthzDecisionQuery, bool) error
	XsdGoPkgHasElem_NewID                  func(*XsdGoPkgHasElem_NewID, bool) error
	TNameIDMappingRequestType              func(*TNameIDMappingRequestType, bool) error
	XsdGoPkgHasElems_StatusDetail          func(*XsdGoPkgHasElems_StatusDetail, bool) error
	XsdGoPkgHasElem_RequesterID            func(*XsdGoPkgHasElem_RequesterID, bool) error
	TArtifactResponseType                  func(*TArtifactResponseType, bool) error
	XsdGoPkgHasElem_NameIDMappingRequest   func(*XsdGoPkgHasElem_NameIDMappingRequest, bool) error
	TAttributeQueryType                    func(*TAttributeQueryType, bool) error
	XsdGoPkgHasElems_Status                func(*XsdGoPkgHasElems_Status, bool) error
	XsdGoPkgHasElem_ManageNameIDRequest    func(*XsdGoPkgHasElem_ManageNameIDRequest, bool) error
	TStatusDetailType                      func(*TStatusDetailType, bool) error
	TAssertionIDRequestType                func(*TAssertionIDRequestType, bool) error
	XsdGoPkgHasElems_SubjectQuery          func(*XsdGoPkgHasElems_SubjectQuery, bool) error
	XsdGoPkgHasElems_AuthnQuery            func(*XsdGoPkgHasElems_AuthnQuery, bool) error
	XsdGoPkgHasElems_AttributeQuery        func(*XsdGoPkgHasElems_AttributeQuery, bool) error
	XsdGoPkgHasElem_GetComplete            func(*XsdGoPkgHasElem_GetComplete, bool) error
	XsdGoPkgHasElem_AuthnRequest           func(*XsdGoPkgHasElem_AuthnRequest, bool) error
	TResponseType                          func(*TResponseType, bool) error
	XsdGoPkgHasElem_StatusMessage          func(*XsdGoPkgHasElem_StatusMessage, bool) error
	TNameIDMappingResponseType             func(*TNameIDMappingResponseType, bool) error
	XsdGoPkgHasElems_Response              func(*XsdGoPkgHasElems_Response, bool) error
	XsdGoPkgHasElems_StatusMessage         func(*XsdGoPkgHasElems_StatusMessage, bool) error
	XsdGoPkgHasElems_Scoping               func(*XsdGoPkgHasElems_Scoping, bool) error
	TStatusResponseType                    func(*TStatusResponseType, bool) error
	XsdGoPkgHasElems_ArtifactResponse      func(*XsdGoPkgHasElems_ArtifactResponse, bool) error
	XsdGoPkgHasElems_NewID                 func(*XsdGoPkgHasElems_NewID, bool) error
	TExtensionsType                        func(*TExtensionsType, bool) error
	TScopingType                           func(*TScopingType, bool) error
	XsdGoPkgHasElem_NewEncryptedID         func(*XsdGoPkgHasElem_NewEncryptedID, bool) error
	XsdGoPkgHasElem_Terminate              func(*XsdGoPkgHasElem_Terminate, bool) error
	TManageNameIDRequestType               func(*TManageNameIDRequestType, bool) error
	XsdGoPkgHasElem_StatusDetail           func(*XsdGoPkgHasElem_StatusDetail, bool) error
}
