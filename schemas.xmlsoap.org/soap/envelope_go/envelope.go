//	Auto-generated by the "go-xsd" package located at:
//		github.com/miracl/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		schemas.xmlsoap.org/soap/envelope/
package go_Envelope

import (
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

type TxsdMustUnderstand xsdt.Boolean

//	Since TxsdMustUnderstand is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TxsdMustUnderstand) Set(s string) { (*xsdt.Boolean)(me).Set(s) }

//	Returns a string representation of this TxsdMustUnderstand's current non-string scalar value.
func (me TxsdMustUnderstand) String() string { return xsdt.Boolean(me).String() }

//	This convenience method just performs a simple type conversion to TxsdMustUnderstand's alias type xsdt.Boolean.
func (me TxsdMustUnderstand) ToXsdtBoolean() xsdt.Boolean { return xsdt.Boolean(me) }

type XsdGoPkgHasAttr_MustUnderstand struct {
	MustUnderstand TxsdMustUnderstand `xml:"http://schemas.xmlsoap.org/soap/envelope/ mustUnderstand,attr"`
}

type XsdGoPkgHasAttr_Actor struct {
	Actor xsdt.AnyURI `xml:"http://schemas.xmlsoap.org/soap/envelope/ actor,attr"`
}

//	'encodingStyle' indicates any canonicalization conventions followed in the contents of the containing element.  For example, the value 'http://schemas.xmlsoap.org/soap/encoding/' indicates the pattern described in SOAP specification
type TencodingStyle xsdt.String

//	Since TencodingStyle is just a simple String type, this merely sets the current value from the specified string.
func (me *TencodingStyle) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TencodingStyle is just a simple String type, this merely returns the current string value.
func (me TencodingStyle) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TencodingStyle's alias type xsdt.String.
func (me TencodingStyle) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TencodingStyle declares a String containing a whitespace-separated list of xsdt.AnyURI values. This Values() method creates and returns a slice of all elements in that list.
func (me TencodingStyle) Values() (list []xsdt.AnyURI) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.AnyURI, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

type XsdGoPkgHasAttr_EncodingStyle struct {
	EncodingStyle TencodingStyle `xml:"http://schemas.xmlsoap.org/soap/envelope/ encodingStyle,attr"`
}

type XsdGoPkgHasAtts_EncodingStyle struct {
	XsdGoPkgHasAttr_EncodingStyle
}

type THeader struct {
}

//	If the WalkHandlers.THeader function is not nil (ie. was set by outside code), calls it with this THeader instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this THeader instance.
func (me *THeader) Walk() (err error) {
	if fn := WalkHandlers.THeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Header struct {
	Header *THeader `xml:"http://schemas.xmlsoap.org/soap/envelope/ Header"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Header function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Header instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Header instance.
func (me *XsdGoPkgHasElem_Header) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Header; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Header.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TBody struct {
}

//	If the WalkHandlers.TBody function is not nil (ie. was set by outside code), calls it with this TBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TBody instance.
func (me *TBody) Walk() (err error) {
	if fn := WalkHandlers.TBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Body struct {
	Body *TBody `xml:"http://schemas.xmlsoap.org/soap/envelope/ Body"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Body function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Body instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Body instance.
func (me *XsdGoPkgHasElem_Body) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Body; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Body.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEnvelope struct {
	XsdGoPkgHasElem_Header

	XsdGoPkgHasElem_Body
}

//	If the WalkHandlers.TEnvelope function is not nil (ie. was set by outside code), calls it with this TEnvelope instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TEnvelope instance.
func (me *TEnvelope) Walk() (err error) {
	if fn := WalkHandlers.TEnvelope; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Header.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Body.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Envelope struct {
	Envelope *TEnvelope `xml:"http://schemas.xmlsoap.org/soap/envelope/ Envelope"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Envelope function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Envelope instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Envelope instance.
func (me *XsdGoPkgHasElem_Envelope) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Envelope; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Envelope.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Envelope struct {
	Envelopes []*TEnvelope `xml:"http://schemas.xmlsoap.org/soap/envelope/ Envelope"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Envelope function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Envelope instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Envelope instance.
func (me *XsdGoPkgHasElems_Envelope) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Envelope; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Envelopes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Header struct {
	Headers []*THeader `xml:"http://schemas.xmlsoap.org/soap/envelope/ Header"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Header function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Header instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Header instance.
func (me *XsdGoPkgHasElems_Header) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Header; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Headers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Body struct {
	Bodies []*TBody `xml:"http://schemas.xmlsoap.org/soap/envelope/ Body"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Body function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Body instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Body instance.
func (me *XsdGoPkgHasElems_Body) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Body; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bodies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Fault reporting structure
type XsdGoPkgHasElem_FaultcodesequenceFaultschema_Faultcode_XsdtQName_ struct {
	Faultcode xsdt.QName `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultcode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FaultcodesequenceFaultschema_Faultcode_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FaultcodesequenceFaultschema_Faultcode_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FaultcodesequenceFaultschema_Faultcode_XsdtQName_ instance.
func (me *XsdGoPkgHasElem_FaultcodesequenceFaultschema_Faultcode_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FaultcodesequenceFaultschema_Faultcode_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FaultstringsequenceFaultschema_Faultstring_XsdtString_ struct {
	Faultstring xsdt.String `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultstring"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FaultstringsequenceFaultschema_Faultstring_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FaultstringsequenceFaultschema_Faultstring_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FaultstringsequenceFaultschema_Faultstring_XsdtString_ instance.
func (me *XsdGoPkgHasElem_FaultstringsequenceFaultschema_Faultstring_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FaultstringsequenceFaultschema_Faultstring_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_ struct {
	Faultactor xsdt.AnyURI `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultactor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tdetail struct {
}

//	If the WalkHandlers.Tdetail function is not nil (ie. was set by outside code), calls it with this Tdetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this Tdetail instance.
func (me *Tdetail) Walk() (err error) {
	if fn := WalkHandlers.Tdetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DetailsequenceFaultschema_Detail_Tdetail_ struct {
	Detail *Tdetail `xml:"http://schemas.xmlsoap.org/soap/envelope/ detail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DetailsequenceFaultschema_Detail_Tdetail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DetailsequenceFaultschema_Detail_Tdetail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DetailsequenceFaultschema_Detail_Tdetail_ instance.
func (me *XsdGoPkgHasElem_DetailsequenceFaultschema_Detail_Tdetail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DetailsequenceFaultschema_Detail_Tdetail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Detail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TFault struct {
	XsdGoPkgHasElem_FaultcodesequenceFaultschema_Faultcode_XsdtQName_

	XsdGoPkgHasElem_FaultstringsequenceFaultschema_Faultstring_XsdtString_

	XsdGoPkgHasElem_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_

	XsdGoPkgHasElem_DetailsequenceFaultschema_Detail_Tdetail_
}

//	If the WalkHandlers.TFault function is not nil (ie. was set by outside code), calls it with this TFault instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TFault instance.
func (me *TFault) Walk() (err error) {
	if fn := WalkHandlers.TFault; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FaultcodesequenceFaultschema_Faultcode_XsdtQName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FaultstringsequenceFaultschema_Faultstring_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DetailsequenceFaultschema_Detail_Tdetail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Fault struct {
	Fault *TFault `xml:"http://schemas.xmlsoap.org/soap/envelope/ Fault"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Fault function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Fault instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Fault instance.
func (me *XsdGoPkgHasElem_Fault) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Fault; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fault.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Fault struct {
	Faults []*TFault `xml:"http://schemas.xmlsoap.org/soap/envelope/ Fault"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Fault function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Fault instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Fault instance.
func (me *XsdGoPkgHasElems_Fault) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Fault; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Faults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DetailsequenceFaultschema_Detail_Tdetail_ struct {
	Details []*Tdetail `xml:"http://schemas.xmlsoap.org/soap/envelope/ detail"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DetailsequenceFaultschema_Detail_Tdetail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DetailsequenceFaultschema_Detail_Tdetail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DetailsequenceFaultschema_Detail_Tdetail_ instance.
func (me *XsdGoPkgHasElems_DetailsequenceFaultschema_Detail_Tdetail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DetailsequenceFaultschema_Detail_Tdetail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Details {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FaultstringsequenceFaultschema_Faultstring_XsdtString_ struct {
	Faultstrings []xsdt.String `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultstring"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FaultstringsequenceFaultschema_Faultstring_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FaultstringsequenceFaultschema_Faultstring_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FaultstringsequenceFaultschema_Faultstring_XsdtString_ instance.
func (me *XsdGoPkgHasElems_FaultstringsequenceFaultschema_Faultstring_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FaultstringsequenceFaultschema_Faultstring_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_ struct {
	Faultactors []xsdt.AnyURI `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultactor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElems_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FaultcodesequenceFaultschema_Faultcode_XsdtQName_ struct {
	Faultcodes []xsdt.QName `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultcode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FaultcodesequenceFaultschema_Faultcode_XsdtQName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FaultcodesequenceFaultschema_Faultcode_XsdtQName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FaultcodesequenceFaultschema_Faultcode_XsdtQName_ instance.
func (me *XsdGoPkgHasElems_FaultcodesequenceFaultschema_Faultcode_XsdtQName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FaultcodesequenceFaultschema_Faultcode_XsdtQName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 22 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 22 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	THeader                                                                 func(*THeader, bool) error
	TBody                                                                   func(*TBody, bool) error
	XsdGoPkgHasElem_FaultcodesequenceFaultschema_Faultcode_XsdtQName_       func(*XsdGoPkgHasElem_FaultcodesequenceFaultschema_Faultcode_XsdtQName_, bool) error
	Tdetail                                                                 func(*Tdetail, bool) error
	XsdGoPkgHasElem_Fault                                                   func(*XsdGoPkgHasElem_Fault, bool) error
	XsdGoPkgHasElems_Fault                                                  func(*XsdGoPkgHasElems_Fault, bool) error
	XsdGoPkgHasElem_Header                                                  func(*XsdGoPkgHasElem_Header, bool) error
	XsdGoPkgHasElem_Body                                                    func(*XsdGoPkgHasElem_Body, bool) error
	XsdGoPkgHasElems_Header                                                 func(*XsdGoPkgHasElems_Header, bool) error
	XsdGoPkgHasCdata                                                        func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_   func(*XsdGoPkgHasElems_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_, bool) error
	XsdGoPkgHasElems_FaultcodesequenceFaultschema_Faultcode_XsdtQName_      func(*XsdGoPkgHasElems_FaultcodesequenceFaultschema_Faultcode_XsdtQName_, bool) error
	XsdGoPkgHasElems_Envelope                                               func(*XsdGoPkgHasElems_Envelope, bool) error
	XsdGoPkgHasElems_Body                                                   func(*XsdGoPkgHasElems_Body, bool) error
	XsdGoPkgHasElem_DetailsequenceFaultschema_Detail_Tdetail_               func(*XsdGoPkgHasElem_DetailsequenceFaultschema_Detail_Tdetail_, bool) error
	TFault                                                                  func(*TFault, bool) error
	XsdGoPkgHasElems_DetailsequenceFaultschema_Detail_Tdetail_              func(*XsdGoPkgHasElems_DetailsequenceFaultschema_Detail_Tdetail_, bool) error
	XsdGoPkgHasElems_FaultstringsequenceFaultschema_Faultstring_XsdtString_ func(*XsdGoPkgHasElems_FaultstringsequenceFaultschema_Faultstring_XsdtString_, bool) error
	TEnvelope                                                               func(*TEnvelope, bool) error
	XsdGoPkgHasElem_Envelope                                                func(*XsdGoPkgHasElem_Envelope, bool) error
	XsdGoPkgHasElem_FaultstringsequenceFaultschema_Faultstring_XsdtString_  func(*XsdGoPkgHasElem_FaultstringsequenceFaultschema_Faultstring_XsdtString_, bool) error
	XsdGoPkgHasElem_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_    func(*XsdGoPkgHasElem_FaultactorsequenceFaultschema_Faultactor_XsdtAnyURI_, bool) error
}
