// Package goSvg : autogenerated by go-xsd
package goSvg

import (
	xlink "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/WD-SVG11-20020108/xlink.xsd_go"
	xml "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/WD-SVG11-20020108/xml.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// XsdGoPkgHasAttrIDXsdtID All elements have an ID
type XsdGoPkgHasAttrIDXsdtID struct {
	ID xsdt.ID `xml:"http://www.w3.org/2000/svg id,attr"`
}

// XsdGoPkgHasAttsStdAttrs defines XsdGoPkgHasAttsStdAttrs
type XsdGoPkgHasAttsStdAttrs struct {
	XsdGoPkgHasAttrIDXsdtID

	xml.XsdGoPkgHasAttrBase
}

// XsdGoPkgHasAttsLangSpaceAttrs Common attributes for elements that might contain character data content
type XsdGoPkgHasAttsLangSpaceAttrs struct {
	xml.XsdGoPkgHasAttrSpace

	xml.XsdGoPkgHasAttrLang
}

// TFeatureListType Common attributes to check for system capabilities
// feature list specification
type TFeatureListType xsdt.String

// Set : Since TFeatureListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFeatureListType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TFeatureListType is just a simple String type, this merely returns the current string value.
func (me TFeatureListType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TFeatureListType's alias type xsdt.String.
func (me TFeatureListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrRequiredFeaturesTFeatureListType defines attribute RequiredFeaturesTFeatureListType
type XsdGoPkgHasAttrRequiredFeaturesTFeatureListType struct {
	RequiredFeatures TFeatureListType `xml:"http://www.w3.org/2000/svg requiredFeatures,attr"`
}

// TExtensionListType extension list specification
type TExtensionListType xsdt.String

// Set : Since TExtensionListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TExtensionListType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TExtensionListType is just a simple String type, this merely returns the current string value.
func (me TExtensionListType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TExtensionListType's alias type xsdt.String.
func (me TExtensionListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrRequiredExtensionsTExtensionListType defines attribute RequiredExtensionsTExtensionListType
type XsdGoPkgHasAttrRequiredExtensionsTExtensionListType struct {
	RequiredExtensions TExtensionListType `xml:"http://www.w3.org/2000/svg requiredExtensions,attr"`
}

// TLanguageCodesType a comma-separated list of language codes, as per [RFC3066]
type TLanguageCodesType xsdt.String

// Set : Since TLanguageCodesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLanguageCodesType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TLanguageCodesType is just a simple String type, this merely returns the current string value.
func (me TLanguageCodesType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TLanguageCodesType's alias type xsdt.String.
func (me TLanguageCodesType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrSystemLanguageTLanguageCodesType defines attribute SystemLanguageTLanguageCodesType
type XsdGoPkgHasAttrSystemLanguageTLanguageCodesType struct {
	SystemLanguage TLanguageCodesType `xml:"http://www.w3.org/2000/svg systemLanguage,attr"`
}

// XsdGoPkgHasAttsTestAttrs defines XsdGoPkgHasAttsTestAttrs
type XsdGoPkgHasAttsTestAttrs struct {
	XsdGoPkgHasAttrRequiredFeaturesTFeatureListType

	XsdGoPkgHasAttrRequiredExtensionsTExtensionListType

	XsdGoPkgHasAttrSystemLanguageTLanguageCodesType
}

// XsdGoPkgHasAttsXlinkRefAttrs For most uses of URI referencing: standard XLink attributes other than xlink:href
type XsdGoPkgHasAttsXlinkRefAttrs struct {
	xlink.XsdGoPkgHasAttrRole

	xlink.XsdGoPkgHasAttrArcrole

	xlink.XsdGoPkgHasAttrTitle

	xlink.XsdGoPkgHasAttrShow

	xlink.XsdGoPkgHasAttrActuate

	xlink.XsdGoPkgHasAttrType
}

// TScriptType script expression
type TScriptType xsdt.String

// Set : Since TScriptType is just a simple String type, this merely sets the current value from the specified string.
func (me *TScriptType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TScriptType is just a simple String type, this merely returns the current string value.
func (me TScriptType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TScriptType's alias type xsdt.String.
func (me TScriptType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrOnmousemoveTScriptType defines attribute OnmousemoveTScriptType
type XsdGoPkgHasAttrOnmousemoveTScriptType struct {
	Onmousemove TScriptType `xml:"http://www.w3.org/2000/svg onmousemove,attr"`
}

// XsdGoPkgHasAttrOnmouseoutTScriptType defines attribute OnmouseoutTScriptType
type XsdGoPkgHasAttrOnmouseoutTScriptType struct {
	Onmouseout TScriptType `xml:"http://www.w3.org/2000/svg onmouseout,attr"`
}

// XsdGoPkgHasAttrOnfocusinTScriptType defines attribute OnfocusinTScriptType
type XsdGoPkgHasAttrOnfocusinTScriptType struct {
	Onfocusin TScriptType `xml:"http://www.w3.org/2000/svg onfocusin,attr"`
}

// XsdGoPkgHasAttrOnclickTScriptType defines attribute OnclickTScriptType
type XsdGoPkgHasAttrOnclickTScriptType struct {
	Onclick TScriptType `xml:"http://www.w3.org/2000/svg onclick,attr"`
}

// XsdGoPkgHasAttrOnmouseupTScriptType defines attribute OnmouseupTScriptType
type XsdGoPkgHasAttrOnmouseupTScriptType struct {
	Onmouseup TScriptType `xml:"http://www.w3.org/2000/svg onmouseup,attr"`
}

// XsdGoPkgHasAttrOnmouseoverTScriptType defines attribute OnmouseoverTScriptType
type XsdGoPkgHasAttrOnmouseoverTScriptType struct {
	Onmouseover TScriptType `xml:"http://www.w3.org/2000/svg onmouseover,attr"`
}

// XsdGoPkgHasAttrOnloadTScriptType defines attribute OnloadTScriptType
type XsdGoPkgHasAttrOnloadTScriptType struct {
	Onload TScriptType `xml:"http://www.w3.org/2000/svg onload,attr"`
}

// XsdGoPkgHasAttrOnfocusoutTScriptType defines attribute OnfocusoutTScriptType
type XsdGoPkgHasAttrOnfocusoutTScriptType struct {
	Onfocusout TScriptType `xml:"http://www.w3.org/2000/svg onfocusout,attr"`
}

// XsdGoPkgHasAttrOnactivateTScriptType defines attribute OnactivateTScriptType
type XsdGoPkgHasAttrOnactivateTScriptType struct {
	Onactivate TScriptType `xml:"http://www.w3.org/2000/svg onactivate,attr"`
}

// XsdGoPkgHasAttrOnmousedownTScriptType defines attribute OnmousedownTScriptType
type XsdGoPkgHasAttrOnmousedownTScriptType struct {
	Onmousedown TScriptType `xml:"http://www.w3.org/2000/svg onmousedown,attr"`
}

// XsdGoPkgHasAttsGraphicsElementEvents defines XsdGoPkgHasAttsGraphicsElementEvents
type XsdGoPkgHasAttsGraphicsElementEvents struct {
	XsdGoPkgHasAttrOnfocusoutTScriptType

	XsdGoPkgHasAttrOnactivateTScriptType

	XsdGoPkgHasAttrOnmousedownTScriptType

	XsdGoPkgHasAttrOnmouseoverTScriptType

	XsdGoPkgHasAttrOnloadTScriptType

	XsdGoPkgHasAttrOnfocusinTScriptType

	XsdGoPkgHasAttrOnclickTScriptType

	XsdGoPkgHasAttrOnmouseupTScriptType

	XsdGoPkgHasAttrOnmousemoveTScriptType

	XsdGoPkgHasAttrOnmouseoutTScriptType
}

// XsdGoPkgHasAttrOnscrollTScriptType defines attribute OnscrollTScriptType
type XsdGoPkgHasAttrOnscrollTScriptType struct {
	Onscroll TScriptType `xml:"http://www.w3.org/2000/svg onscroll,attr"`
}

// XsdGoPkgHasAttrOnzoomTScriptType defines attribute OnzoomTScriptType
type XsdGoPkgHasAttrOnzoomTScriptType struct {
	Onzoom TScriptType `xml:"http://www.w3.org/2000/svg onzoom,attr"`
}

// XsdGoPkgHasAttrOnunloadTScriptType defines attribute OnunloadTScriptType
type XsdGoPkgHasAttrOnunloadTScriptType struct {
	Onunload TScriptType `xml:"http://www.w3.org/2000/svg onunload,attr"`
}

// XsdGoPkgHasAttrOnabortTScriptType defines attribute OnabortTScriptType
type XsdGoPkgHasAttrOnabortTScriptType struct {
	Onabort TScriptType `xml:"http://www.w3.org/2000/svg onabort,attr"`
}

// XsdGoPkgHasAttrOnerrorTScriptType defines attribute OnerrorTScriptType
type XsdGoPkgHasAttrOnerrorTScriptType struct {
	Onerror TScriptType `xml:"http://www.w3.org/2000/svg onerror,attr"`
}

// XsdGoPkgHasAttrOnresizeTScriptType defines attribute OnresizeTScriptType
type XsdGoPkgHasAttrOnresizeTScriptType struct {
	Onresize TScriptType `xml:"http://www.w3.org/2000/svg onresize,attr"`
}

// XsdGoPkgHasAttsDocumentEvents defines XsdGoPkgHasAttsDocumentEvents
type XsdGoPkgHasAttsDocumentEvents struct {
	XsdGoPkgHasAttrOnerrorTScriptType

	XsdGoPkgHasAttrOnresizeTScriptType

	XsdGoPkgHasAttrOnscrollTScriptType

	XsdGoPkgHasAttrOnzoomTScriptType

	XsdGoPkgHasAttrOnunloadTScriptType

	XsdGoPkgHasAttrOnabortTScriptType
}

// XsdGoPkgHasAttrOnbeginTScriptType defines attribute OnbeginTScriptType
type XsdGoPkgHasAttrOnbeginTScriptType struct {
	Onbegin TScriptType `xml:"http://www.w3.org/2000/svg onbegin,attr"`
}

// XsdGoPkgHasAttrOnendTScriptType defines attribute OnendTScriptType
type XsdGoPkgHasAttrOnendTScriptType struct {
	Onend TScriptType `xml:"http://www.w3.org/2000/svg onend,attr"`
}

// XsdGoPkgHasAttrOnrepeatTScriptType defines attribute OnrepeatTScriptType
type XsdGoPkgHasAttrOnrepeatTScriptType struct {
	Onrepeat TScriptType `xml:"http://www.w3.org/2000/svg onrepeat,attr"`
}

// XsdGoPkgHasAttsAnimationEvents defines XsdGoPkgHasAttsAnimationEvents
type XsdGoPkgHasAttsAnimationEvents struct {
	XsdGoPkgHasAttrOnbeginTScriptType

	XsdGoPkgHasAttrOnendTScriptType

	XsdGoPkgHasAttrOnrepeatTScriptType
}

// TColorType The following presentation attributes have to do with specifying color.
// a CSS2 Color
// Color as defined in CSS2 and XSL 1.0 plus additional recognised color keyword names (the 'X11 colors')
type TColorType xsdt.String

// Set : Since TColorType is just a simple String type, this merely sets the current value from the specified string.
func (me *TColorType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TColorType is just a simple String type, this merely returns the current string value.
func (me TColorType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TColorType's alias type xsdt.String.
func (me TColorType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrColorTColorType defines attribute ColorTColorType
type XsdGoPkgHasAttrColorTColorType struct {
	Color TColorType `xml:"http://www.w3.org/2000/svg color,attr"`
}

// TxsdPresentationAttributesColorColorInterpolation defines TxsdPresentationAttributesColorColorInterpolation
type TxsdPresentationAttributesColorColorInterpolation xsdt.String

// Set : Since TxsdPresentationAttributesColorColorInterpolation is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesColorColorInterpolation) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesColorColorInterpolation is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesColorColorInterpolation) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesColorColorInterpolation's alias type xsdt.String.
func (me TxsdPresentationAttributesColorColorInterpolation) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "auto".
func (me TxsdPresentationAttributesColorColorInterpolation) IsAuto() bool {
	return me.String() == "auto"
}

// IsSrgb : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "sRGB".
func (me TxsdPresentationAttributesColorColorInterpolation) IsSrgb() bool {
	return me.String() == "sRGB"
}

// IsLinearRGB : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "linearRGB".
func (me TxsdPresentationAttributesColorColorInterpolation) IsLinearRGB() bool {
	return me.String() == "linearRGB"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "inherit".
func (me TxsdPresentationAttributesColorColorInterpolation) IsInherit() bool {
	return me.String() == "inherit"
}

// XsdGoPkgHasAttrColorInterpolationTxsdPresentationAttributesColorColorInterpolation defines attribute ColorInterpolationTxsdPresentationAttributesColorColorInterpolation
type XsdGoPkgHasAttrColorInterpolationTxsdPresentationAttributesColorColorInterpolation struct {
	ColorInterpolation TxsdPresentationAttributesColorColorInterpolation `xml:"http://www.w3.org/2000/svg color-interpolation,attr"`
}

// TxsdPresentationAttributesColorColorRendering defines TxsdPresentationAttributesColorColorRendering
type TxsdPresentationAttributesColorColorRendering xsdt.String

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "auto".
func (me TxsdPresentationAttributesColorColorRendering) IsAuto() bool { return me.String() == "auto" }

// IsOptimizeSpeed : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "optimizeSpeed".
func (me TxsdPresentationAttributesColorColorRendering) IsOptimizeSpeed() bool {
	return me.String() == "optimizeSpeed"
}

// IsOptimizeQuality : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "optimizeQuality".
func (me TxsdPresentationAttributesColorColorRendering) IsOptimizeQuality() bool {
	return me.String() == "optimizeQuality"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "inherit".
func (me TxsdPresentationAttributesColorColorRendering) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesColorColorRendering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesColorColorRendering) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesColorColorRendering is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesColorColorRendering) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesColorColorRendering's alias type xsdt.String.
func (me TxsdPresentationAttributesColorColorRendering) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// XsdGoPkgHasAttrColorRenderingTxsdPresentationAttributesColorColorRendering defines attribute ColorRenderingTxsdPresentationAttributesColorColorRendering
type XsdGoPkgHasAttrColorRenderingTxsdPresentationAttributesColorColorRendering struct {
	ColorRendering TxsdPresentationAttributesColorColorRendering `xml:"http://www.w3.org/2000/svg color-rendering,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesColor defines XsdGoPkgHasAttsPresentationAttributesColor
type XsdGoPkgHasAttsPresentationAttributesColor struct {
	XsdGoPkgHasAttrColorTColorType

	XsdGoPkgHasAttrColorInterpolationTxsdPresentationAttributesColorColorInterpolation

	XsdGoPkgHasAttrColorRenderingTxsdPresentationAttributesColorColorRendering
}

// TEnableBackgroundValueType The following presentation attributes apply to container elements
// accumulate | new [ <x> <y> <width> <height> ] | inherit
type TEnableBackgroundValueType xsdt.String

// Set : Since TEnableBackgroundValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TEnableBackgroundValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TEnableBackgroundValueType is just a simple String type, this merely returns the current string value.
func (me TEnableBackgroundValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TEnableBackgroundValueType's alias type xsdt.String.
func (me TEnableBackgroundValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrEnableBackgroundTEnableBackgroundValueType defines attribute EnableBackgroundTEnableBackgroundValueType
type XsdGoPkgHasAttrEnableBackgroundTEnableBackgroundValueType struct {
	EnableBackground TEnableBackgroundValueType `xml:"http://www.w3.org/2000/svg enable-background,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesContainers defines XsdGoPkgHasAttsPresentationAttributesContainers
type XsdGoPkgHasAttsPresentationAttributesContainers struct {
	XsdGoPkgHasAttrEnableBackgroundTEnableBackgroundValueType
}

// TOpacityValueType The following presentation attributes apply to 'feFlood' elements
// opacity value (e.g., <number>)
// <alphavalue> | inherit
type TOpacityValueType xsdt.String

// Set : Since TOpacityValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TOpacityValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TOpacityValueType is just a simple String type, this merely returns the current string value.
func (me TOpacityValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TOpacityValueType's alias type xsdt.String.
func (me TOpacityValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrFloodOpacityTOpacityValueType defines attribute FloodOpacityTOpacityValueType
type XsdGoPkgHasAttrFloodOpacityTOpacityValueType struct {
	FloodOpacity TOpacityValueType `xml:"http://www.w3.org/2000/svg flood-opacity,attr"`
}

// TSVGColorType An SVG color value (sRGB plus optional ICC)
type TSVGColorType xsdt.String

// Set : Since TSVGColorType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSVGColorType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TSVGColorType is just a simple String type, this merely returns the current string value.
func (me TSVGColorType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TSVGColorType's alias type xsdt.String.
func (me TSVGColorType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrFloodColorTSVGColorType defines attribute FloodColorTSVGColorType
type XsdGoPkgHasAttrFloodColorTSVGColorType struct {
	FloodColor TSVGColorType `xml:"http://www.w3.org/2000/svg flood-color,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesFeFlood defines XsdGoPkgHasAttsPresentationAttributesFeFlood
type XsdGoPkgHasAttsPresentationAttributesFeFlood struct {
	XsdGoPkgHasAttrFloodColorTSVGColorType

	XsdGoPkgHasAttrFloodOpacityTOpacityValueType
}

// XsdGoPkgHasAttrColorInterpolationFiltersTxsdPresentationAttributesFilterPrimitivesColorInterpolationFilters The following presentation attributes apply to filter primitives
type XsdGoPkgHasAttrColorInterpolationFiltersTxsdPresentationAttributesFilterPrimitivesColorInterpolationFilters struct {
	ColorInterpolationFilters TxsdPresentationAttributesColorColorInterpolation `xml:"http://www.w3.org/2000/svg color-interpolation-filters,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesFilterPrimitives defines XsdGoPkgHasAttsPresentationAttributesFilterPrimitives
type XsdGoPkgHasAttsPresentationAttributesFilterPrimitives struct {
	XsdGoPkgHasAttrColorInterpolationFiltersTxsdPresentationAttributesFilterPrimitivesColorInterpolationFilters
}

// TxsdPresentationAttributesFillStrokeStrokeLinejoin The following presentation attributes apply to filling and stroking operations
type TxsdPresentationAttributesFillStrokeStrokeLinejoin xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFillStrokeStrokeLinejoin's alias type xsdt.String.
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsMiter : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "miter".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsMiter() bool {
	return me.String() == "miter"
}

// IsRound : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "round".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsRound() bool {
	return me.String() == "round"
}

// IsBevel : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "bevel".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsBevel() bool {
	return me.String() == "bevel"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "inherit".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesFillStrokeStrokeLinejoin is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFillStrokeStrokeLinejoin) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesFillStrokeStrokeLinejoin is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) String() string {
	return xsdt.String(me).String()
}

// XsdGoPkgHasAttrStrokeLinejoinTxsdPresentationAttributesFillStrokeStrokeLinejoin defines attribute StrokeLinejoinTxsdPresentationAttributesFillStrokeStrokeLinejoin
type XsdGoPkgHasAttrStrokeLinejoinTxsdPresentationAttributesFillStrokeStrokeLinejoin struct {
	StrokeLinejoin TxsdPresentationAttributesFillStrokeStrokeLinejoin `xml:"http://www.w3.org/2000/svg stroke-linejoin,attr"`
}

// TStrokeMiterLimitValueType 'stroke-miterlimit' property/attribute value (e.g., <number>)
type TStrokeMiterLimitValueType xsdt.String

// String : Since TStrokeMiterLimitValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeMiterLimitValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TStrokeMiterLimitValueType's alias type xsdt.String.
func (me TStrokeMiterLimitValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TStrokeMiterLimitValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeMiterLimitValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// XsdGoPkgHasAttrStrokeMiterlimitTStrokeMiterLimitValueType defines attribute StrokeMiterlimitTStrokeMiterLimitValueType
type XsdGoPkgHasAttrStrokeMiterlimitTStrokeMiterLimitValueType struct {
	StrokeMiterlimit TStrokeMiterLimitValueType `xml:"http://www.w3.org/2000/svg stroke-miterlimit,attr"`
}

// TPaintType a 'fill' or 'stroke' property/attribute value
type TPaintType xsdt.String

// Set : Since TPaintType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPaintType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TPaintType is just a simple String type, this merely returns the current string value.
func (me TPaintType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TPaintType's alias type xsdt.String.
func (me TPaintType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrFillTPaintType defines attribute FillTPaintType
type XsdGoPkgHasAttrFillTPaintType struct {
	Fill TPaintType `xml:"http://www.w3.org/2000/svg fill,attr"`
}

// XsdGoPkgHasAttrStrokeTPaintType defines attribute StrokeTPaintType
type XsdGoPkgHasAttrStrokeTPaintType struct {
	Stroke TPaintType `xml:"http://www.w3.org/2000/svg stroke,attr"`
}

// TStrokeDashArrayValueType 'stroke-dasharray' property/attribute value (e.g., 'none', list of <number>s)
type TStrokeDashArrayValueType xsdt.String

// Set : Since TStrokeDashArrayValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeDashArrayValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TStrokeDashArrayValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeDashArrayValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TStrokeDashArrayValueType's alias type xsdt.String.
func (me TStrokeDashArrayValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrStrokeDasharrayTStrokeDashArrayValueType defines attribute StrokeDasharrayTStrokeDashArrayValueType
type XsdGoPkgHasAttrStrokeDasharrayTStrokeDashArrayValueType struct {
	StrokeDasharray TStrokeDashArrayValueType `xml:"http://www.w3.org/2000/svg stroke-dasharray,attr"`
}

// TStrokeDashOffsetValueType 'stroke-dashoffset' property/attribute value (e.g., 'none', >length>)
type TStrokeDashOffsetValueType xsdt.String

// Set : Since TStrokeDashOffsetValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeDashOffsetValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TStrokeDashOffsetValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeDashOffsetValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TStrokeDashOffsetValueType's alias type xsdt.String.
func (me TStrokeDashOffsetValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrStrokeDashoffsetTStrokeDashOffsetValueType defines attribute StrokeDashoffsetTStrokeDashOffsetValueType
type XsdGoPkgHasAttrStrokeDashoffsetTStrokeDashOffsetValueType struct {
	StrokeDashoffset TStrokeDashOffsetValueType `xml:"http://www.w3.org/2000/svg stroke-dashoffset,attr"`
}

// TStrokeWidthValueType 'stroke-width' property/attribute value (e.g., <length>)
type TStrokeWidthValueType xsdt.String

// Set : Since TStrokeWidthValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeWidthValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TStrokeWidthValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeWidthValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TStrokeWidthValueType's alias type xsdt.String.
func (me TStrokeWidthValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrStrokeWidthTStrokeWidthValueType defines attribute StrokeWidthTStrokeWidthValueType
type XsdGoPkgHasAttrStrokeWidthTStrokeWidthValueType struct {
	StrokeWidth TStrokeWidthValueType `xml:"http://www.w3.org/2000/svg stroke-width,attr"`
}

// XsdGoPkgHasAttrFillOpacityTOpacityValueType defines attribute FillOpacityTOpacityValueType
type XsdGoPkgHasAttrFillOpacityTOpacityValueType struct {
	FillOpacity TOpacityValueType `xml:"http://www.w3.org/2000/svg fill-opacity,attr"`
}

// TClipFillRuleType 'clip-rule' or fill-rule property/attribute value
type TClipFillRuleType xsdt.String

// IsInherit : Returns true if the value of this enumerated TClipFillRuleType is "inherit".
func (me TClipFillRuleType) IsInherit() bool { return me.String() == "inherit" }

// Set : Since TClipFillRuleType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClipFillRuleType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TClipFillRuleType is just a simple String type, this merely returns the current string value.
func (me TClipFillRuleType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TClipFillRuleType's alias type xsdt.String.
func (me TClipFillRuleType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsEvenodd : Returns true if the value of this enumerated TClipFillRuleType is "evenodd".
func (me TClipFillRuleType) IsEvenodd() bool { return me.String() == "evenodd" }

// IsNonzero : Returns true if the value of this enumerated TClipFillRuleType is "nonzero".
func (me TClipFillRuleType) IsNonzero() bool { return me.String() == "nonzero" }

// XsdGoPkgHasAttrFillRuleTClipFillRuleType defines attribute FillRuleTClipFillRuleType
type XsdGoPkgHasAttrFillRuleTClipFillRuleType struct {
	FillRule TClipFillRuleType `xml:"http://www.w3.org/2000/svg fill-rule,attr"`
}

// TxsdPresentationAttributesFillStrokeStrokeLinecap defines TxsdPresentationAttributesFillStrokeStrokeLinecap
type TxsdPresentationAttributesFillStrokeStrokeLinecap xsdt.String

// IsRound : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "round".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsRound() bool {
	return me.String() == "round"
}

// IsSquare : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "square".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsSquare() bool {
	return me.String() == "square"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "inherit".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesFillStrokeStrokeLinecap is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFillStrokeStrokeLinecap) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesFillStrokeStrokeLinecap is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFillStrokeStrokeLinecap's alias type xsdt.String.
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsButt : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "butt".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsButt() bool {
	return me.String() == "butt"
}

// XsdGoPkgHasAttrStrokeLinecapTxsdPresentationAttributesFillStrokeStrokeLinecap defines attribute StrokeLinecapTxsdPresentationAttributesFillStrokeStrokeLinecap
type XsdGoPkgHasAttrStrokeLinecapTxsdPresentationAttributesFillStrokeStrokeLinecap struct {
	StrokeLinecap TxsdPresentationAttributesFillStrokeStrokeLinecap `xml:"http://www.w3.org/2000/svg stroke-linecap,attr"`
}

// XsdGoPkgHasAttrStrokeOpacityTOpacityValueType defines attribute StrokeOpacityTOpacityValueType
type XsdGoPkgHasAttrStrokeOpacityTOpacityValueType struct {
	StrokeOpacity TOpacityValueType `xml:"http://www.w3.org/2000/svg stroke-opacity,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesFillStroke defines XsdGoPkgHasAttsPresentationAttributesFillStroke
type XsdGoPkgHasAttsPresentationAttributesFillStroke struct {
	XsdGoPkgHasAttrStrokeLinecapTxsdPresentationAttributesFillStrokeStrokeLinecap

	XsdGoPkgHasAttrStrokeOpacityTOpacityValueType

	XsdGoPkgHasAttrStrokeWidthTStrokeWidthValueType

	XsdGoPkgHasAttrFillOpacityTOpacityValueType

	XsdGoPkgHasAttrFillRuleTClipFillRuleType

	XsdGoPkgHasAttrStrokeDasharrayTStrokeDashArrayValueType

	XsdGoPkgHasAttrStrokeDashoffsetTStrokeDashOffsetValueType

	XsdGoPkgHasAttrStrokeLinejoinTxsdPresentationAttributesFillStrokeStrokeLinejoin

	XsdGoPkgHasAttrStrokeMiterlimitTStrokeMiterLimitValueType

	XsdGoPkgHasAttrFillTPaintType

	XsdGoPkgHasAttrStrokeTPaintType
}

// TxsdPresentationAttributesFontSpecificationFontStretch The following presentation attributes have to do with selecting a font to use
type TxsdPresentationAttributesFontSpecificationFontStretch xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontStretch's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontStretch) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsWider : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "wider".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsWider() bool {
	return me.String() == "wider"
}

// IsSemiCondensed : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "semi-condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsSemiCondensed() bool {
	return me.String() == "semi-condensed"
}

// Set : Since TxsdPresentationAttributesFontSpecificationFontStretch is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontStretch) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesFontSpecificationFontStretch is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontStretch) String() string {
	return xsdt.String(me).String()
}

// IsCondensed : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsCondensed() bool {
	return me.String() == "condensed"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsInherit() bool {
	return me.String() == "inherit"
}

// IsNormal : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsNormal() bool {
	return me.String() == "normal"
}

// IsNarrower : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "narrower".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsNarrower() bool {
	return me.String() == "narrower"
}

// IsExtraCondensed : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "extra-condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsExtraCondensed() bool {
	return me.String() == "extra-condensed"
}

// IsExtraExpanded : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "extra-expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsExtraExpanded() bool {
	return me.String() == "extra-expanded"
}

// IsUltraExpanded : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "ultra-expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsUltraExpanded() bool {
	return me.String() == "ultra-expanded"
}

// IsUltraCondensed : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "ultra-condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsUltraCondensed() bool {
	return me.String() == "ultra-condensed"
}

// IsSemiExpanded : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "semi-expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsSemiExpanded() bool {
	return me.String() == "semi-expanded"
}

// IsExpanded : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsExpanded() bool {
	return me.String() == "expanded"
}

// XsdGoPkgHasAttrFontStretchTxsdPresentationAttributesFontSpecificationFontStretch defines attribute FontStretchTxsdPresentationAttributesFontSpecificationFontStretch
type XsdGoPkgHasAttrFontStretchTxsdPresentationAttributesFontSpecificationFontStretch struct {
	FontStretch TxsdPresentationAttributesFontSpecificationFontStretch `xml:"http://www.w3.org/2000/svg font-stretch,attr"`
}

// TxsdPresentationAttributesFontSpecificationFontStyle defines TxsdPresentationAttributesFontSpecificationFontStyle
type TxsdPresentationAttributesFontSpecificationFontStyle xsdt.String

// IsOblique : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "oblique".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsOblique() bool {
	return me.String() == "oblique"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesFontSpecificationFontStyle is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontStyle) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesFontSpecificationFontStyle is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontStyle) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontStyle's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontStyle) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsNormal : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsNormal() bool {
	return me.String() == "normal"
}

// IsItalic : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "italic".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsItalic() bool {
	return me.String() == "italic"
}

// XsdGoPkgHasAttrFontStyleTxsdPresentationAttributesFontSpecificationFontStyle defines attribute FontStyleTxsdPresentationAttributesFontSpecificationFontStyle
type XsdGoPkgHasAttrFontStyleTxsdPresentationAttributesFontSpecificationFontStyle struct {
	FontStyle TxsdPresentationAttributesFontSpecificationFontStyle `xml:"http://www.w3.org/2000/svg font-style,attr"`
}

// TxsdPresentationAttributesFontSpecificationFontVariant defines TxsdPresentationAttributesFontSpecificationFontVariant
type TxsdPresentationAttributesFontSpecificationFontVariant xsdt.String

// IsSmallCaps : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontVariant is "small-caps".
func (me TxsdPresentationAttributesFontSpecificationFontVariant) IsSmallCaps() bool {
	return me.String() == "small-caps"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontVariant is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontVariant) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesFontSpecificationFontVariant is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontVariant) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesFontSpecificationFontVariant is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontVariant) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontVariant's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontVariant) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsNormal : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontVariant is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontVariant) IsNormal() bool {
	return me.String() == "normal"
}

// XsdGoPkgHasAttrFontVariantTxsdPresentationAttributesFontSpecificationFontVariant defines attribute FontVariantTxsdPresentationAttributesFontSpecificationFontVariant
type XsdGoPkgHasAttrFontVariantTxsdPresentationAttributesFontSpecificationFontVariant struct {
	FontVariant TxsdPresentationAttributesFontSpecificationFontVariant `xml:"http://www.w3.org/2000/svg font-variant,attr"`
}

// TxsdPresentationAttributesFontSpecificationFontWeight defines TxsdPresentationAttributesFontSpecificationFontWeight
type TxsdPresentationAttributesFontSpecificationFontWeight xsdt.String

// Is100 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "100".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is100() bool {
	return me.String() == "100"
}

// Is200 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "200".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is200() bool {
	return me.String() == "200"
}

// Is500 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "500".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is500() bool {
	return me.String() == "500"
}

// IsBolder : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "bolder".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsBolder() bool {
	return me.String() == "bolder"
}

// Is400 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "400".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is400() bool {
	return me.String() == "400"
}

// Is600 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "600".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is600() bool {
	return me.String() == "600"
}

// Is900 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "900".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is900() bool {
	return me.String() == "900"
}

// Set : Since TxsdPresentationAttributesFontSpecificationFontWeight is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontWeight) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// IsNormal : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsNormal() bool {
	return me.String() == "normal"
}

// Is800 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "800".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is800() bool {
	return me.String() == "800"
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontWeight's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontWeight) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsBold : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "bold".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsBold() bool {
	return me.String() == "bold"
}

// IsLighter : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "lighter".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsLighter() bool {
	return me.String() == "lighter"
}

// Is300 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "300".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is300() bool {
	return me.String() == "300"
}

// Is700 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "700".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is700() bool {
	return me.String() == "700"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsInherit() bool {
	return me.String() == "inherit"
}

// String : Since TxsdPresentationAttributesFontSpecificationFontWeight is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontWeight) String() string {
	return xsdt.String(me).String()
}

// XsdGoPkgHasAttrFontWeightTxsdPresentationAttributesFontSpecificationFontWeight defines attribute FontWeightTxsdPresentationAttributesFontSpecificationFontWeight
type XsdGoPkgHasAttrFontWeightTxsdPresentationAttributesFontSpecificationFontWeight struct {
	FontWeight TxsdPresentationAttributesFontSpecificationFontWeight `xml:"http://www.w3.org/2000/svg font-weight,attr"`
}

// TFontFamilyValueType [[ <family-name> | <generic-family> ],]* [<family-name> | <generic-family>] | inherit
// 'font-family' property/attribute value (i.e., list of fonts)
type TFontFamilyValueType xsdt.String

// Set : Since TFontFamilyValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFontFamilyValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TFontFamilyValueType is just a simple String type, this merely returns the current string value.
func (me TFontFamilyValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TFontFamilyValueType's alias type xsdt.String.
func (me TFontFamilyValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrFontFamilyTFontFamilyValueType defines attribute FontFamilyTFontFamilyValueType
type XsdGoPkgHasAttrFontFamilyTFontFamilyValueType struct {
	FontFamily TFontFamilyValueType `xml:"http://www.w3.org/2000/svg font-family,attr"`
}

// TFontSizeValueType 'font-size' property/attribute value
// <absolute-size> | <relative-size> | <length> | <percentage> | inherit
type TFontSizeValueType xsdt.String

// Set : Since TFontSizeValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFontSizeValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TFontSizeValueType is just a simple String type, this merely returns the current string value.
func (me TFontSizeValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TFontSizeValueType's alias type xsdt.String.
func (me TFontSizeValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrFontSizeTFontSizeValueType defines attribute FontSizeTFontSizeValueType
type XsdGoPkgHasAttrFontSizeTFontSizeValueType struct {
	FontSize TFontSizeValueType `xml:"http://www.w3.org/2000/svg font-size,attr"`
}

// TFontSizeAdjustValueType 'font-size-adjust' property/attribute value
// <number> | none | inherit
type TFontSizeAdjustValueType xsdt.String

// Set : Since TFontSizeAdjustValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFontSizeAdjustValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TFontSizeAdjustValueType is just a simple String type, this merely returns the current string value.
func (me TFontSizeAdjustValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TFontSizeAdjustValueType's alias type xsdt.String.
func (me TFontSizeAdjustValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrFontSizeAdjustTFontSizeAdjustValueType defines attribute FontSizeAdjustTFontSizeAdjustValueType
type XsdGoPkgHasAttrFontSizeAdjustTFontSizeAdjustValueType struct {
	FontSizeAdjust TFontSizeAdjustValueType `xml:"http://www.w3.org/2000/svg font-size-adjust,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesFontSpecification defines XsdGoPkgHasAttsPresentationAttributesFontSpecification
type XsdGoPkgHasAttsPresentationAttributesFontSpecification struct {
	XsdGoPkgHasAttrFontFamilyTFontFamilyValueType

	XsdGoPkgHasAttrFontSizeTFontSizeValueType

	XsdGoPkgHasAttrFontSizeAdjustTFontSizeAdjustValueType

	XsdGoPkgHasAttrFontStretchTxsdPresentationAttributesFontSpecificationFontStretch

	XsdGoPkgHasAttrFontStyleTxsdPresentationAttributesFontSpecificationFontStyle

	XsdGoPkgHasAttrFontVariantTxsdPresentationAttributesFontSpecificationFontVariant

	XsdGoPkgHasAttrFontWeightTxsdPresentationAttributesFontSpecificationFontWeight
}

// XsdGoPkgHasAttrStopColorTSVGColorType The following presentation attributes apply to gradient 'stop' elements
type XsdGoPkgHasAttrStopColorTSVGColorType struct {
	StopColor TSVGColorType `xml:"http://www.w3.org/2000/svg stop-color,attr"`
}

// XsdGoPkgHasAttrStopOpacityTOpacityValueType defines attribute StopOpacityTOpacityValueType
type XsdGoPkgHasAttrStopOpacityTOpacityValueType struct {
	StopOpacity TOpacityValueType `xml:"http://www.w3.org/2000/svg stop-opacity,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesGradients defines XsdGoPkgHasAttsPresentationAttributesGradients
type XsdGoPkgHasAttsPresentationAttributesGradients struct {
	XsdGoPkgHasAttrStopColorTSVGColorType

	XsdGoPkgHasAttrStopOpacityTOpacityValueType
}

// TClipPathValueType The following presentation attributes apply to graphics elements
// <uri> | none | inherit
type TClipPathValueType xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TClipPathValueType's alias type xsdt.String.
func (me TClipPathValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TClipPathValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClipPathValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TClipPathValueType is just a simple String type, this merely returns the current string value.
func (me TClipPathValueType) String() string { return xsdt.String(me).String() }

// XsdGoPkgHasAttrClipPathTClipPathValueType defines attribute ClipPathTClipPathValueType
type XsdGoPkgHasAttrClipPathTClipPathValueType struct {
	ClipPath TClipPathValueType `xml:"http://www.w3.org/2000/svg clip-path,attr"`
}

// XsdGoPkgHasAttrClipRuleTClipFillRuleType defines attribute ClipRuleTClipFillRuleType
type XsdGoPkgHasAttrClipRuleTClipFillRuleType struct {
	ClipRule TClipFillRuleType `xml:"http://www.w3.org/2000/svg clip-rule,attr"`
}

// TFilterValueType <uri> | none | inherit
type TFilterValueType xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TFilterValueType's alias type xsdt.String.
func (me TFilterValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TFilterValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFilterValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TFilterValueType is just a simple String type, this merely returns the current string value.
func (me TFilterValueType) String() string { return xsdt.String(me).String() }

// XsdGoPkgHasAttrFilterTFilterValueType defines attribute FilterTFilterValueType
type XsdGoPkgHasAttrFilterTFilterValueType struct {
	Filter TFilterValueType `xml:"http://www.w3.org/2000/svg filter,attr"`
}

// TxsdPresentationAttributesGraphicsPointerEvents defines TxsdPresentationAttributesGraphicsPointerEvents
type TxsdPresentationAttributesGraphicsPointerEvents xsdt.String

// IsVisibleFill : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visibleFill".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisibleFill() bool {
	return me.String() == "visibleFill"
}

// IsVisibleStroke : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visibleStroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisibleStroke() bool {
	return me.String() == "visibleStroke"
}

// IsVisibleFillStroke : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visibleFillStroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisibleFillStroke() bool {
	return me.String() == "visibleFillStroke"
}

// IsPainted : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "painted".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsPainted() bool {
	return me.String() == "painted"
}

// IsFill : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "fill".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsFill() bool { return me.String() == "fill" }

// String : Since TxsdPresentationAttributesGraphicsPointerEvents is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsPointerEvents) String() string {
	return xsdt.String(me).String()
}

// IsVisible : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visible".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisible() bool {
	return me.String() == "visible"
}

// IsVisiblePainted : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visiblePainted".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisiblePainted() bool {
	return me.String() == "visiblePainted"
}

// IsFillstroke : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "fillstroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsFillstroke() bool {
	return me.String() == "fillstroke"
}

// IsAll : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "all".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsAll() bool { return me.String() == "all" }

// IsNone : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "none".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsNone() bool { return me.String() == "none" }

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "inherit".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesGraphicsPointerEvents is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsPointerEvents) Set(s string) { (*xsdt.String)(me).Set(s) }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsPointerEvents's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsPointerEvents) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsStroke : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "stroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsStroke() bool {
	return me.String() == "stroke"
}

// XsdGoPkgHasAttrPointerEventsTxsdPresentationAttributesGraphicsPointerEvents defines attribute PointerEventsTxsdPresentationAttributesGraphicsPointerEvents
type XsdGoPkgHasAttrPointerEventsTxsdPresentationAttributesGraphicsPointerEvents struct {
	PointerEvents TxsdPresentationAttributesGraphicsPointerEvents `xml:"http://www.w3.org/2000/svg pointer-events,attr"`
}

// TxsdPresentationAttributesGraphicsShapeRendering defines TxsdPresentationAttributesGraphicsShapeRendering
type TxsdPresentationAttributesGraphicsShapeRendering xsdt.String

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "auto".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsAuto() bool {
	return me.String() == "auto"
}

// IsOptimizeSpeed : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "optimizeSpeed".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsOptimizeSpeed() bool {
	return me.String() == "optimizeSpeed"
}

// IsCrispEdges : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "crispEdges".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsCrispEdges() bool {
	return me.String() == "crispEdges"
}

// IsGeometricPrecision : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "geometricPrecision".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsGeometricPrecision() bool {
	return me.String() == "geometricPrecision"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "inherit".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesGraphicsShapeRendering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsShapeRendering) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesGraphicsShapeRendering is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsShapeRendering) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsShapeRendering's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsShapeRendering) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// XsdGoPkgHasAttrShapeRenderingTxsdPresentationAttributesGraphicsShapeRendering defines attribute ShapeRenderingTxsdPresentationAttributesGraphicsShapeRendering
type XsdGoPkgHasAttrShapeRenderingTxsdPresentationAttributesGraphicsShapeRendering struct {
	ShapeRendering TxsdPresentationAttributesGraphicsShapeRendering `xml:"http://www.w3.org/2000/svg shape-rendering,attr"`
}

// TxsdPresentationAttributesGraphicsVisibility defines TxsdPresentationAttributesGraphicsVisibility
type TxsdPresentationAttributesGraphicsVisibility xsdt.String

// IsVisible : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsVisibility is "visible".
func (me TxsdPresentationAttributesGraphicsVisibility) IsVisible() bool {
	return me.String() == "visible"
}

// IsHidden : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsVisibility is "hidden".
func (me TxsdPresentationAttributesGraphicsVisibility) IsHidden() bool {
	return me.String() == "hidden"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsVisibility is "inherit".
func (me TxsdPresentationAttributesGraphicsVisibility) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesGraphicsVisibility is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsVisibility) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesGraphicsVisibility is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsVisibility) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsVisibility's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsVisibility) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// XsdGoPkgHasAttrVisibilityTxsdPresentationAttributesGraphicsVisibility defines attribute VisibilityTxsdPresentationAttributesGraphicsVisibility
type XsdGoPkgHasAttrVisibilityTxsdPresentationAttributesGraphicsVisibility struct {
	Visibility TxsdPresentationAttributesGraphicsVisibility `xml:"http://www.w3.org/2000/svg visibility,attr"`
}

// TCursorValueType Value is an optional comma-separated list orf uri references followed by one token from an enumerated list.
// [ [<uri> ,]* [ auto | crosshair | default | pointer | move | e-resize | ne-resize | nw-resize | n-resize | se-resize | sw-resize | s-resize | w-resize| text | wait | help ] ] | inherit
type TCursorValueType xsdt.String

// Set : Since TCursorValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCursorValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TCursorValueType is just a simple String type, this merely returns the current string value.
func (me TCursorValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TCursorValueType's alias type xsdt.String.
func (me TCursorValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrCursorTCursorValueType defines attribute CursorTCursorValueType
type XsdGoPkgHasAttrCursorTCursorValueType struct {
	Cursor TCursorValueType `xml:"http://www.w3.org/2000/svg cursor,attr"`
}

// TxsdPresentationAttributesGraphicsDisplay defines TxsdPresentationAttributesGraphicsDisplay
type TxsdPresentationAttributesGraphicsDisplay xsdt.String

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "inherit".
func (me TxsdPresentationAttributesGraphicsDisplay) IsInherit() bool { return me.String() == "inherit" }

// IsListItem : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "list-item".
func (me TxsdPresentationAttributesGraphicsDisplay) IsListItem() bool {
	return me.String() == "list-item"
}

// IsTableRow : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-row".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableRow() bool {
	return me.String() == "table-row"
}

// IsTableCell : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-cell".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableCell() bool {
	return me.String() == "table-cell"
}

// IsTableRowGroup : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-row-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableRowGroup() bool {
	return me.String() == "table-row-group"
}

// IsTableHeaderGroup : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-header-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableHeaderGroup() bool {
	return me.String() == "table-header-group"
}

// IsTableColumnGroup : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-column-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableColumnGroup() bool {
	return me.String() == "table-column-group"
}

// IsTableCaption : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-caption".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableCaption() bool {
	return me.String() == "table-caption"
}

// Set : Since TxsdPresentationAttributesGraphicsDisplay is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsDisplay) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesGraphicsDisplay is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsDisplay) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsDisplay's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsDisplay) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsTableColumn : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-column".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableColumn() bool {
	return me.String() == "table-column"
}

// IsBlock : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "block".
func (me TxsdPresentationAttributesGraphicsDisplay) IsBlock() bool { return me.String() == "block" }

// IsCompact : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "compact".
func (me TxsdPresentationAttributesGraphicsDisplay) IsCompact() bool { return me.String() == "compact" }

// IsTable : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTable() bool { return me.String() == "table" }

// IsInlineTable : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "inline-table".
func (me TxsdPresentationAttributesGraphicsDisplay) IsInlineTable() bool {
	return me.String() == "inline-table"
}

// IsTableFooterGroup : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-footer-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableFooterGroup() bool {
	return me.String() == "table-footer-group"
}

// IsNone : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "none".
func (me TxsdPresentationAttributesGraphicsDisplay) IsNone() bool { return me.String() == "none" }

// IsInline : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "inline".
func (me TxsdPresentationAttributesGraphicsDisplay) IsInline() bool { return me.String() == "inline" }

// IsRunIn : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "run-in".
func (me TxsdPresentationAttributesGraphicsDisplay) IsRunIn() bool { return me.String() == "run-in" }

// IsMarker : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "marker".
func (me TxsdPresentationAttributesGraphicsDisplay) IsMarker() bool { return me.String() == "marker" }

// XsdGoPkgHasAttrDisplayTxsdPresentationAttributesGraphicsDisplay defines attribute DisplayTxsdPresentationAttributesGraphicsDisplay
type XsdGoPkgHasAttrDisplayTxsdPresentationAttributesGraphicsDisplay struct {
	Display TxsdPresentationAttributesGraphicsDisplay `xml:"http://www.w3.org/2000/svg display,attr"`
}

// XsdGoPkgHasAttrImageRenderingTxsdPresentationAttributesGraphicsImageRendering defines attribute ImageRenderingTxsdPresentationAttributesGraphicsImageRendering
type XsdGoPkgHasAttrImageRenderingTxsdPresentationAttributesGraphicsImageRendering struct {
	ImageRendering TxsdPresentationAttributesColorColorRendering `xml:"http://www.w3.org/2000/svg image-rendering,attr"`
}

// TMaskValueType 'mask' property/attribute value (e.g., 'none', %URI;)
// <uri> | none | inherit
type TMaskValueType xsdt.String

// String : Since TMaskValueType is just a simple String type, this merely returns the current string value.
func (me TMaskValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TMaskValueType's alias type xsdt.String.
func (me TMaskValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TMaskValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMaskValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// XsdGoPkgHasAttrMaskTMaskValueType defines attribute MaskTMaskValueType
type XsdGoPkgHasAttrMaskTMaskValueType struct {
	Mask TMaskValueType `xml:"http://www.w3.org/2000/svg mask,attr"`
}

// XsdGoPkgHasAttrOpacityTOpacityValueType defines attribute OpacityTOpacityValueType
type XsdGoPkgHasAttrOpacityTOpacityValueType struct {
	Opacity TOpacityValueType `xml:"http://www.w3.org/2000/svg opacity,attr"`
}

// TxsdPresentationAttributesGraphicsTextRendering defines TxsdPresentationAttributesGraphicsTextRendering
type TxsdPresentationAttributesGraphicsTextRendering xsdt.String

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "inherit".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesGraphicsTextRendering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsTextRendering) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesGraphicsTextRendering is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsTextRendering) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsTextRendering's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsTextRendering) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "auto".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsAuto() bool { return me.String() == "auto" }

// IsOptimizeSpeed : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "optimizeSpeed".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsOptimizeSpeed() bool {
	return me.String() == "optimizeSpeed"
}

// IsOptimizeLegibility : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "optimizeLegibility".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsOptimizeLegibility() bool {
	return me.String() == "optimizeLegibility"
}

// IsGeometricPrecision : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "geometricPrecision".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsGeometricPrecision() bool {
	return me.String() == "geometricPrecision"
}

// XsdGoPkgHasAttrTextRenderingTxsdPresentationAttributesGraphicsTextRendering defines attribute TextRenderingTxsdPresentationAttributesGraphicsTextRendering
type XsdGoPkgHasAttrTextRenderingTxsdPresentationAttributesGraphicsTextRendering struct {
	TextRendering TxsdPresentationAttributesGraphicsTextRendering `xml:"http://www.w3.org/2000/svg text-rendering,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesGraphics defines XsdGoPkgHasAttsPresentationAttributesGraphics
type XsdGoPkgHasAttsPresentationAttributesGraphics struct {
	XsdGoPkgHasAttrMaskTMaskValueType

	XsdGoPkgHasAttrOpacityTOpacityValueType

	XsdGoPkgHasAttrTextRenderingTxsdPresentationAttributesGraphicsTextRendering

	XsdGoPkgHasAttrVisibilityTxsdPresentationAttributesGraphicsVisibility

	XsdGoPkgHasAttrCursorTCursorValueType

	XsdGoPkgHasAttrDisplayTxsdPresentationAttributesGraphicsDisplay

	XsdGoPkgHasAttrImageRenderingTxsdPresentationAttributesGraphicsImageRendering

	XsdGoPkgHasAttrPointerEventsTxsdPresentationAttributesGraphicsPointerEvents

	XsdGoPkgHasAttrShapeRenderingTxsdPresentationAttributesGraphicsShapeRendering

	XsdGoPkgHasAttrClipPathTClipPathValueType

	XsdGoPkgHasAttrClipRuleTClipFillRuleType

	XsdGoPkgHasAttrFilterTFilterValueType
}

// XsdGoPkgHasAttrColorProfileXsdtString The following presentation attributes apply to 'image' elements
type XsdGoPkgHasAttrColorProfileXsdtString struct {
	ColorProfile xsdt.String `xml:"http://www.w3.org/2000/svg color-profile,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesImages defines XsdGoPkgHasAttsPresentationAttributesImages
type XsdGoPkgHasAttsPresentationAttributesImages struct {
	XsdGoPkgHasAttrColorProfileXsdtString
}

// XsdGoPkgHasAttrLightingColorTSVGColorType The following presentation attributes apply to 'feDiffuseLighting' and 'feSpecularLighting' elements
type XsdGoPkgHasAttrLightingColorTSVGColorType struct {
	LightingColor TSVGColorType `xml:"http://www.w3.org/2000/svg lighting-color,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesLightingEffects defines XsdGoPkgHasAttsPresentationAttributesLightingEffects
type XsdGoPkgHasAttsPresentationAttributesLightingEffects struct {
	XsdGoPkgHasAttrLightingColorTSVGColorType
}

// TMarkerValueType The following presentation attributes apply to marker operations
// 'marker' property/attribute value (e.g., 'none', %URI;)
type TMarkerValueType xsdt.String

// Set : Since TMarkerValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMarkerValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TMarkerValueType is just a simple String type, this merely returns the current string value.
func (me TMarkerValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TMarkerValueType's alias type xsdt.String.
func (me TMarkerValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrMarkerStartTMarkerValueType defines attribute MarkerStartTMarkerValueType
type XsdGoPkgHasAttrMarkerStartTMarkerValueType struct {
	MarkerStart TMarkerValueType `xml:"http://www.w3.org/2000/svg marker-start,attr"`
}

// XsdGoPkgHasAttrMarkerMidTMarkerValueType defines attribute MarkerMidTMarkerValueType
type XsdGoPkgHasAttrMarkerMidTMarkerValueType struct {
	MarkerMid TMarkerValueType `xml:"http://www.w3.org/2000/svg marker-mid,attr"`
}

// XsdGoPkgHasAttrMarkerEndTMarkerValueType defines attribute MarkerEndTMarkerValueType
type XsdGoPkgHasAttrMarkerEndTMarkerValueType struct {
	MarkerEnd TMarkerValueType `xml:"http://www.w3.org/2000/svg marker-end,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesMarkers defines XsdGoPkgHasAttsPresentationAttributesMarkers
type XsdGoPkgHasAttsPresentationAttributesMarkers struct {
	XsdGoPkgHasAttrMarkerStartTMarkerValueType

	XsdGoPkgHasAttrMarkerMidTMarkerValueType

	XsdGoPkgHasAttrMarkerEndTMarkerValueType
}

// TGlyphOrientationHorizontalValueType The following presentation attributes apply to text content elements
// 'glyph-orientation-horizontal' property/attribute value (e.g., <angle>)
// <angle> | inherit
type TGlyphOrientationHorizontalValueType xsdt.String

// Set : Since TGlyphOrientationHorizontalValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TGlyphOrientationHorizontalValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TGlyphOrientationHorizontalValueType is just a simple String type, this merely returns the current string value.
func (me TGlyphOrientationHorizontalValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TGlyphOrientationHorizontalValueType's alias type xsdt.String.
func (me TGlyphOrientationHorizontalValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrGlyphOrientationHorizontalTGlyphOrientationHorizontalValueType defines attribute GlyphOrientationHorizontalTGlyphOrientationHorizontalValueType
type XsdGoPkgHasAttrGlyphOrientationHorizontalTGlyphOrientationHorizontalValueType struct {
	GlyphOrientationHorizontal TGlyphOrientationHorizontalValueType `xml:"http://www.w3.org/2000/svg glyph-orientation-horizontal,attr"`
}

// TGlyphOrientationVerticalValueType 'glyph-orientation-vertical' property/attribute value (e.g., 'auto', <angle>)
// auto | <angle> | inherit
type TGlyphOrientationVerticalValueType xsdt.String

// Set : Since TGlyphOrientationVerticalValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TGlyphOrientationVerticalValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TGlyphOrientationVerticalValueType is just a simple String type, this merely returns the current string value.
func (me TGlyphOrientationVerticalValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TGlyphOrientationVerticalValueType's alias type xsdt.String.
func (me TGlyphOrientationVerticalValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrGlyphOrientationVerticalTGlyphOrientationVerticalValueType defines attribute GlyphOrientationVerticalTGlyphOrientationVerticalValueType
type XsdGoPkgHasAttrGlyphOrientationVerticalTGlyphOrientationVerticalValueType struct {
	GlyphOrientationVertical TGlyphOrientationVerticalValueType `xml:"http://www.w3.org/2000/svg glyph-orientation-vertical,attr"`
}

// TSpacingValueType 'letter-spacing' or 'word-spacing' property/attribute value (e.g., normal | <length>)
type TSpacingValueType xsdt.String

// Set : Since TSpacingValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSpacingValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TSpacingValueType is just a simple String type, this merely returns the current string value.
func (me TSpacingValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TSpacingValueType's alias type xsdt.String.
func (me TSpacingValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrLetterSpacingTSpacingValueType defines attribute LetterSpacingTSpacingValueType
type XsdGoPkgHasAttrLetterSpacingTSpacingValueType struct {
	LetterSpacing TSpacingValueType `xml:"http://www.w3.org/2000/svg letter-spacing,attr"`
}

// TxsdPresentationAttributesTextContentElementsUnicodeBidi defines TxsdPresentationAttributesTextContentElementsUnicodeBidi
type TxsdPresentationAttributesTextContentElementsUnicodeBidi xsdt.String

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "inherit".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesTextContentElementsUnicodeBidi is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsUnicodeBidi) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesTextContentElementsUnicodeBidi is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsUnicodeBidi's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsNormal : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "normal".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsNormal() bool {
	return me.String() == "normal"
}

// IsEmbed : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "embed".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsEmbed() bool {
	return me.String() == "embed"
}

// IsBidiOverride : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "bidi-override".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsBidiOverride() bool {
	return me.String() == "bidi-override"
}

// XsdGoPkgHasAttrUnicodeBidiTxsdPresentationAttributesTextContentElementsUnicodeBidi defines attribute UnicodeBidiTxsdPresentationAttributesTextContentElementsUnicodeBidi
type XsdGoPkgHasAttrUnicodeBidiTxsdPresentationAttributesTextContentElementsUnicodeBidi struct {
	UnicodeBidi TxsdPresentationAttributesTextContentElementsUnicodeBidi `xml:"http://www.w3.org/2000/svg unicode-bidi,attr"`
}

// XsdGoPkgHasAttrWordSpacingTSpacingValueType defines attribute WordSpacingTSpacingValueType
type XsdGoPkgHasAttrWordSpacingTSpacingValueType struct {
	WordSpacing TSpacingValueType `xml:"http://www.w3.org/2000/svg word-spacing,attr"`
}

// TxsdPresentationAttributesTextContentElementsDominantBaseline defines TxsdPresentationAttributesTextContentElementsDominantBaseline
type TxsdPresentationAttributesTextContentElementsDominantBaseline xsdt.String

// String : Since TxsdPresentationAttributesTextContentElementsDominantBaseline is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsDominantBaseline's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsHanging : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "hanging".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsHanging() bool {
	return me.String() == "hanging"
}

// IsMathematical : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "mathematical".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsMathematical() bool {
	return me.String() == "mathematical"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "inherit".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesTextContentElementsDominantBaseline is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsDominantBaseline) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// IsAutosenseScript : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "autosense-script".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsAutosenseScript() bool {
	return me.String() == "autosense-script"
}

// IsNoChange : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "no-change".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsNoChange() bool {
	return me.String() == "no-change"
}

// IsReset : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "reset".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsReset() bool {
	return me.String() == "reset"
}

// IsIdeographic : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "ideographic".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsIdeographic() bool {
	return me.String() == "ideographic"
}

// IsLower : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "lower".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsLower() bool {
	return me.String() == "lower"
}

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "auto".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsAuto() bool {
	return me.String() == "auto"
}

// XsdGoPkgHasAttrDominantBaselineTxsdPresentationAttributesTextContentElementsDominantBaseline defines attribute DominantBaselineTxsdPresentationAttributesTextContentElementsDominantBaseline
type XsdGoPkgHasAttrDominantBaselineTxsdPresentationAttributesTextContentElementsDominantBaseline struct {
	DominantBaseline TxsdPresentationAttributesTextContentElementsDominantBaseline `xml:"http://www.w3.org/2000/svg dominant-baseline,attr"`
}

// TBaselineShiftValueType The actual definition is
// baseline | sub | super | <percentage> | <length> | inherit
// not sure that union can do this
type TBaselineShiftValueType xsdt.String

// Set : Since TBaselineShiftValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TBaselineShiftValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TBaselineShiftValueType is just a simple String type, this merely returns the current string value.
func (me TBaselineShiftValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TBaselineShiftValueType's alias type xsdt.String.
func (me TBaselineShiftValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrBaselineShiftTBaselineShiftValueType defines attribute BaselineShiftTBaselineShiftValueType
type XsdGoPkgHasAttrBaselineShiftTBaselineShiftValueType struct {
	BaselineShift TBaselineShiftValueType `xml:"http://www.w3.org/2000/svg baseline-shift,attr"`
}

// TxsdPresentationAttributesTextContentElementsDirection defines TxsdPresentationAttributesTextContentElementsDirection
type TxsdPresentationAttributesTextContentElementsDirection xsdt.String

// String : Since TxsdPresentationAttributesTextContentElementsDirection is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsDirection) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsDirection's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsDirection) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsLtr : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDirection is "ltr".
func (me TxsdPresentationAttributesTextContentElementsDirection) IsLtr() bool {
	return me.String() == "ltr"
}

// IsRtl : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDirection is "rtl".
func (me TxsdPresentationAttributesTextContentElementsDirection) IsRtl() bool {
	return me.String() == "rtl"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDirection is "inherit".
func (me TxsdPresentationAttributesTextContentElementsDirection) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesTextContentElementsDirection is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsDirection) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// XsdGoPkgHasAttrDirectionTxsdPresentationAttributesTextContentElementsDirection defines attribute DirectionTxsdPresentationAttributesTextContentElementsDirection
type XsdGoPkgHasAttrDirectionTxsdPresentationAttributesTextContentElementsDirection struct {
	Direction TxsdPresentationAttributesTextContentElementsDirection `xml:"http://www.w3.org/2000/svg direction,attr"`
}

// TxsdPresentationAttributesTextContentElementsTextAnchor defines TxsdPresentationAttributesTextContentElementsTextAnchor
type TxsdPresentationAttributesTextContentElementsTextAnchor xsdt.String

// Set : Since TxsdPresentationAttributesTextContentElementsTextAnchor is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsTextAnchor) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesTextContentElementsTextAnchor is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsTextAnchor's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsStart : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "start".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsStart() bool {
	return me.String() == "start"
}

// IsMiddle : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "middle".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsMiddle() bool {
	return me.String() == "middle"
}

// IsEnd : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "end".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsEnd() bool {
	return me.String() == "end"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "inherit".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsInherit() bool {
	return me.String() == "inherit"
}

// XsdGoPkgHasAttrTextAnchorTxsdPresentationAttributesTextContentElementsTextAnchor defines attribute TextAnchorTxsdPresentationAttributesTextContentElementsTextAnchor
type XsdGoPkgHasAttrTextAnchorTxsdPresentationAttributesTextContentElementsTextAnchor struct {
	TextAnchor TxsdPresentationAttributesTextContentElementsTextAnchor `xml:"http://www.w3.org/2000/svg text-anchor,attr"`
}

// TextDecorationValueType 'text-decoration' property/attribute value (e.g., 'none', 'underline')
type TextDecorationValueType xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TextDecorationValueType's alias type xsdt.String.
func (me TextDecorationValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TextDecorationValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TextDecorationValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TextDecorationValueType is just a simple String type, this merely returns the current string value.
func (me TextDecorationValueType) String() string { return xsdt.String(me).String() }

// XsdGoPkgHasAttrTextDecorationTextDecorationValueType defines attribute TextDecorationTextDecorationValueType
type XsdGoPkgHasAttrTextDecorationTextDecorationValueType struct {
	TextDecoration TextDecorationValueType `xml:"http://www.w3.org/2000/svg text-decoration,attr"`
}

// TxsdPresentationAttributesTextContentElementsAlignmentBaseline defines TxsdPresentationAttributesTextContentElementsAlignmentBaseline
type TxsdPresentationAttributesTextContentElementsAlignmentBaseline xsdt.String

// Set : Since TxsdPresentationAttributesTextContentElementsAlignmentBaseline is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsAlignmentBaseline) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsAlignmentBaseline's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsMiddle : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "middle".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsMiddle() bool {
	return me.String() == "middle"
}

// IsBottom : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "bottom".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsBottom() bool {
	return me.String() == "bottom"
}

// IsTextAfterEdge : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-after-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextAfterEdge() bool {
	return me.String() == "text-after-edge"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "inherit".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsInherit() bool {
	return me.String() == "inherit"
}

// String : Since TxsdPresentationAttributesTextContentElementsAlignmentBaseline is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) String() string {
	return xsdt.String(me).String()
}

// IsBaseline : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "baseline".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsBaseline() bool {
	return me.String() == "baseline"
}

// IsAfterEdge : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "after-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsAfterEdge() bool {
	return me.String() == "after-edge"
}

// IsLower : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "lower".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsLower() bool {
	return me.String() == "lower"
}

// IsMathematical : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "mathematical".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsMathematical() bool {
	return me.String() == "mathematical"
}

// IsTop : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "top".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTop() bool {
	return me.String() == "top"
}

// IsTextTop : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-top".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextTop() bool {
	return me.String() == "text-top"
}

// IsTextBeforeEdge : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-before-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextBeforeEdge() bool {
	return me.String() == "text-before-edge"
}

// IsTextBottom : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-bottom".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextBottom() bool {
	return me.String() == "text-bottom"
}

// IsIdeographic : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "ideographic".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsIdeographic() bool {
	return me.String() == "ideographic"
}

// IsBeforeEdge : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "before-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsBeforeEdge() bool {
	return me.String() == "before-edge"
}

// IsHanging : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "hanging".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsHanging() bool {
	return me.String() == "hanging"
}

// XsdGoPkgHasAttrAlignmentBaselineTxsdPresentationAttributesTextContentElementsAlignmentBaseline defines attribute AlignmentBaselineTxsdPresentationAttributesTextContentElementsAlignmentBaseline
type XsdGoPkgHasAttrAlignmentBaselineTxsdPresentationAttributesTextContentElementsAlignmentBaseline struct {
	AlignmentBaseline TxsdPresentationAttributesTextContentElementsAlignmentBaseline `xml:"http://www.w3.org/2000/svg alignment-baseline,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesTextContentElements defines XsdGoPkgHasAttsPresentationAttributesTextContentElements
type XsdGoPkgHasAttsPresentationAttributesTextContentElements struct {
	XsdGoPkgHasAttrWordSpacingTSpacingValueType

	XsdGoPkgHasAttrDominantBaselineTxsdPresentationAttributesTextContentElementsDominantBaseline

	XsdGoPkgHasAttrGlyphOrientationHorizontalTGlyphOrientationHorizontalValueType

	XsdGoPkgHasAttrGlyphOrientationVerticalTGlyphOrientationVerticalValueType

	XsdGoPkgHasAttrLetterSpacingTSpacingValueType

	XsdGoPkgHasAttrUnicodeBidiTxsdPresentationAttributesTextContentElementsUnicodeBidi

	XsdGoPkgHasAttrAlignmentBaselineTxsdPresentationAttributesTextContentElementsAlignmentBaseline

	XsdGoPkgHasAttrBaselineShiftTBaselineShiftValueType

	XsdGoPkgHasAttrDirectionTxsdPresentationAttributesTextContentElementsDirection

	XsdGoPkgHasAttrTextAnchorTxsdPresentationAttributesTextContentElementsTextAnchor

	XsdGoPkgHasAttrTextDecorationTextDecorationValueType
}

// TxsdPresentationAttributesTextElementsWritingMode The following presentation attributes apply to 'text' elements
type TxsdPresentationAttributesTextElementsWritingMode xsdt.String

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "inherit".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesTextElementsWritingMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextElementsWritingMode) Set(s string) { (*xsdt.String)(me).Set(s) }

// IsLrTb : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "lr-tb".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsLrTb() bool {
	return me.String() == "lr-tb"
}

// IsLr : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "lr".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsLr() bool { return me.String() == "lr" }

// IsRl : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "rl".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsRl() bool { return me.String() == "rl" }

// IsTb : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "tb".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsTb() bool { return me.String() == "tb" }

// String : Since TxsdPresentationAttributesTextElementsWritingMode is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextElementsWritingMode) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextElementsWritingMode's alias type xsdt.String.
func (me TxsdPresentationAttributesTextElementsWritingMode) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsRlTb : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "rl-tb".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsRlTb() bool {
	return me.String() == "rl-tb"
}

// IsTbRl : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "tb-rl".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsTbRl() bool {
	return me.String() == "tb-rl"
}

// XsdGoPkgHasAttrWritingModeTxsdPresentationAttributesTextElementsWritingMode defines attribute WritingModeTxsdPresentationAttributesTextElementsWritingMode
type XsdGoPkgHasAttrWritingModeTxsdPresentationAttributesTextElementsWritingMode struct {
	WritingMode TxsdPresentationAttributesTextElementsWritingMode `xml:"http://www.w3.org/2000/svg writing-mode,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesTextElements defines XsdGoPkgHasAttsPresentationAttributesTextElements
type XsdGoPkgHasAttsPresentationAttributesTextElements struct {
	XsdGoPkgHasAttrWritingModeTxsdPresentationAttributesTextElementsWritingMode
}

// TClipValueType The following presentation attributes apply to elements that establish viewports
// <shape> | auto | inherit
type TClipValueType xsdt.String

// Set : Since TClipValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClipValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TClipValueType is just a simple String type, this merely returns the current string value.
func (me TClipValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TClipValueType's alias type xsdt.String.
func (me TClipValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrClipTClipValueType defines attribute ClipTClipValueType
type XsdGoPkgHasAttrClipTClipValueType struct {
	Clip TClipValueType `xml:"http://www.w3.org/2000/svg clip,attr"`
}

// TxsdPresentationAttributesViewportsOverflow defines TxsdPresentationAttributesViewportsOverflow
type TxsdPresentationAttributesViewportsOverflow xsdt.String

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "inherit".
func (me TxsdPresentationAttributesViewportsOverflow) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesViewportsOverflow is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesViewportsOverflow) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesViewportsOverflow is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesViewportsOverflow) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesViewportsOverflow's alias type xsdt.String.
func (me TxsdPresentationAttributesViewportsOverflow) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsVisible : Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "visible".
func (me TxsdPresentationAttributesViewportsOverflow) IsVisible() bool {
	return me.String() == "visible"
}

// IsHidden : Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "hidden".
func (me TxsdPresentationAttributesViewportsOverflow) IsHidden() bool { return me.String() == "hidden" }

// IsScroll : Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "scroll".
func (me TxsdPresentationAttributesViewportsOverflow) IsScroll() bool { return me.String() == "scroll" }

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "auto".
func (me TxsdPresentationAttributesViewportsOverflow) IsAuto() bool { return me.String() == "auto" }

// XsdGoPkgHasAttrOverflowTxsdPresentationAttributesViewportsOverflow defines attribute OverflowTxsdPresentationAttributesViewportsOverflow
type XsdGoPkgHasAttrOverflowTxsdPresentationAttributesViewportsOverflow struct {
	Overflow TxsdPresentationAttributesViewportsOverflow `xml:"http://www.w3.org/2000/svg overflow,attr"`
}

// XsdGoPkgHasAttsPresentationAttributesViewports defines XsdGoPkgHasAttsPresentationAttributesViewports
type XsdGoPkgHasAttsPresentationAttributesViewports struct {
	XsdGoPkgHasAttrClipTClipValueType

	XsdGoPkgHasAttrOverflowTxsdPresentationAttributesViewportsOverflow
}

// XsdGoPkgHasAttsPresentationAttributesAll The following represents the complete list of presentation attributes
type XsdGoPkgHasAttsPresentationAttributesAll struct {
	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasAttsPresentationAttributesFeFlood

	XsdGoPkgHasAttsPresentationAttributesContainers

	XsdGoPkgHasAttsPresentationAttributesFilterPrimitives

	XsdGoPkgHasAttsPresentationAttributesGradients

	XsdGoPkgHasAttsPresentationAttributesMarkers

	XsdGoPkgHasAttsPresentationAttributesTextElements

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttsPresentationAttributesImages

	XsdGoPkgHasAttsPresentationAttributesLightingEffects

	XsdGoPkgHasAttsPresentationAttributesFontSpecification

	XsdGoPkgHasAttsPresentationAttributesTextContentElements

	XsdGoPkgHasAttsPresentationAttributesViewports
}

// XsdGoPkgHasAttrResultXsdtString defines attribute ResultXsdtString
type XsdGoPkgHasAttrResultXsdtString struct {
	Result xsdt.String `xml:"http://www.w3.org/2000/svg result,attr"`
}

// TCoordinateType a <co-ordinate>
// a coordinate, which is a number optionally followed immediately by a unit identifier. Perhaps it is possible to represent this as a union by declaring unit idenifiers as a type?
type TCoordinateType xsdt.String

// Set : Since TCoordinateType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCoordinateType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TCoordinateType is just a simple String type, this merely returns the current string value.
func (me TCoordinateType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TCoordinateType's alias type xsdt.String.
func (me TCoordinateType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrXTCoordinateType defines attribute XTCoordinateType
type XsdGoPkgHasAttrXTCoordinateType struct {
	X TCoordinateType `xml:"http://www.w3.org/2000/svg x,attr"`
}

// XsdGoPkgHasAttrYTCoordinateType defines attribute YTCoordinateType
type XsdGoPkgHasAttrYTCoordinateType struct {
	Y TCoordinateType `xml:"http://www.w3.org/2000/svg y,attr"`
}

// TLengthType a <length>
type TLengthType xsdt.String

// Set : Since TLengthType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLengthType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TLengthType is just a simple String type, this merely returns the current string value.
func (me TLengthType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TLengthType's alias type xsdt.String.
func (me TLengthType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrWidthTLengthType defines attribute WidthTLengthType
type XsdGoPkgHasAttrWidthTLengthType struct {
	Width TLengthType `xml:"http://www.w3.org/2000/svg width,attr"`
}

// XsdGoPkgHasAttrHeightTLengthType defines attribute HeightTLengthType
type XsdGoPkgHasAttrHeightTLengthType struct {
	Height TLengthType `xml:"http://www.w3.org/2000/svg height,attr"`
}

// XsdGoPkgHasAttsFilterPrimitiveAttributes defines XsdGoPkgHasAttsFilterPrimitiveAttributes
type XsdGoPkgHasAttsFilterPrimitiveAttributes struct {
	XsdGoPkgHasAttrWidthTLengthType

	XsdGoPkgHasAttrHeightTLengthType

	XsdGoPkgHasAttrResultXsdtString

	XsdGoPkgHasAttrXTCoordinateType

	XsdGoPkgHasAttrYTCoordinateType
}

// XsdGoPkgHasAttrInXsdtString defines attribute InXsdtString
type XsdGoPkgHasAttrInXsdtString struct {
	In xsdt.String `xml:"http://www.w3.org/2000/svg in,attr"`
}

// XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn defines XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn
type XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn struct {
	XsdGoPkgHasAttsFilterPrimitiveAttributes

	XsdGoPkgHasAttrInXsdtString
}

// XsdGoPkgHasAttrSlopeXsdtDouble defines attribute SlopeXsdtDouble
type XsdGoPkgHasAttrSlopeXsdtDouble struct {
	Slope xsdt.Double `xml:"http://www.w3.org/2000/svg slope,attr"`
}

// XsdGoPkgHasAttrInterceptXsdtDouble defines attribute InterceptXsdtDouble
type XsdGoPkgHasAttrInterceptXsdtDouble struct {
	Intercept xsdt.Double `xml:"http://www.w3.org/2000/svg intercept,attr"`
}

// XsdGoPkgHasAttrAmplitudeXsdtDouble defines attribute AmplitudeXsdtDouble
type XsdGoPkgHasAttrAmplitudeXsdtDouble struct {
	Amplitude xsdt.Double `xml:"http://www.w3.org/2000/svg amplitude,attr"`
}

// XsdGoPkgHasAttrExponentXsdtDouble defines attribute ExponentXsdtDouble
type XsdGoPkgHasAttrExponentXsdtDouble struct {
	Exponent xsdt.Double `xml:"http://www.w3.org/2000/svg exponent,attr"`
}

// XsdGoPkgHasAttrOffsetXsdtDouble defines attribute OffsetXsdtDouble
type XsdGoPkgHasAttrOffsetXsdtDouble struct {
	Offset xsdt.Double `xml:"http://www.w3.org/2000/svg offset,attr"`
}

// TxsdComponentTransferFunctionAttributesType defines TxsdComponentTransferFunctionAttributesType
type TxsdComponentTransferFunctionAttributesType xsdt.String

// Set : Since TxsdComponentTransferFunctionAttributesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdComponentTransferFunctionAttributesType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdComponentTransferFunctionAttributesType is just a simple String type, this merely returns the current string value.
func (me TxsdComponentTransferFunctionAttributesType) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdComponentTransferFunctionAttributesType's alias type xsdt.String.
func (me TxsdComponentTransferFunctionAttributesType) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsIdentity : Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "identity".
func (me TxsdComponentTransferFunctionAttributesType) IsIdentity() bool {
	return me.String() == "identity"
}

// IsTable : Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "table".
func (me TxsdComponentTransferFunctionAttributesType) IsTable() bool { return me.String() == "table" }

// IsDiscrete : Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "discrete".
func (me TxsdComponentTransferFunctionAttributesType) IsDiscrete() bool {
	return me.String() == "discrete"
}

// IsLinear : Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "linear".
func (me TxsdComponentTransferFunctionAttributesType) IsLinear() bool { return me.String() == "linear" }

// IsGamma : Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "gamma".
func (me TxsdComponentTransferFunctionAttributesType) IsGamma() bool { return me.String() == "gamma" }

// XsdGoPkgHasAttrTypeTxsdComponentTransferFunctionAttributesType defines attribute TypeTxsdComponentTransferFunctionAttributesType
type XsdGoPkgHasAttrTypeTxsdComponentTransferFunctionAttributesType struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"http://www.w3.org/2000/svg type,attr"`
}

// XsdGoPkgHasAttrTableValuesXsdtString defines attribute TableValuesXsdtString
type XsdGoPkgHasAttrTableValuesXsdtString struct {
	TableValues xsdt.String `xml:"http://www.w3.org/2000/svg tableValues,attr"`
}

// XsdGoPkgHasAttsComponentTransferFunctionAttributes defines XsdGoPkgHasAttsComponentTransferFunctionAttributes
type XsdGoPkgHasAttsComponentTransferFunctionAttributes struct {
	XsdGoPkgHasAttrAmplitudeXsdtDouble

	XsdGoPkgHasAttrExponentXsdtDouble

	XsdGoPkgHasAttrOffsetXsdtDouble

	XsdGoPkgHasAttrTypeTxsdComponentTransferFunctionAttributesType

	XsdGoPkgHasAttrTableValuesXsdtString

	XsdGoPkgHasAttrSlopeXsdtDouble

	XsdGoPkgHasAttrInterceptXsdtDouble
}

// XsdGoPkgHasAttsAnimElementAttrs defines XsdGoPkgHasAttsAnimElementAttrs
type XsdGoPkgHasAttsAnimElementAttrs struct {
	XsdGoPkgHasAttsXlinkRefAttrs

	xlink.XsdGoPkgHasAttrHref
}

// XsdGoPkgHasAttrAttributeNameXsdtString defines attribute AttributeNameXsdtString
type XsdGoPkgHasAttrAttributeNameXsdtString struct {
	AttributeName xsdt.String `xml:"http://www.w3.org/2000/svg attributeName,attr"`
}

// XsdGoPkgHasAttrAttributeTypeXsdtString defines attribute AttributeTypeXsdtString
type XsdGoPkgHasAttrAttributeTypeXsdtString struct {
	AttributeType xsdt.String `xml:"http://www.w3.org/2000/svg attributeType,attr"`
}

// XsdGoPkgHasAttsAnimAttributeAttrs defines XsdGoPkgHasAttsAnimAttributeAttrs
type XsdGoPkgHasAttsAnimAttributeAttrs struct {
	XsdGoPkgHasAttrAttributeNameXsdtString

	XsdGoPkgHasAttrAttributeTypeXsdtString
}

// XsdGoPkgHasAttsAnimTargetAttrs defines XsdGoPkgHasAttsAnimTargetAttrs
type XsdGoPkgHasAttsAnimTargetAttrs struct {
	XsdGoPkgHasAttsAnimAttributeAttrs

	XsdGoPkgHasAttsAnimElementAttrs
}

// XsdGoPkgHasAttrBeginXsdtString defines attribute BeginXsdtString
type XsdGoPkgHasAttrBeginXsdtString struct {
	Begin xsdt.String `xml:"http://www.w3.org/2000/svg begin,attr"`
}

// XsdGoPkgHasAttrEndXsdtString defines attribute EndXsdtString
type XsdGoPkgHasAttrEndXsdtString struct {
	End xsdt.String `xml:"http://www.w3.org/2000/svg end,attr"`
}

// XsdGoPkgHasAttrMaxXsdtString defines attribute MaxXsdtString
type XsdGoPkgHasAttrMaxXsdtString struct {
	Max xsdt.String `xml:"http://www.w3.org/2000/svg max,attr"`
}

// TxsdAnimTimingAttrsRestart defines TxsdAnimTimingAttrsRestart
type TxsdAnimTimingAttrsRestart xsdt.String

// IsAlways : Returns true if the value of this enumerated TxsdAnimTimingAttrsRestart is "always".
func (me TxsdAnimTimingAttrsRestart) IsAlways() bool { return me.String() == "always" }

// IsNever : Returns true if the value of this enumerated TxsdAnimTimingAttrsRestart is "never".
func (me TxsdAnimTimingAttrsRestart) IsNever() bool { return me.String() == "never" }

// IsWhenNotActive : Returns true if the value of this enumerated TxsdAnimTimingAttrsRestart is "whenNotActive".
func (me TxsdAnimTimingAttrsRestart) IsWhenNotActive() bool { return me.String() == "whenNotActive" }

// Set : Since TxsdAnimTimingAttrsRestart is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimTimingAttrsRestart) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdAnimTimingAttrsRestart is just a simple String type, this merely returns the current string value.
func (me TxsdAnimTimingAttrsRestart) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimTimingAttrsRestart's alias type xsdt.String.
func (me TxsdAnimTimingAttrsRestart) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrRestartTxsdAnimTimingAttrsRestartAlways defines attribute RestartTxsdAnimTimingAttrsRestartAlways
type XsdGoPkgHasAttrRestartTxsdAnimTimingAttrsRestartAlways struct {
	Restart TxsdAnimTimingAttrsRestart `xml:"http://www.w3.org/2000/svg restart,attr"`
}

// RestartDefault : Returns the default value for Restart -- "always"
func (me XsdGoPkgHasAttrRestartTxsdAnimTimingAttrsRestartAlways) RestartDefault() TxsdAnimTimingAttrsRestart {
	return TxsdAnimTimingAttrsRestart("always")
}

// XsdGoPkgHasAttrRepeatCountXsdtString defines attribute RepeatCountXsdtString
type XsdGoPkgHasAttrRepeatCountXsdtString struct {
	RepeatCount xsdt.String `xml:"http://www.w3.org/2000/svg repeatCount,attr"`
}

// XsdGoPkgHasAttrRepeatDurXsdtString defines attribute RepeatDurXsdtString
type XsdGoPkgHasAttrRepeatDurXsdtString struct {
	RepeatDur xsdt.String `xml:"http://www.w3.org/2000/svg repeatDur,attr"`
}

// XsdGoPkgHasAttrDurXsdtString defines attribute DurXsdtString
type XsdGoPkgHasAttrDurXsdtString struct {
	Dur xsdt.String `xml:"http://www.w3.org/2000/svg dur,attr"`
}

// XsdGoPkgHasAttrMinXsdtString defines attribute MinXsdtString
type XsdGoPkgHasAttrMinXsdtString struct {
	Min xsdt.String `xml:"http://www.w3.org/2000/svg min,attr"`
}

// TxsdAnimTimingAttrsFill defines TxsdAnimTimingAttrsFill
type TxsdAnimTimingAttrsFill xsdt.String

// IsRemove : Returns true if the value of this enumerated TxsdAnimTimingAttrsFill is "remove".
func (me TxsdAnimTimingAttrsFill) IsRemove() bool { return me.String() == "remove" }

// IsFreeze : Returns true if the value of this enumerated TxsdAnimTimingAttrsFill is "freeze".
func (me TxsdAnimTimingAttrsFill) IsFreeze() bool { return me.String() == "freeze" }

// Set : Since TxsdAnimTimingAttrsFill is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimTimingAttrsFill) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdAnimTimingAttrsFill is just a simple String type, this merely returns the current string value.
func (me TxsdAnimTimingAttrsFill) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimTimingAttrsFill's alias type xsdt.String.
func (me TxsdAnimTimingAttrsFill) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrFillTxsdAnimTimingAttrsFillRemove defines attribute FillTxsdAnimTimingAttrsFillRemove
type XsdGoPkgHasAttrFillTxsdAnimTimingAttrsFillRemove struct {
	Fill TxsdAnimTimingAttrsFill `xml:"http://www.w3.org/2000/svg fill,attr"`
}

// FillDefault : Returns the default value for Fill -- "remove"
func (me XsdGoPkgHasAttrFillTxsdAnimTimingAttrsFillRemove) FillDefault() TxsdAnimTimingAttrsFill {
	return TxsdAnimTimingAttrsFill("remove")
}

// XsdGoPkgHasAttsAnimTimingAttrs defines XsdGoPkgHasAttsAnimTimingAttrs
type XsdGoPkgHasAttsAnimTimingAttrs struct {
	XsdGoPkgHasAttrDurXsdtString

	XsdGoPkgHasAttrMinXsdtString

	XsdGoPkgHasAttrFillTxsdAnimTimingAttrsFillRemove

	XsdGoPkgHasAttrRepeatDurXsdtString

	XsdGoPkgHasAttrBeginXsdtString

	XsdGoPkgHasAttrEndXsdtString

	XsdGoPkgHasAttrMaxXsdtString

	XsdGoPkgHasAttrRestartTxsdAnimTimingAttrsRestartAlways

	XsdGoPkgHasAttrRepeatCountXsdtString
}

// XsdGoPkgHasAttrKeySplinesXsdtString defines attribute KeySplinesXsdtString
type XsdGoPkgHasAttrKeySplinesXsdtString struct {
	KeySplines xsdt.String `xml:"http://www.w3.org/2000/svg keySplines,attr"`
}

// XsdGoPkgHasAttrFromXsdtString defines attribute FromXsdtString
type XsdGoPkgHasAttrFromXsdtString struct {
	From xsdt.String `xml:"http://www.w3.org/2000/svg from,attr"`
}

// XsdGoPkgHasAttrToXsdtString defines attribute ToXsdtString
type XsdGoPkgHasAttrToXsdtString struct {
	To xsdt.String `xml:"http://www.w3.org/2000/svg to,attr"`
}

// XsdGoPkgHasAttrByXsdtString defines attribute ByXsdtString
type XsdGoPkgHasAttrByXsdtString struct {
	By xsdt.String `xml:"http://www.w3.org/2000/svg by,attr"`
}

// TxsdAnimValueAttrsCalcMode defines TxsdAnimValueAttrsCalcMode
type TxsdAnimValueAttrsCalcMode xsdt.String

// String : Since TxsdAnimValueAttrsCalcMode is just a simple String type, this merely returns the current string value.
func (me TxsdAnimValueAttrsCalcMode) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimValueAttrsCalcMode's alias type xsdt.String.
func (me TxsdAnimValueAttrsCalcMode) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsDiscrete : Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "discrete".
func (me TxsdAnimValueAttrsCalcMode) IsDiscrete() bool { return me.String() == "discrete" }

// IsLinear : Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "linear".
func (me TxsdAnimValueAttrsCalcMode) IsLinear() bool { return me.String() == "linear" }

// IsPaced : Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "paced".
func (me TxsdAnimValueAttrsCalcMode) IsPaced() bool { return me.String() == "paced" }

// IsSpline : Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "spline".
func (me TxsdAnimValueAttrsCalcMode) IsSpline() bool { return me.String() == "spline" }

// Set : Since TxsdAnimValueAttrsCalcMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimValueAttrsCalcMode) Set(s string) { (*xsdt.String)(me).Set(s) }

// XsdGoPkgHasAttrCalcModeTxsdAnimValueAttrsCalcModeLinear defines attribute CalcModeTxsdAnimValueAttrsCalcModeLinear
type XsdGoPkgHasAttrCalcModeTxsdAnimValueAttrsCalcModeLinear struct {
	CalcMode TxsdAnimValueAttrsCalcMode `xml:"http://www.w3.org/2000/svg calcMode,attr"`
}

// CalcModeDefault : Returns the default value for CalcMode -- "linear"
func (me XsdGoPkgHasAttrCalcModeTxsdAnimValueAttrsCalcModeLinear) CalcModeDefault() TxsdAnimValueAttrsCalcMode {
	return TxsdAnimValueAttrsCalcMode("linear")
}

// XsdGoPkgHasAttrValuesXsdtString defines attribute ValuesXsdtString
type XsdGoPkgHasAttrValuesXsdtString struct {
	Values xsdt.String `xml:"http://www.w3.org/2000/svg values,attr"`
}

// XsdGoPkgHasAttrKeyTimesXsdtString defines attribute KeyTimesXsdtString
type XsdGoPkgHasAttrKeyTimesXsdtString struct {
	KeyTimes xsdt.String `xml:"http://www.w3.org/2000/svg keyTimes,attr"`
}

// XsdGoPkgHasAttsAnimValueAttrs defines XsdGoPkgHasAttsAnimValueAttrs
type XsdGoPkgHasAttsAnimValueAttrs struct {
	XsdGoPkgHasAttrCalcModeTxsdAnimValueAttrsCalcModeLinear

	XsdGoPkgHasAttrValuesXsdtString

	XsdGoPkgHasAttrKeyTimesXsdtString

	XsdGoPkgHasAttrKeySplinesXsdtString

	XsdGoPkgHasAttrFromXsdtString

	XsdGoPkgHasAttrToXsdtString

	XsdGoPkgHasAttrByXsdtString
}

// TxsdAnimAdditionAttrsAccumulate defines TxsdAnimAdditionAttrsAccumulate
type TxsdAnimAdditionAttrsAccumulate xsdt.String

// IsSum : Returns true if the value of this enumerated TxsdAnimAdditionAttrsAccumulate is "sum".
func (me TxsdAnimAdditionAttrsAccumulate) IsSum() bool { return me.String() == "sum" }

// Set : Since TxsdAnimAdditionAttrsAccumulate is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimAdditionAttrsAccumulate) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdAnimAdditionAttrsAccumulate is just a simple String type, this merely returns the current string value.
func (me TxsdAnimAdditionAttrsAccumulate) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimAdditionAttrsAccumulate's alias type xsdt.String.
func (me TxsdAnimAdditionAttrsAccumulate) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsNone : Returns true if the value of this enumerated TxsdAnimAdditionAttrsAccumulate is "none".
func (me TxsdAnimAdditionAttrsAccumulate) IsNone() bool { return me.String() == "none" }

// XsdGoPkgHasAttrAccumulateTxsdAnimAdditionAttrsAccumulateNone defines attribute AccumulateTxsdAnimAdditionAttrsAccumulateNone
type XsdGoPkgHasAttrAccumulateTxsdAnimAdditionAttrsAccumulateNone struct {
	Accumulate TxsdAnimAdditionAttrsAccumulate `xml:"http://www.w3.org/2000/svg accumulate,attr"`
}

// AccumulateDefault : Returns the default value for Accumulate -- "none"
func (me XsdGoPkgHasAttrAccumulateTxsdAnimAdditionAttrsAccumulateNone) AccumulateDefault() TxsdAnimAdditionAttrsAccumulate {
	return TxsdAnimAdditionAttrsAccumulate("none")
}

// TxsdAnimAdditionAttrsAdditive defines TxsdAnimAdditionAttrsAdditive
type TxsdAnimAdditionAttrsAdditive xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimAdditionAttrsAdditive's alias type xsdt.String.
func (me TxsdAnimAdditionAttrsAdditive) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsReplace : Returns true if the value of this enumerated TxsdAnimAdditionAttrsAdditive is "replace".
func (me TxsdAnimAdditionAttrsAdditive) IsReplace() bool { return me.String() == "replace" }

// IsSum : Returns true if the value of this enumerated TxsdAnimAdditionAttrsAdditive is "sum".
func (me TxsdAnimAdditionAttrsAdditive) IsSum() bool { return me.String() == "sum" }

// Set : Since TxsdAnimAdditionAttrsAdditive is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimAdditionAttrsAdditive) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdAnimAdditionAttrsAdditive is just a simple String type, this merely returns the current string value.
func (me TxsdAnimAdditionAttrsAdditive) String() string { return xsdt.String(me).String() }

// XsdGoPkgHasAttrAdditiveTxsdAnimAdditionAttrsAdditiveReplace defines attribute AdditiveTxsdAnimAdditionAttrsAdditiveReplace
type XsdGoPkgHasAttrAdditiveTxsdAnimAdditionAttrsAdditiveReplace struct {
	Additive TxsdAnimAdditionAttrsAdditive `xml:"http://www.w3.org/2000/svg additive,attr"`
}

// AdditiveDefault : Returns the default value for Additive -- "replace"
func (me XsdGoPkgHasAttrAdditiveTxsdAnimAdditionAttrsAdditiveReplace) AdditiveDefault() TxsdAnimAdditionAttrsAdditive {
	return TxsdAnimAdditionAttrsAdditive("replace")
}

// XsdGoPkgHasAttsAnimAdditionAttrs defines XsdGoPkgHasAttsAnimAdditionAttrs
type XsdGoPkgHasAttsAnimAdditionAttrs struct {
	XsdGoPkgHasAttrAdditiveTxsdAnimAdditionAttrsAdditiveReplace

	XsdGoPkgHasAttrAccumulateTxsdAnimAdditionAttrsAccumulateNone
}

// TClassListType Space-separated list of classes
type TClassListType xsdt.String

// Set : Since TClassListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClassListType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TClassListType is just a simple String type, this merely returns the current string value.
func (me TClassListType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TClassListType's alias type xsdt.String.
func (me TClassListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Values : TClassListType declares a String containing a whitespace-separated list of xsdt.String values. This Values() method creates and returns a slice of all elements in that list.
func (me TClassListType) Values() (list []xsdt.String) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.String, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

// XsdGoPkgHasAttrClassTClassListType defines attribute ClassTClassListType
type XsdGoPkgHasAttrClassTClassListType struct {
	Class TClassListType `xml:"http://www.w3.org/2000/svg class,attr"`
}

// TStyleSheetType style sheet data
type TStyleSheetType xsdt.String

// Set : Since TStyleSheetType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStyleSheetType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TStyleSheetType is just a simple String type, this merely returns the current string value.
func (me TStyleSheetType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TStyleSheetType's alias type xsdt.String.
func (me TStyleSheetType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrStyleTStyleSheetType defines attribute StyleTStyleSheetType
type XsdGoPkgHasAttrStyleTStyleSheetType struct {
	Style TStyleSheetType `xml:"http://www.w3.org/2000/svg style,attr"`
}

// XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean defines attribute ExternalResourcesRequiredXsdtBoolean
type XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean struct {
	ExternalResourcesRequired xsdt.Boolean `xml:"http://www.w3.org/2000/svg externalResourcesRequired,attr"`
}

// XsdGoPkgHasAttrContentXsdtStringStructuredText A bit simpler than the DTD, but see commented-out alternative
type XsdGoPkgHasAttrContentXsdtStringStructuredText struct {
	Content xsdt.String `xml:"http://www.w3.org/2000/svg content,attr"`
}

// ContentFixed : Returns the fixed value for Content -- "structured text"
func (me XsdGoPkgHasAttrContentXsdtStringStructuredText) ContentFixed() xsdt.String {
	return xsdt.String("structured text")
}

// XsdGoPkgHasCdata defines type CDATA
type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TdescType defines TdescType
type TdescType struct {
	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrContentXsdtStringStructuredText

	XsdGoPkgHasCdata

	XsdGoPkgHasAttsStdAttrs
}

// Walk : if the WalkHandlers.TdescType function is not nil (ie. was set by outside code), calls it with this TdescType instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TdescType instance.
func (me *TdescType) Walk() (err error) {
	if fn := WalkHandlers.TdescType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType defines XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType
type XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType struct {
	Desc *TdescType `xml:"http://www.w3.org/2000/svg desc"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType instance.
func (me *XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TtitleType defines TtitleType
type TtitleType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrContentXsdtStringStructuredText

	XsdGoPkgHasAttrClassTClassListType
}

// Walk : if the WalkHandlers.TtitleType function is not nil (ie. was set by outside code), calls it with this TtitleType instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TtitleType instance.
func (me *TtitleType) Walk() (err error) {
	if fn := WalkHandlers.TtitleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType defines XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType
type XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType struct {
	Title *TtitleType `xml:"http://www.w3.org/2000/svg title"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType instance.
func (me *XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TmetadataType defines TmetadataType
type TmetadataType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttsStdAttrs
}

// Walk : if the WalkHandlers.TmetadataType function is not nil (ie. was set by outside code), calls it with this TmetadataType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmetadataType instance.
func (me *TmetadataType) Walk() (err error) {
	if fn := WalkHandlers.TmetadataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType defines XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType
type XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType struct {
	Metadata *TmetadataType `xml:"http://www.w3.org/2000/svg metadata"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType instance.
func (me *XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Metadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasGroupDescTitleMetadata defines XsdGoPkgHasGroupDescTitleMetadata
type XsdGoPkgHasGroupDescTitleMetadata struct {
	XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType

	XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType

	XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType
}

// Walk : if the WalkHandlers.XsdGoPkgHasGroupDescTitleMetadata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroupDescTitleMetadata instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroupDescTitleMetadata instance.
func (me *XsdGoPkgHasGroupDescTitleMetadata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroupDescTitleMetadata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TsetType defines TsetType
type TsetType struct {
	XsdGoPkgHasAttsAnimationEvents

	XsdGoPkgHasAttsAnimTargetAttrs

	XsdGoPkgHasAttsAnimTimingAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrToXsdtString

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsTestAttrs
}

// Walk : if the WalkHandlers.TsetType function is not nil (ie. was set by outside code), calls it with this TsetType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TsetType instance.
func (me *TsetType) Walk() (err error) {
	if fn := WalkHandlers.TsetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSet defines XsdGoPkgHasElemsSet
type XsdGoPkgHasElemsSet struct {
	Sets []*TsetType `xml:"http://www.w3.org/2000/svg set"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSet instance.
func (me *XsdGoPkgHasElemsSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TransformListType Yes, of course this was generated by a program!
// list of transforms
type TransformListType xsdt.String

// Set : Since TransformListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TransformListType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TransformListType is just a simple String type, this merely returns the current string value.
func (me TransformListType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TransformListType's alias type xsdt.String.
func (me TransformListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrTransformTransformListType defines attribute TransformTransformListType
type XsdGoPkgHasAttrTransformTransformListType struct {
	Transform TransformListType `xml:"http://www.w3.org/2000/svg transform,attr"`
}

// TanimateColorType defines TanimateColorType
type TanimateColorType struct {
	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsAnimTargetAttrs

	XsdGoPkgHasAttsAnimTimingAttrs

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttsAnimationEvents

	XsdGoPkgHasAttsAnimValueAttrs

	XsdGoPkgHasAttsAnimAdditionAttrs
}

// Walk : if the WalkHandlers.TanimateColorType function is not nil (ie. was set by outside code), calls it with this TanimateColorType instance as the single argument. Then calls the Walk() method on 1/9 embed(s) and 0/0 field(s) belonging to this TanimateColorType instance.
func (me *TanimateColorType) Walk() (err error) {
	if fn := WalkHandlers.TanimateColorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAnimateColor defines XsdGoPkgHasElemsAnimateColor
type XsdGoPkgHasElemsAnimateColor struct {
	AnimateColors []*TanimateColorType `xml:"http://www.w3.org/2000/svg animateColor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAnimateColor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAnimateColor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAnimateColor instance.
func (me *XsdGoPkgHasElemsAnimateColor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAnimateColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimateColors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdAnimateTransformTypeType defines TxsdAnimateTransformTypeType
type TxsdAnimateTransformTypeType xsdt.String

// IsSkewY : Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "skewY".
func (me TxsdAnimateTransformTypeType) IsSkewY() bool { return me.String() == "skewY" }

// Set : Since TxsdAnimateTransformTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimateTransformTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdAnimateTransformTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdAnimateTransformTypeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimateTransformTypeType's alias type xsdt.String.
func (me TxsdAnimateTransformTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsTranslate : Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "translate".
func (me TxsdAnimateTransformTypeType) IsTranslate() bool { return me.String() == "translate" }

// IsScale : Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "scale".
func (me TxsdAnimateTransformTypeType) IsScale() bool { return me.String() == "scale" }

// IsRotate : Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "rotate".
func (me TxsdAnimateTransformTypeType) IsRotate() bool { return me.String() == "rotate" }

// IsSkewX : Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "skewX".
func (me TxsdAnimateTransformTypeType) IsSkewX() bool { return me.String() == "skewX" }

// XsdGoPkgHasAttrTypeTxsdAnimateTransformTypeTypeTranslate defines attribute TypeTxsdAnimateTransformTypeTypeTranslate
type XsdGoPkgHasAttrTypeTxsdAnimateTransformTypeTypeTranslate struct {
	Type TxsdAnimateTransformTypeType `xml:"http://www.w3.org/2000/svg type,attr"`
}

// TypeDefault : Returns the default value for Type -- "translate"
func (me XsdGoPkgHasAttrTypeTxsdAnimateTransformTypeTypeTranslate) TypeDefault() TxsdAnimateTransformTypeType {
	return TxsdAnimateTransformTypeType("translate")
}

// TanimateTransformType defines TanimateTransformType
type TanimateTransformType struct {
	XsdGoPkgHasAttsAnimTargetAttrs

	XsdGoPkgHasAttsAnimTimingAttrs

	XsdGoPkgHasAttsAnimAdditionAttrs

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsAnimationEvents

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrTypeTxsdAnimateTransformTypeTypeTranslate

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttsAnimValueAttrs
}

// Walk : if the WalkHandlers.TanimateTransformType function is not nil (ie. was set by outside code), calls it with this TanimateTransformType instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TanimateTransformType instance.
func (me *TanimateTransformType) Walk() (err error) {
	if fn := WalkHandlers.TanimateTransformType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAnimateTransform defines XsdGoPkgHasElemsAnimateTransform
type XsdGoPkgHasElemsAnimateTransform struct {
	AnimateTransforms []*TanimateTransformType `xml:"http://www.w3.org/2000/svg animateTransform"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAnimateTransform function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAnimateTransform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAnimateTransform instance.
func (me *XsdGoPkgHasElemsAnimateTransform) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAnimateTransform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimateTransforms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrRotateXsdtString defines attribute RotateXsdtString
type XsdGoPkgHasAttrRotateXsdtString struct {
	Rotate xsdt.String `xml:"http://www.w3.org/2000/svg rotate,attr"`
}

// XsdGoPkgHasAttrOriginXsdtString defines attribute OriginXsdtString
type XsdGoPkgHasAttrOriginXsdtString struct {
	Origin xsdt.String `xml:"http://www.w3.org/2000/svg origin,attr"`
}

// XsdGoPkgHasAttrPathXsdtString defines attribute PathXsdtString
type XsdGoPkgHasAttrPathXsdtString struct {
	Path xsdt.String `xml:"http://www.w3.org/2000/svg path,attr"`
}

// TmpathType defines TmpathType
type TmpathType struct {
	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsXlinkRefAttrs
}

// Walk : if the WalkHandlers.TmpathType function is not nil (ie. was set by outside code), calls it with this TmpathType instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TmpathType instance.
func (me *TmpathType) Walk() (err error) {
	if fn := WalkHandlers.TmpathType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemMpath defines XsdGoPkgHasElemMpath
type XsdGoPkgHasElemMpath struct {
	Mpath *TmpathType `xml:"http://www.w3.org/2000/svg mpath"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemMpath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemMpath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemMpath instance.
func (me *XsdGoPkgHasElemMpath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemMpath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mpath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrKeyPointsXsdtString defines attribute KeyPointsXsdtString
type XsdGoPkgHasAttrKeyPointsXsdtString struct {
	KeyPoints xsdt.String `xml:"http://www.w3.org/2000/svg keyPoints,attr"`
}

// TanimateMotionType defines TanimateMotionType
type TanimateMotionType struct {
	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttsAnimElementAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttsAnimValueAttrs

	XsdGoPkgHasAttsAnimAdditionAttrs

	XsdGoPkgHasElemMpath

	XsdGoPkgHasAttsAnimationEvents

	XsdGoPkgHasAttsAnimTimingAttrs

	XsdGoPkgHasAttrKeyPointsXsdtString

	XsdGoPkgHasAttrRotateXsdtString

	XsdGoPkgHasAttrOriginXsdtString

	XsdGoPkgHasAttrPathXsdtString

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsStdAttrs
}

// Walk : if the WalkHandlers.TanimateMotionType function is not nil (ie. was set by outside code), calls it with this TanimateMotionType instance as the single argument. Then calls the Walk() method on 2/14 embed(s) and 0/0 field(s) belonging to this TanimateMotionType instance.
func (me *TanimateMotionType) Walk() (err error) {
	if fn := WalkHandlers.TanimateMotionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemMpath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAnimateMotion defines XsdGoPkgHasElemsAnimateMotion
type XsdGoPkgHasElemsAnimateMotion struct {
	AnimateMotions []*TanimateMotionType `xml:"http://www.w3.org/2000/svg animateMotion"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAnimateMotion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAnimateMotion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAnimateMotion instance.
func (me *XsdGoPkgHasElemsAnimateMotion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAnimateMotion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimateMotions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrCxTCoordinateType defines attribute CxTCoordinateType
type XsdGoPkgHasAttrCxTCoordinateType struct {
	Cx TCoordinateType `xml:"http://www.w3.org/2000/svg cx,attr"`
}

// XsdGoPkgHasAttrCyTCoordinateType defines attribute CyTCoordinateType
type XsdGoPkgHasAttrCyTCoordinateType struct {
	Cy TCoordinateType `xml:"http://www.w3.org/2000/svg cy,attr"`
}

// XsdGoPkgHasAttrRTLengthType defines attribute RTLengthType
type XsdGoPkgHasAttrRTLengthType struct {
	R TLengthType `xml:"http://www.w3.org/2000/svg r,attr"`
}

// TanimateType defines TanimateType
type TanimateType struct {
	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsAnimAdditionAttrs

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttsAnimTargetAttrs

	XsdGoPkgHasAttsAnimTimingAttrs

	XsdGoPkgHasAttsAnimValueAttrs

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsAnimationEvents
}

// Walk : if the WalkHandlers.TanimateType function is not nil (ie. was set by outside code), calls it with this TanimateType instance as the single argument. Then calls the Walk() method on 1/9 embed(s) and 0/0 field(s) belonging to this TanimateType instance.
func (me *TanimateType) Walk() (err error) {
	if fn := WalkHandlers.TanimateType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAnimate defines XsdGoPkgHasElemsAnimate
type XsdGoPkgHasElemsAnimate struct {
	Animates []*TanimateType `xml:"http://www.w3.org/2000/svg animate"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAnimate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAnimate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAnimate instance.
func (me *XsdGoPkgHasElemsAnimate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAnimate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Animates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TcircleType defines TcircleType
type TcircleType struct {
	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrCxTCoordinateType

	XsdGoPkgHasAttrCyTCoordinateType

	XsdGoPkgHasAttrRTLengthType

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsPresentationAttributesFillStroke
}

// Walk : if the WalkHandlers.TcircleType function is not nil (ie. was set by outside code), calls it with this TcircleType instance as the single argument. Then calls the Walk() method on 6/20 embed(s) and 0/0 field(s) belonging to this TcircleType instance.
func (me *TcircleType) Walk() (err error) {
	if fn := WalkHandlers.TcircleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsCircle defines XsdGoPkgHasElemsCircle
type XsdGoPkgHasElemsCircle struct {
	Circles []*TcircleType `xml:"http://www.w3.org/2000/svg circle"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsCircle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsCircle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsCircle instance.
func (me *XsdGoPkgHasElemsCircle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsCircle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Circles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrLocalXsdtString defines attribute LocalXsdtString
type XsdGoPkgHasAttrLocalXsdtString struct {
	Local xsdt.String `xml:"http://www.w3.org/2000/svg local,attr"`
}

// XsdGoPkgHasAttrNameXsdtString defines attribute NameXsdtString
type XsdGoPkgHasAttrNameXsdtString struct {
	Name xsdt.String `xml:"http://www.w3.org/2000/svg name,attr"`
}

// TxsdColorProfileTypeRenderingIntent defines TxsdColorProfileTypeRenderingIntent
type TxsdColorProfileTypeRenderingIntent xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdColorProfileTypeRenderingIntent's alias type xsdt.String.
func (me TxsdColorProfileTypeRenderingIntent) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsAuto : Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "auto".
func (me TxsdColorProfileTypeRenderingIntent) IsAuto() bool { return me.String() == "auto" }

// IsPerceptual : Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "perceptual".
func (me TxsdColorProfileTypeRenderingIntent) IsPerceptual() bool { return me.String() == "perceptual" }

// IsRelativeColorimetric : Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "relative-colorimetric".
func (me TxsdColorProfileTypeRenderingIntent) IsRelativeColorimetric() bool {
	return me.String() == "relative-colorimetric"
}

// IsSaturation : Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "saturation".
func (me TxsdColorProfileTypeRenderingIntent) IsSaturation() bool { return me.String() == "saturation" }

// IsAbsoluteColorimetric : Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "absolute-colorimetric".
func (me TxsdColorProfileTypeRenderingIntent) IsAbsoluteColorimetric() bool {
	return me.String() == "absolute-colorimetric"
}

// Set : Since TxsdColorProfileTypeRenderingIntent is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdColorProfileTypeRenderingIntent) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdColorProfileTypeRenderingIntent is just a simple String type, this merely returns the current string value.
func (me TxsdColorProfileTypeRenderingIntent) String() string { return xsdt.String(me).String() }

// XsdGoPkgHasAttrRenderingIntentTxsdColorProfileTypeRenderingIntentAuto defines attribute RenderingIntentTxsdColorProfileTypeRenderingIntentAuto
type XsdGoPkgHasAttrRenderingIntentTxsdColorProfileTypeRenderingIntentAuto struct {
	RenderingIntent TxsdColorProfileTypeRenderingIntent `xml:"http://www.w3.org/2000/svg rendering-intent,attr"`
}

// RenderingIntentDefault : Returns the default value for RenderingIntent -- "auto"
func (me XsdGoPkgHasAttrRenderingIntentTxsdColorProfileTypeRenderingIntentAuto) RenderingIntentDefault() TxsdColorProfileTypeRenderingIntent {
	return TxsdColorProfileTypeRenderingIntent("auto")
}

// TcolorProfileType defines TcolorProfileType
type TcolorProfileType struct {
	XsdGoPkgHasAttsXlinkRefAttrs

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttrLocalXsdtString

	XsdGoPkgHasAttrNameXsdtString

	XsdGoPkgHasAttrRenderingIntentTxsdColorProfileTypeRenderingIntentAuto

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsStdAttrs
}

// Walk : if the WalkHandlers.TcolorProfileType function is not nil (ie. was set by outside code), calls it with this TcolorProfileType instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TcolorProfileType instance.
func (me *TcolorProfileType) Walk() (err error) {
	if fn := WalkHandlers.TcolorProfileType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsColorProfile defines XsdGoPkgHasElemsColorProfile
type XsdGoPkgHasElemsColorProfile struct {
	ColorProfiles []*TcolorProfileType `xml:"http://www.w3.org/2000/svg color-profile"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsColorProfile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsColorProfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsColorProfile instance.
func (me *XsdGoPkgHasElemsColorProfile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsColorProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ColorProfiles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TViewBoxSpecType 'viewBox' attribute specification
type TViewBoxSpecType xsdt.String

// Set : Since TViewBoxSpecType is just a simple String type, this merely sets the current value from the specified string.
func (me *TViewBoxSpecType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TViewBoxSpecType is just a simple String type, this merely returns the current string value.
func (me TViewBoxSpecType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TViewBoxSpecType's alias type xsdt.String.
func (me TViewBoxSpecType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrViewBoxTViewBoxSpecType defines attribute ViewBoxTViewBoxSpecType
type XsdGoPkgHasAttrViewBoxTViewBoxSpecType struct {
	ViewBox TViewBoxSpecType `xml:"http://www.w3.org/2000/svg viewBox,attr"`
}

// XsdGoPkgHasAttrRyTLengthType defines attribute RyTLengthType
type XsdGoPkgHasAttrRyTLengthType struct {
	Ry TLengthType `xml:"http://www.w3.org/2000/svg ry,attr"`
}

// XsdGoPkgHasAttrRxTLengthType defines attribute RxTLengthType
type XsdGoPkgHasAttrRxTLengthType struct {
	Rx TLengthType `xml:"http://www.w3.org/2000/svg rx,attr"`
}

// TrectType defines TrectType
type TrectType struct {
	XsdGoPkgHasAttrYTCoordinateType

	XsdGoPkgHasAttrWidthTLengthType

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttrXTCoordinateType

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrHeightTLengthType

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrRxTLengthType

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttrRyTLengthType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean
}

// Walk : if the WalkHandlers.TrectType function is not nil (ie. was set by outside code), calls it with this TrectType instance as the single argument. Then calls the Walk() method on 6/23 embed(s) and 0/0 field(s) belonging to this TrectType instance.
func (me *TrectType) Walk() (err error) {
	if fn := WalkHandlers.TrectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRect defines XsdGoPkgHasElemsRect
type XsdGoPkgHasElemsRect struct {
	Rects []*TrectType `xml:"http://www.w3.org/2000/svg rect"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRect instance.
func (me *XsdGoPkgHasElemsRect) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Rects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TPointsType a list of points
type TPointsType xsdt.String

// Set : Since TPointsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPointsType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TPointsType is just a simple String type, this merely returns the current string value.
func (me TPointsType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TPointsType's alias type xsdt.String.
func (me TPointsType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrPointsTPointsType defines attribute PointsTPointsType
type XsdGoPkgHasAttrPointsTPointsType struct {
	Points TPointsType `xml:"http://www.w3.org/2000/svg points,attr"`
}

// TpolygonType defines TpolygonType
type TpolygonType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttrPointsTPointsType

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsPresentationAttributesMarkers

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrStyleTStyleSheetType
}

// Walk : if the WalkHandlers.TpolygonType function is not nil (ie. was set by outside code), calls it with this TpolygonType instance as the single argument. Then calls the Walk() method on 6/19 embed(s) and 0/0 field(s) belonging to this TpolygonType instance.
func (me *TpolygonType) Walk() (err error) {
	if fn := WalkHandlers.TpolygonType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPolygon defines XsdGoPkgHasElemsPolygon
type XsdGoPkgHasElemsPolygon struct {
	Polygons []*TpolygonType `xml:"http://www.w3.org/2000/svg polygon"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPolygon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPolygon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPolygon instance.
func (me *XsdGoPkgHasElemsPolygon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPolygon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Polygons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TimageType defines TimageType
type TimageType struct {
	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttsPresentationAttributesViewports

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrHeightTLengthType

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsLangSpaceAttrs

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrXTCoordinateType

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasAttrWidthTLengthType

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttrYTCoordinateType
}

// Walk : if the WalkHandlers.TimageType function is not nil (ie. was set by outside code), calls it with this TimageType instance as the single argument. Then calls the Walk() method on 6/23 embed(s) and 0/0 field(s) belonging to this TimageType instance.
func (me *TimageType) Walk() (err error) {
	if fn := WalkHandlers.TimageType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsImage defines XsdGoPkgHasElemsImage
type XsdGoPkgHasElemsImage struct {
	Images []*TimageType `xml:"http://www.w3.org/2000/svg image"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsImage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsImage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsImage instance.
func (me *XsdGoPkgHasElemsImage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Images {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrPathLengthXsdtDouble defines attribute PathLengthXsdtDouble
type XsdGoPkgHasAttrPathLengthXsdtDouble struct {
	PathLength xsdt.Double `xml:"http://www.w3.org/2000/svg pathLength,attr"`
}

// TPathDataType a path data specification
// Yes, of course this was generated by a program!
type TPathDataType xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TPathDataType's alias type xsdt.String.
func (me TPathDataType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TPathDataType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPathDataType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TPathDataType is just a simple String type, this merely returns the current string value.
func (me TPathDataType) String() string { return xsdt.String(me).String() }

// XsdGoPkgHasAttrDTPathDataType defines attribute DTPathDataType
type XsdGoPkgHasAttrDTPathDataType struct {
	D TPathDataType `xml:"http://www.w3.org/2000/svg d,attr"`
}

// TpathType defines TpathType
type TpathType struct {
	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttsPresentationAttributesMarkers

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttrDTPathDataType

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrPathLengthXsdtDouble

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsLangSpaceAttrs
}

// Walk : if the WalkHandlers.TpathType function is not nil (ie. was set by outside code), calls it with this TpathType instance as the single argument. Then calls the Walk() method on 6/20 embed(s) and 0/0 field(s) belonging to this TpathType instance.
func (me *TpathType) Walk() (err error) {
	if fn := WalkHandlers.TpathType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPath defines XsdGoPkgHasElemsPath
type XsdGoPkgHasElemsPath struct {
	Paths []*TpathType `xml:"http://www.w3.org/2000/svg path"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPath instance.
func (me *XsdGoPkgHasElemsPath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Paths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TellipseType defines TellipseType
type TellipseType struct {
	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttrCyTCoordinateType

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrRxTLengthType

	XsdGoPkgHasAttrRyTLengthType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttrCxTCoordinateType

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttsPresentationAttributesGraphics
}

// Walk : if the WalkHandlers.TellipseType function is not nil (ie. was set by outside code), calls it with this TellipseType instance as the single argument. Then calls the Walk() method on 6/21 embed(s) and 0/0 field(s) belonging to this TellipseType instance.
func (me *TellipseType) Walk() (err error) {
	if fn := WalkHandlers.TellipseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEllipse defines XsdGoPkgHasElemsEllipse
type XsdGoPkgHasElemsEllipse struct {
	Ellipses []*TellipseType `xml:"http://www.w3.org/2000/svg ellipse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEllipse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEllipse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEllipse instance.
func (me *XsdGoPkgHasElemsEllipse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEllipse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ellipses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TpolylineType defines TpolylineType
type TpolylineType struct {
	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrPointsTPointsType

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasAttsPresentationAttributesMarkers

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsLangSpaceAttrs
}

// Walk : if the WalkHandlers.TpolylineType function is not nil (ie. was set by outside code), calls it with this TpolylineType instance as the single argument. Then calls the Walk() method on 6/19 embed(s) and 0/0 field(s) belonging to this TpolylineType instance.
func (me *TpolylineType) Walk() (err error) {
	if fn := WalkHandlers.TpolylineType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPolyline defines XsdGoPkgHasElemsPolyline
type XsdGoPkgHasElemsPolyline struct {
	Polylines []*TpolylineType `xml:"http://www.w3.org/2000/svg polyline"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPolyline function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPolyline instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPolyline instance.
func (me *XsdGoPkgHasElemsPolyline) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPolyline; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Polylines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdClipPathTypeClipPathUnits defines TxsdClipPathTypeClipPathUnits
type TxsdClipPathTypeClipPathUnits xsdt.String

// Set : Since TxsdClipPathTypeClipPathUnits is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdClipPathTypeClipPathUnits) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdClipPathTypeClipPathUnits is just a simple String type, this merely returns the current string value.
func (me TxsdClipPathTypeClipPathUnits) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdClipPathTypeClipPathUnits's alias type xsdt.String.
func (me TxsdClipPathTypeClipPathUnits) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsUserSpaceOnUse : Returns true if the value of this enumerated TxsdClipPathTypeClipPathUnits is "userSpaceOnUse".
func (me TxsdClipPathTypeClipPathUnits) IsUserSpaceOnUse() bool {
	return me.String() == "userSpaceOnUse"
}

// IsUserSpace : Returns true if the value of this enumerated TxsdClipPathTypeClipPathUnits is "userSpace".
func (me TxsdClipPathTypeClipPathUnits) IsUserSpace() bool { return me.String() == "userSpace" }

// IsObjectBoundingBox : Returns true if the value of this enumerated TxsdClipPathTypeClipPathUnits is "objectBoundingBox".
func (me TxsdClipPathTypeClipPathUnits) IsObjectBoundingBox() bool {
	return me.String() == "objectBoundingBox"
}

// XsdGoPkgHasAttrClipPathUnitsTxsdClipPathTypeClipPathUnits defines attribute ClipPathUnitsTxsdClipPathTypeClipPathUnits
type XsdGoPkgHasAttrClipPathUnitsTxsdClipPathTypeClipPathUnits struct {
	ClipPathUnits TxsdClipPathTypeClipPathUnits `xml:"http://www.w3.org/2000/svg clipPathUnits,attr"`
}

// XsdGoPkgHasElemsDesc defines XsdGoPkgHasElemsDesc
type XsdGoPkgHasElemsDesc struct {
	Descs []*TdescType `xml:"http://www.w3.org/2000/svg desc"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsDesc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsDesc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsDesc instance.
func (me *XsdGoPkgHasElemsDesc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsDesc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Descs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTitle defines XsdGoPkgHasElemsTitle
type XsdGoPkgHasElemsTitle struct {
	Titles []*TtitleType `xml:"http://www.w3.org/2000/svg title"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTitle instance.
func (me *XsdGoPkgHasElemsTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Titles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdTspanTypeLengthAdjust defines TxsdTspanTypeLengthAdjust
type TxsdTspanTypeLengthAdjust xsdt.String

// Set : Since TxsdTspanTypeLengthAdjust is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTspanTypeLengthAdjust) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdTspanTypeLengthAdjust is just a simple String type, this merely returns the current string value.
func (me TxsdTspanTypeLengthAdjust) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdTspanTypeLengthAdjust's alias type xsdt.String.
func (me TxsdTspanTypeLengthAdjust) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsSpacing : Returns true if the value of this enumerated TxsdTspanTypeLengthAdjust is "spacing".
func (me TxsdTspanTypeLengthAdjust) IsSpacing() bool { return me.String() == "spacing" }

// IsSpacingAndGlyphs : Returns true if the value of this enumerated TxsdTspanTypeLengthAdjust is "spacingAndGlyphs".
func (me TxsdTspanTypeLengthAdjust) IsSpacingAndGlyphs() bool {
	return me.String() == "spacingAndGlyphs"
}

// XsdGoPkgHasAttrLengthAdjustTxsdTspanTypeLengthAdjust defines attribute LengthAdjustTxsdTspanTypeLengthAdjust
type XsdGoPkgHasAttrLengthAdjustTxsdTspanTypeLengthAdjust struct {
	LengthAdjust TxsdTspanTypeLengthAdjust `xml:"http://www.w3.org/2000/svg lengthAdjust,attr"`
}

// TCoordinatesType a space separated list of CoordinateType. Punt to 'string' for now
type TCoordinatesType xsdt.String

// Set : Since TCoordinatesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCoordinatesType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TCoordinatesType is just a simple String type, this merely returns the current string value.
func (me TCoordinatesType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TCoordinatesType's alias type xsdt.String.
func (me TCoordinatesType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrYTCoordinatesType defines attribute YTCoordinatesType
type XsdGoPkgHasAttrYTCoordinatesType struct {
	Y TCoordinatesType `xml:"http://www.w3.org/2000/svg y,attr"`
}

// TLengthsType a list of <length>s
type TLengthsType xsdt.String

// Set : Since TLengthsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLengthsType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TLengthsType is just a simple String type, this merely returns the current string value.
func (me TLengthsType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TLengthsType's alias type xsdt.String.
func (me TLengthsType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrDxTLengthsType defines attribute DxTLengthsType
type XsdGoPkgHasAttrDxTLengthsType struct {
	Dx TLengthsType `xml:"http://www.w3.org/2000/svg dx,attr"`
}

// XsdGoPkgHasAttrTextLengthTLengthType defines attribute TextLengthTLengthType
type XsdGoPkgHasAttrTextLengthTLengthType struct {
	TextLength TLengthType `xml:"http://www.w3.org/2000/svg textLength,attr"`
}

// XsdGoPkgHasAttrXTCoordinatesType defines attribute XTCoordinatesType
type XsdGoPkgHasAttrXTCoordinatesType struct {
	X TCoordinatesType `xml:"http://www.w3.org/2000/svg x,attr"`
}

// XsdGoPkgHasElemsMetadata defines XsdGoPkgHasElemsMetadata
type XsdGoPkgHasElemsMetadata struct {
	Metadatas []*TmetadataType `xml:"http://www.w3.org/2000/svg metadata"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsMetadata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsMetadata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsMetadata instance.
func (me *XsdGoPkgHasElemsMetadata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsMetadata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Metadatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrLengthAdjustTxsdTrefTypeLengthAdjust defines attribute LengthAdjustTxsdTrefTypeLengthAdjust
type XsdGoPkgHasAttrLengthAdjustTxsdTrefTypeLengthAdjust struct {
	LengthAdjust TxsdTspanTypeLengthAdjust `xml:"http://www.w3.org/2000/svg lengthAdjust,attr"`
}

// XsdGoPkgHasAttrDyTLengthsType defines attribute DyTLengthsType
type XsdGoPkgHasAttrDyTLengthsType struct {
	Dy TLengthsType `xml:"http://www.w3.org/2000/svg dy,attr"`
}

// TtrefType defines TtrefType
type TtrefType struct {
	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasAttsPresentationAttributesFontSpecification

	XsdGoPkgHasAttsPresentationAttributesTextContentElements

	XsdGoPkgHasAttrXTCoordinatesType

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttrClassTClassListType

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrLengthAdjustTxsdTrefTypeLengthAdjust

	XsdGoPkgHasAttrDyTLengthsType

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrYTCoordinatesType

	XsdGoPkgHasAttrDxTLengthsType

	XsdGoPkgHasAttrRotateXsdtString

	XsdGoPkgHasAttrTextLengthTLengthType

	XsdGoPkgHasAttsGraphicsElementEvents
}

// Walk : if the WalkHandlers.TtrefType function is not nil (ie. was set by outside code), calls it with this TtrefType instance as the single argument. Then calls the Walk() method on 6/27 embed(s) and 0/0 field(s) belonging to this TtrefType instance.
func (me *TtrefType) Walk() (err error) {
	if fn := WalkHandlers.TtrefType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTref defines XsdGoPkgHasElemsTref
type XsdGoPkgHasElemsTref struct {
	Trefs []*TtrefType `xml:"http://www.w3.org/2000/svg tref"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTref instance.
func (me *XsdGoPkgHasElemsTref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Trefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSvg defines XsdGoPkgHasElemsSvg
type XsdGoPkgHasElemsSvg struct {
	Svgs []*TsvgType `xml:"http://www.w3.org/2000/svg svg"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSvg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSvg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSvg instance.
func (me *XsdGoPkgHasElemsSvg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSvg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TContentTypeType media type, as per [RFC2045]
// media type, as per [RFC2045]
type TContentTypeType xsdt.String

// Set : Since TContentTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TContentTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TContentTypeType is just a simple String type, this merely returns the current string value.
func (me TContentTypeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TContentTypeType's alias type xsdt.String.
func (me TContentTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrTypeTContentTypeType defines attribute TypeTContentTypeType
type XsdGoPkgHasAttrTypeTContentTypeType struct {
	Type TContentTypeType `xml:"http://www.w3.org/2000/svg type,attr"`
}

// TscriptType defines TscriptType
type TscriptType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsXlinkRefAttrs

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrTypeTContentTypeType
}

// Walk : if the WalkHandlers.TscriptType function is not nil (ie. was set by outside code), calls it with this TscriptType instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TscriptType instance.
func (me *TscriptType) Walk() (err error) {
	if fn := WalkHandlers.TscriptType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsScript defines XsdGoPkgHasElemsScript
type XsdGoPkgHasElemsScript struct {
	Scripts []*TscriptType `xml:"http://www.w3.org/2000/svg script"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsScript function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsScript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsScript instance.
func (me *XsdGoPkgHasElemsScript) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsScript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Scripts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TuseType defines TuseType
type TuseType struct {
	XsdGoPkgHasAttrWidthTLengthType

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttrHeightTLengthType

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrStyleTStyleSheetType

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttrXTCoordinateType

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttrYTCoordinateType
}

// Walk : if the WalkHandlers.TuseType function is not nil (ie. was set by outside code), calls it with this TuseType instance as the single argument. Then calls the Walk() method on 6/21 embed(s) and 0/0 field(s) belonging to this TuseType instance.
func (me *TuseType) Walk() (err error) {
	if fn := WalkHandlers.TuseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsUse defines XsdGoPkgHasElemsUse
type XsdGoPkgHasElemsUse struct {
	Uses []*TuseType `xml:"http://www.w3.org/2000/svg use"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsUse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsUse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsUse instance.
func (me *XsdGoPkgHasElemsUse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsUse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Uses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TMediaDescType comma-separated list of media descriptors.
type TMediaDescType xsdt.String

// Set : Since TMediaDescType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMediaDescType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TMediaDescType is just a simple String type, this merely returns the current string value.
func (me TMediaDescType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TMediaDescType's alias type xsdt.String.
func (me TMediaDescType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrMediaTMediaDescType defines attribute MediaTMediaDescType
type XsdGoPkgHasAttrMediaTMediaDescType struct {
	Media TMediaDescType `xml:"http://www.w3.org/2000/svg media,attr"`
}

// XsdGoPkgHasAttrTitleXsdtString defines attribute TitleXsdtString
type XsdGoPkgHasAttrTitleXsdtString struct {
	Title xsdt.String `xml:"http://www.w3.org/2000/svg title,attr"`
}

// TstyleType defines TstyleType
type TstyleType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttsStdAttrs

	xml.XsdGoPkgHasAttrSpace

	XsdGoPkgHasAttrTypeTContentTypeType

	XsdGoPkgHasAttrMediaTMediaDescType

	XsdGoPkgHasAttrTitleXsdtString
}

// Walk : if the WalkHandlers.TstyleType function is not nil (ie. was set by outside code), calls it with this TstyleType instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TstyleType instance.
func (me *TstyleType) Walk() (err error) {
	if fn := WalkHandlers.TstyleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsStyle defines XsdGoPkgHasElemsStyle
type XsdGoPkgHasElemsStyle struct {
	Styles []*TstyleType `xml:"http://www.w3.org/2000/svg style"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsStyle instance.
func (me *XsdGoPkgHasElemsStyle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsStyle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Styles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TcursorType defines TcursorType
type TcursorType struct {
	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrXTCoordinateType

	XsdGoPkgHasAttrYTCoordinateType

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsStdAttrs
}

// Walk : if the WalkHandlers.TcursorType function is not nil (ie. was set by outside code), calls it with this TcursorType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TcursorType instance.
func (me *TcursorType) Walk() (err error) {
	if fn := WalkHandlers.TcursorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsCursor defines XsdGoPkgHasElemsCursor
type XsdGoPkgHasElemsCursor struct {
	Cursors []*TcursorType `xml:"http://www.w3.org/2000/svg cursor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsCursor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsCursor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsCursor instance.
func (me *XsdGoPkgHasElemsCursor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsCursor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cursors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TdefinitionSrcType defines TdefinitionSrcType
type TdefinitionSrcType struct {
	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsXlinkRefAttrs

	xlink.XsdGoPkgHasAttrHref
}

// Walk : if the WalkHandlers.TdefinitionSrcType function is not nil (ie. was set by outside code), calls it with this TdefinitionSrcType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TdefinitionSrcType instance.
func (me *TdefinitionSrcType) Walk() (err error) {
	if fn := WalkHandlers.TdefinitionSrcType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemDefinitionSrc defines XsdGoPkgHasElemDefinitionSrc
type XsdGoPkgHasElemDefinitionSrc struct {
	DefinitionSrc *TdefinitionSrcType `xml:"http://www.w3.org/2000/svg definition-src"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemDefinitionSrc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemDefinitionSrc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemDefinitionSrc instance.
func (me *XsdGoPkgHasElemDefinitionSrc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemDefinitionSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DefinitionSrc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrStemhXsdtDouble defines attribute StemhXsdtDouble
type XsdGoPkgHasAttrStemhXsdtDouble struct {
	Stemh xsdt.Double `xml:"http://www.w3.org/2000/svg stemh,attr"`
}

// XsdGoPkgHasAttrCapHeightXsdtDouble defines attribute CapHeightXsdtDouble
type XsdGoPkgHasAttrCapHeightXsdtDouble struct {
	CapHeight xsdt.Double `xml:"http://www.w3.org/2000/svg cap-height,attr"`
}

// XsdGoPkgHasAttrDescentXsdtDouble defines attribute DescentXsdtDouble
type XsdGoPkgHasAttrDescentXsdtDouble struct {
	Descent xsdt.Double `xml:"http://www.w3.org/2000/svg descent,attr"`
}

// XsdGoPkgHasAttrFontStyleXsdtString defines attribute FontStyleXsdtString
type XsdGoPkgHasAttrFontStyleXsdtString struct {
	FontStyle xsdt.String `xml:"http://www.w3.org/2000/svg font-style,attr"`
}

// XsdGoPkgHasAttrAscentXsdtDouble defines attribute AscentXsdtDouble
type XsdGoPkgHasAttrAscentXsdtDouble struct {
	Ascent xsdt.Double `xml:"http://www.w3.org/2000/svg ascent,attr"`
}

// XsdGoPkgHasAttrUnicodeRangeXsdtString defines attribute UnicodeRangeXsdtString
type XsdGoPkgHasAttrUnicodeRangeXsdtString struct {
	UnicodeRange xsdt.String `xml:"http://www.w3.org/2000/svg unicode-range,attr"`
}

// XsdGoPkgHasAttrPanose1XsdtString defines attribute Panose1XsdtString
type XsdGoPkgHasAttrPanose1XsdtString struct {
	Panose1 xsdt.String `xml:"http://www.w3.org/2000/svg panose-1,attr"`
}

// XsdGoPkgHasAttrIDeographicXsdtDouble defines attribute IdeographicXsdtDouble
type XsdGoPkgHasAttrIDeographicXsdtDouble struct {
	Ideographic xsdt.Double `xml:"http://www.w3.org/2000/svg ideographic,attr"`
}

// XsdGoPkgHasAttrBaselineXsdtDouble defines attribute BaselineXsdtDouble
type XsdGoPkgHasAttrBaselineXsdtDouble struct {
	Baseline xsdt.Double `xml:"http://www.w3.org/2000/svg baseline,attr"`
}

// XsdGoPkgHasAttrStrikethroughPositionXsdtDouble defines attribute StrikethroughPositionXsdtDouble
type XsdGoPkgHasAttrStrikethroughPositionXsdtDouble struct {
	StrikethroughPosition xsdt.Double `xml:"http://www.w3.org/2000/svg strikethrough-position,attr"`
}

// XsdGoPkgHasAttrOverlinePositionXsdtDouble defines attribute OverlinePositionXsdtDouble
type XsdGoPkgHasAttrOverlinePositionXsdtDouble struct {
	OverlinePosition xsdt.Double `xml:"http://www.w3.org/2000/svg overline-position,attr"`
}

// XsdGoPkgHasAttrUnderlinePositionXsdtDouble defines attribute UnderlinePositionXsdtDouble
type XsdGoPkgHasAttrUnderlinePositionXsdtDouble struct {
	UnderlinePosition xsdt.Double `xml:"http://www.w3.org/2000/svg underline-position,attr"`
}

// XsdGoPkgHasAttrXHeightXsdtDouble defines attribute XHeightXsdtDouble
type XsdGoPkgHasAttrXHeightXsdtDouble struct {
	XHeight xsdt.Double `xml:"http://www.w3.org/2000/svg x-height,attr"`
}

// XsdGoPkgHasAttrStrikethroughThicknessXsdtDouble defines attribute StrikethroughThicknessXsdtDouble
type XsdGoPkgHasAttrStrikethroughThicknessXsdtDouble struct {
	StrikethroughThickness xsdt.Double `xml:"http://www.w3.org/2000/svg strikethrough-thickness,attr"`
}

// XsdGoPkgHasAttrHangingXsdtDouble defines attribute HangingXsdtDouble
type XsdGoPkgHasAttrHangingXsdtDouble struct {
	Hanging xsdt.Double `xml:"http://www.w3.org/2000/svg hanging,attr"`
}

// XsdGoPkgHasAttrCenterlineXsdtDouble defines attribute CenterlineXsdtDouble
type XsdGoPkgHasAttrCenterlineXsdtDouble struct {
	Centerline xsdt.Double `xml:"http://www.w3.org/2000/svg centerline,attr"`
}

// XsdGoPkgHasAttrStemvXsdtDouble defines attribute StemvXsdtDouble
type XsdGoPkgHasAttrStemvXsdtDouble struct {
	Stemv xsdt.Double `xml:"http://www.w3.org/2000/svg stemv,attr"`
}

// XsdGoPkgHasAttrFontVariantXsdtString defines attribute FontVariantXsdtString
type XsdGoPkgHasAttrFontVariantXsdtString struct {
	FontVariant xsdt.String `xml:"http://www.w3.org/2000/svg font-variant,attr"`
}

// XsdGoPkgHasAttrFontStretchXsdtString defines attribute FontStretchXsdtString
type XsdGoPkgHasAttrFontStretchXsdtString struct {
	FontStretch xsdt.String `xml:"http://www.w3.org/2000/svg font-stretch,attr"`
}

// XsdGoPkgHasAttrAccentHeightXsdtDouble defines attribute AccentHeightXsdtDouble
type XsdGoPkgHasAttrAccentHeightXsdtDouble struct {
	AccentHeight xsdt.Double `xml:"http://www.w3.org/2000/svg accent-height,attr"`
}

// XsdGoPkgHasAttrStringXsdtString defines attribute StringXsdtString
type XsdGoPkgHasAttrStringXsdtString struct {
	String xsdt.String `xml:"http://www.w3.org/2000/svg string,attr"`
}

// TfontFaceFormatType defines TfontFaceFormatType
type TfontFaceFormatType struct {
	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrStringXsdtString
}

// Walk : if the WalkHandlers.TfontFaceFormatType function is not nil (ie. was set by outside code), calls it with this TfontFaceFormatType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TfontFaceFormatType instance.
func (me *TfontFaceFormatType) Walk() (err error) {
	if fn := WalkHandlers.TfontFaceFormatType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFontFaceFormat defines XsdGoPkgHasElemFontFaceFormat
type XsdGoPkgHasElemFontFaceFormat struct {
	FontFaceFormat *TfontFaceFormatType `xml:"http://www.w3.org/2000/svg font-face-format"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFontFaceFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFontFaceFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFontFaceFormat instance.
func (me *XsdGoPkgHasElemFontFaceFormat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFontFaceFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FontFaceFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfontFaceURIType defines TfontFaceURIType
type TfontFaceURIType struct {
	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasElemFontFaceFormat

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttsStdAttrs
}

// Walk : if the WalkHandlers.TfontFaceURIType function is not nil (ie. was set by outside code), calls it with this TfontFaceURIType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TfontFaceURIType instance.
func (me *TfontFaceURIType) Walk() (err error) {
	if fn := WalkHandlers.TfontFaceURIType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemFontFaceFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFontFaceURI defines XsdGoPkgHasElemsFontFaceURI
type XsdGoPkgHasElemsFontFaceURI struct {
	FontFaceURIs []*TfontFaceURIType `xml:"http://www.w3.org/2000/svg font-face-uri"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFontFaceURI function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFontFaceURI instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFontFaceURI instance.
func (me *XsdGoPkgHasElemsFontFaceURI) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFontFaceURI; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FontFaceURIs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfontFaceNameType defines TfontFaceNameType
type TfontFaceNameType struct {
	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrNameXsdtString
}

// Walk : if the WalkHandlers.TfontFaceNameType function is not nil (ie. was set by outside code), calls it with this TfontFaceNameType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TfontFaceNameType instance.
func (me *TfontFaceNameType) Walk() (err error) {
	if fn := WalkHandlers.TfontFaceNameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFontFaceName defines XsdGoPkgHasElemsFontFaceName
type XsdGoPkgHasElemsFontFaceName struct {
	FontFaceNames []*TfontFaceNameType `xml:"http://www.w3.org/2000/svg font-face-name"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFontFaceName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFontFaceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFontFaceName instance.
func (me *XsdGoPkgHasElemsFontFaceName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFontFaceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FontFaceNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfontFaceSrcType defines TfontFaceSrcType
type TfontFaceSrcType struct {
	XsdGoPkgHasElemsFontFaceURI

	XsdGoPkgHasElemsFontFaceName

	XsdGoPkgHasAttsStdAttrs
}

// Walk : if the WalkHandlers.TfontFaceSrcType function is not nil (ie. was set by outside code), calls it with this TfontFaceSrcType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TfontFaceSrcType instance.
func (me *TfontFaceSrcType) Walk() (err error) {
	if fn := WalkHandlers.TfontFaceSrcType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsFontFaceURI.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFaceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFontFaceSrc defines XsdGoPkgHasElemFontFaceSrc
type XsdGoPkgHasElemFontFaceSrc struct {
	FontFaceSrc *TfontFaceSrcType `xml:"http://www.w3.org/2000/svg font-face-src"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFontFaceSrc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFontFaceSrc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFontFaceSrc instance.
func (me *XsdGoPkgHasElemFontFaceSrc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFontFaceSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FontFaceSrc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrFontWeightXsdtString defines attribute FontWeightXsdtString
type XsdGoPkgHasAttrFontWeightXsdtString struct {
	FontWeight xsdt.String `xml:"http://www.w3.org/2000/svg font-weight,attr"`
}

// XsdGoPkgHasAttrUnitsPerEmXsdtDouble defines attribute UnitsPerEmXsdtDouble
type XsdGoPkgHasAttrUnitsPerEmXsdtDouble struct {
	UnitsPerEm xsdt.Double `xml:"http://www.w3.org/2000/svg units-per-em,attr"`
}

// XsdGoPkgHasAttrWidthsXsdtString defines attribute WidthsXsdtString
type XsdGoPkgHasAttrWidthsXsdtString struct {
	Widths xsdt.String `xml:"http://www.w3.org/2000/svg widths,attr"`
}

// XsdGoPkgHasAttrToplineXsdtDouble defines attribute ToplineXsdtDouble
type XsdGoPkgHasAttrToplineXsdtDouble struct {
	Topline xsdt.Double `xml:"http://www.w3.org/2000/svg topline,attr"`
}

// XsdGoPkgHasAttrOverlineThicknessXsdtDouble defines attribute OverlineThicknessXsdtDouble
type XsdGoPkgHasAttrOverlineThicknessXsdtDouble struct {
	OverlineThickness xsdt.Double `xml:"http://www.w3.org/2000/svg overline-thickness,attr"`
}

// XsdGoPkgHasAttrMathlineXsdtDouble defines attribute MathlineXsdtDouble
type XsdGoPkgHasAttrMathlineXsdtDouble struct {
	Mathline xsdt.Double `xml:"http://www.w3.org/2000/svg mathline,attr"`
}

// XsdGoPkgHasAttrUnderlineThicknessXsdtDouble defines attribute UnderlineThicknessXsdtDouble
type XsdGoPkgHasAttrUnderlineThicknessXsdtDouble struct {
	UnderlineThickness xsdt.Double `xml:"http://www.w3.org/2000/svg underline-thickness,attr"`
}

// XsdGoPkgHasAttrBboxXsdtString defines attribute BboxXsdtString
type XsdGoPkgHasAttrBboxXsdtString struct {
	Bbox xsdt.String `xml:"http://www.w3.org/2000/svg bbox,attr"`
}

// TfontFaceType defines TfontFaceType
type TfontFaceType struct {
	XsdGoPkgHasElemFontFaceSrc

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttrFontWeightXsdtString

	XsdGoPkgHasAttrUnitsPerEmXsdtDouble

	XsdGoPkgHasAttrBboxXsdtString

	XsdGoPkgHasAttrWidthsXsdtString

	XsdGoPkgHasAttrToplineXsdtDouble

	XsdGoPkgHasAttrOverlineThicknessXsdtDouble

	XsdGoPkgHasAttrMathlineXsdtDouble

	XsdGoPkgHasAttrUnderlineThicknessXsdtDouble

	XsdGoPkgHasAttrFontStyleXsdtString

	XsdGoPkgHasElemDefinitionSrc

	XsdGoPkgHasAttrSlopeXsdtDouble

	XsdGoPkgHasAttrStemhXsdtDouble

	XsdGoPkgHasAttrCapHeightXsdtDouble

	XsdGoPkgHasAttrDescentXsdtDouble

	XsdGoPkgHasAttrBaselineXsdtDouble

	XsdGoPkgHasAttrStrikethroughPositionXsdtDouble

	XsdGoPkgHasAttrOverlinePositionXsdtDouble

	XsdGoPkgHasAttrAscentXsdtDouble

	XsdGoPkgHasAttrUnicodeRangeXsdtString

	XsdGoPkgHasAttrPanose1XsdtString

	XsdGoPkgHasAttrFontFamilyTFontFamilyValueType

	XsdGoPkgHasAttrIDeographicXsdtDouble

	XsdGoPkgHasAttrUnderlinePositionXsdtDouble

	XsdGoPkgHasAttrFontSizeTFontSizeValueType

	XsdGoPkgHasAttrXHeightXsdtDouble

	XsdGoPkgHasAttrStrikethroughThicknessXsdtDouble

	XsdGoPkgHasAttrHangingXsdtDouble

	XsdGoPkgHasAttrCenterlineXsdtDouble

	XsdGoPkgHasAttrStemvXsdtDouble

	XsdGoPkgHasAttrFontVariantXsdtString

	XsdGoPkgHasAttrFontStretchXsdtString

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrAccentHeightXsdtDouble
}

// Walk : if the WalkHandlers.TfontFaceType function is not nil (ie. was set by outside code), calls it with this TfontFaceType instance as the single argument. Then calls the Walk() method on 3/35 embed(s) and 0/0 field(s) belonging to this TfontFaceType instance.
func (me *TfontFaceType) Walk() (err error) {
	if fn := WalkHandlers.TfontFaceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemFontFaceSrc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemDefinitionSrc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFontFace defines XsdGoPkgHasElemsFontFace
type XsdGoPkgHasElemsFontFace struct {
	FontFaces []*TfontFaceType `xml:"http://www.w3.org/2000/svg font-face"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFontFace function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFontFace instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFontFace instance.
func (me *XsdGoPkgHasElemsFontFace) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFontFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FontFaces {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TPreserveAspectRatioSpecType 'preserveAspectRatio' attribute specification
type TPreserveAspectRatioSpecType xsdt.String

// Set : Since TPreserveAspectRatioSpecType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPreserveAspectRatioSpecType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TPreserveAspectRatioSpecType is just a simple String type, this merely returns the current string value.
func (me TPreserveAspectRatioSpecType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TPreserveAspectRatioSpecType's alias type xsdt.String.
func (me TPreserveAspectRatioSpecType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet defines attribute PreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet
type XsdGoPkgHasAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet struct {
	PreserveAspectRatio TPreserveAspectRatioSpecType `xml:"http://www.w3.org/2000/svg preserveAspectRatio,attr"`
}

// PreserveAspectRatioDefault : Returns the default value for PreserveAspectRatio -- "xMidYMid meet"
func (me XsdGoPkgHasAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet) PreserveAspectRatioDefault() TPreserveAspectRatioSpecType {
	return TPreserveAspectRatioSpecType("xMidYMid meet")
}

// TxsdMarkerTypeMarkerUnits defines TxsdMarkerTypeMarkerUnits
type TxsdMarkerTypeMarkerUnits xsdt.String

// String : Since TxsdMarkerTypeMarkerUnits is just a simple String type, this merely returns the current string value.
func (me TxsdMarkerTypeMarkerUnits) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdMarkerTypeMarkerUnits's alias type xsdt.String.
func (me TxsdMarkerTypeMarkerUnits) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsStrokeWidth : Returns true if the value of this enumerated TxsdMarkerTypeMarkerUnits is "strokeWidth".
func (me TxsdMarkerTypeMarkerUnits) IsStrokeWidth() bool { return me.String() == "strokeWidth" }

// IsUserSpaceOnUse : Returns true if the value of this enumerated TxsdMarkerTypeMarkerUnits is "userSpaceOnUse".
func (me TxsdMarkerTypeMarkerUnits) IsUserSpaceOnUse() bool { return me.String() == "userSpaceOnUse" }

// IsUserSpace : Returns true if the value of this enumerated TxsdMarkerTypeMarkerUnits is "userSpace".
func (me TxsdMarkerTypeMarkerUnits) IsUserSpace() bool { return me.String() == "userSpace" }

// Set : Since TxsdMarkerTypeMarkerUnits is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMarkerTypeMarkerUnits) Set(s string) { (*xsdt.String)(me).Set(s) }

// XsdGoPkgHasAttrMarkerUnitsTxsdMarkerTypeMarkerUnits defines attribute MarkerUnitsTxsdMarkerTypeMarkerUnits
type XsdGoPkgHasAttrMarkerUnitsTxsdMarkerTypeMarkerUnits struct {
	MarkerUnits TxsdMarkerTypeMarkerUnits `xml:"http://www.w3.org/2000/svg markerUnits,attr"`
}

// XsdGoPkgHasAttrY1TCoordinateType defines attribute Y1TCoordinateType
type XsdGoPkgHasAttrY1TCoordinateType struct {
	Y1 TCoordinateType `xml:"http://www.w3.org/2000/svg y1,attr"`
}

// TxsdLinearGradientTypeSpreadMethod defines TxsdLinearGradientTypeSpreadMethod
type TxsdLinearGradientTypeSpreadMethod xsdt.String

// Set : Since TxsdLinearGradientTypeSpreadMethod is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdLinearGradientTypeSpreadMethod) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdLinearGradientTypeSpreadMethod is just a simple String type, this merely returns the current string value.
func (me TxsdLinearGradientTypeSpreadMethod) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdLinearGradientTypeSpreadMethod's alias type xsdt.String.
func (me TxsdLinearGradientTypeSpreadMethod) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsPad : Returns true if the value of this enumerated TxsdLinearGradientTypeSpreadMethod is "pad".
func (me TxsdLinearGradientTypeSpreadMethod) IsPad() bool { return me.String() == "pad" }

// IsReflect : Returns true if the value of this enumerated TxsdLinearGradientTypeSpreadMethod is "reflect".
func (me TxsdLinearGradientTypeSpreadMethod) IsReflect() bool { return me.String() == "reflect" }

// IsRepeat : Returns true if the value of this enumerated TxsdLinearGradientTypeSpreadMethod is "repeat".
func (me TxsdLinearGradientTypeSpreadMethod) IsRepeat() bool { return me.String() == "repeat" }

// XsdGoPkgHasAttrSpreadMethodTxsdLinearGradientTypeSpreadMethodPad defines attribute SpreadMethodTxsdLinearGradientTypeSpreadMethodPad
type XsdGoPkgHasAttrSpreadMethodTxsdLinearGradientTypeSpreadMethodPad struct {
	SpreadMethod TxsdLinearGradientTypeSpreadMethod `xml:"http://www.w3.org/2000/svg spreadMethod,attr"`
}

// SpreadMethodDefault : Returns the default value for SpreadMethod -- "pad"
func (me XsdGoPkgHasAttrSpreadMethodTxsdLinearGradientTypeSpreadMethodPad) SpreadMethodDefault() TxsdLinearGradientTypeSpreadMethod {
	return TxsdLinearGradientTypeSpreadMethod("pad")
}

// XsdGoPkgHasAttrY2TCoordinateType defines attribute Y2TCoordinateType
type XsdGoPkgHasAttrY2TCoordinateType struct {
	Y2 TCoordinateType `xml:"http://www.w3.org/2000/svg y2,attr"`
}

// XsdGoPkgHasAttrX1TCoordinateType defines attribute X1TCoordinateType
type XsdGoPkgHasAttrX1TCoordinateType struct {
	X1 TCoordinateType `xml:"http://www.w3.org/2000/svg x1,attr"`
}

// XsdGoPkgHasAttrOffsetTLengthType defines attribute OffsetTLengthType
type XsdGoPkgHasAttrOffsetTLengthType struct {
	Offset TLengthType `xml:"http://www.w3.org/2000/svg offset,attr"`
}

// TstopType defines TstopType
type TstopType struct {
	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsPresentationAttributesGradients

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrOffsetTLengthType

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet
}

// Walk : if the WalkHandlers.TstopType function is not nil (ie. was set by outside code), calls it with this TstopType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TstopType instance.
func (me *TstopType) Walk() (err error) {
	if fn := WalkHandlers.TstopType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsStop defines XsdGoPkgHasElemsStop
type XsdGoPkgHasElemsStop struct {
	Stops []*TstopType `xml:"http://www.w3.org/2000/svg stop"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsStop function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsStop instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsStop instance.
func (me *XsdGoPkgHasElemsStop) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsStop; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Stops {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrGradientUnitsTxsdLinearGradientTypeGradientUnits defines attribute GradientUnitsTxsdLinearGradientTypeGradientUnits
type XsdGoPkgHasAttrGradientUnitsTxsdLinearGradientTypeGradientUnits struct {
	GradientUnits TxsdClipPathTypeClipPathUnits `xml:"http://www.w3.org/2000/svg gradientUnits,attr"`
}

// XsdGoPkgHasAttrX2TCoordinateType defines attribute X2TCoordinateType
type XsdGoPkgHasAttrX2TCoordinateType struct {
	X2 TCoordinateType `xml:"http://www.w3.org/2000/svg x2,attr"`
}

// XsdGoPkgHasAttrGradientTransformTransformListType defines attribute GradientTransformTransformListType
type XsdGoPkgHasAttrGradientTransformTransformListType struct {
	GradientTransform TransformListType `xml:"http://www.w3.org/2000/svg gradientTransform,attr"`
}

// TlinearGradientType defines TlinearGradientType
type TlinearGradientType struct {
	XsdGoPkgHasAttrSpreadMethodTxsdLinearGradientTypeSpreadMethodPad

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttrY2TCoordinateType

	XsdGoPkgHasAttrX1TCoordinateType

	XsdGoPkgHasElemsStop

	XsdGoPkgHasAttrGradientUnitsTxsdLinearGradientTypeGradientUnits

	XsdGoPkgHasAttrX2TCoordinateType

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttrGradientTransformTransformListType

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrY1TCoordinateType

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean
}

// Walk : if the WalkHandlers.TlinearGradientType function is not nil (ie. was set by outside code), calls it with this TlinearGradientType instance as the single argument. Then calls the Walk() method on 5/18 embed(s) and 0/0 field(s) belonging to this TlinearGradientType instance.
func (me *TlinearGradientType) Walk() (err error) {
	if fn := WalkHandlers.TlinearGradientType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsStop.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsLinearGradient defines XsdGoPkgHasElemsLinearGradient
type XsdGoPkgHasElemsLinearGradient struct {
	LinearGradients []*TlinearGradientType `xml:"http://www.w3.org/2000/svg linearGradient"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsLinearGradient function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsLinearGradient instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsLinearGradient instance.
func (me *XsdGoPkgHasElemsLinearGradient) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsLinearGradient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LinearGradients {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdFeBlendTypeMode defines TxsdFeBlendTypeMode
type TxsdFeBlendTypeMode xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeBlendTypeMode's alias type xsdt.String.
func (me TxsdFeBlendTypeMode) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsNormal : Returns true if the value of this enumerated TxsdFeBlendTypeMode is "normal".
func (me TxsdFeBlendTypeMode) IsNormal() bool { return me.String() == "normal" }

// IsMultiply : Returns true if the value of this enumerated TxsdFeBlendTypeMode is "multiply".
func (me TxsdFeBlendTypeMode) IsMultiply() bool { return me.String() == "multiply" }

// IsScreen : Returns true if the value of this enumerated TxsdFeBlendTypeMode is "screen".
func (me TxsdFeBlendTypeMode) IsScreen() bool { return me.String() == "screen" }

// IsDarken : Returns true if the value of this enumerated TxsdFeBlendTypeMode is "darken".
func (me TxsdFeBlendTypeMode) IsDarken() bool { return me.String() == "darken" }

// IsLighten : Returns true if the value of this enumerated TxsdFeBlendTypeMode is "lighten".
func (me TxsdFeBlendTypeMode) IsLighten() bool { return me.String() == "lighten" }

// Set : Since TxsdFeBlendTypeMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeBlendTypeMode) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeBlendTypeMode is just a simple String type, this merely returns the current string value.
func (me TxsdFeBlendTypeMode) String() string { return xsdt.String(me).String() }

// XsdGoPkgHasAttrModeTxsdFeBlendTypeModeNormal defines attribute ModeTxsdFeBlendTypeModeNormal
type XsdGoPkgHasAttrModeTxsdFeBlendTypeModeNormal struct {
	Mode TxsdFeBlendTypeMode `xml:"http://www.w3.org/2000/svg mode,attr"`
}

// ModeDefault : Returns the default value for Mode -- "normal"
func (me XsdGoPkgHasAttrModeTxsdFeBlendTypeModeNormal) ModeDefault() TxsdFeBlendTypeMode {
	return TxsdFeBlendTypeMode("normal")
}

// XsdGoPkgHasAttrIn2XsdtString defines attribute In2XsdtString
type XsdGoPkgHasAttrIn2XsdtString struct {
	In2 xsdt.String `xml:"http://www.w3.org/2000/svg in2,attr"`
}

// TfeBlendType defines TfeBlendType
type TfeBlendType struct {
	XsdGoPkgHasAttrIn2XsdtString

	XsdGoPkgHasAttrModeTxsdFeBlendTypeModeNormal

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn
}

// Walk : if the WalkHandlers.TfeBlendType function is not nil (ie. was set by outside code), calls it with this TfeBlendType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfeBlendType instance.
func (me *TfeBlendType) Walk() (err error) {
	if fn := WalkHandlers.TfeBlendType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeBlend defines XsdGoPkgHasElemsFeBlend
type XsdGoPkgHasElemsFeBlend struct {
	FeBlends []*TfeBlendType `xml:"http://www.w3.org/2000/svg feBlend"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeBlend function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeBlend instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeBlend instance.
func (me *XsdGoPkgHasElemsFeBlend) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeBlend; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeBlends {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrTypeTxsdFeFuncRTypeType defines attribute TypeTxsdFeFuncRTypeType
type XsdGoPkgHasAttrTypeTxsdFeFuncRTypeType struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"http://www.w3.org/2000/svg type,attr"`
}

// TfeFuncRType defines TfeFuncRType
type TfeFuncRType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsComponentTransferFunctionAttributes

	XsdGoPkgHasAttrTypeTxsdFeFuncRTypeType
}

// Walk : if the WalkHandlers.TfeFuncRType function is not nil (ie. was set by outside code), calls it with this TfeFuncRType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeFuncRType instance.
func (me *TfeFuncRType) Walk() (err error) {
	if fn := WalkHandlers.TfeFuncRType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeFuncR defines XsdGoPkgHasElemFeFuncR
type XsdGoPkgHasElemFeFuncR struct {
	FeFuncR *TfeFuncRType `xml:"http://www.w3.org/2000/svg feFuncR"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeFuncR function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeFuncR instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeFuncR instance.
func (me *XsdGoPkgHasElemFeFuncR) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeFuncR; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeFuncR.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrTypeTxsdFeFuncGTypeType defines attribute TypeTxsdFeFuncGTypeType
type XsdGoPkgHasAttrTypeTxsdFeFuncGTypeType struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"http://www.w3.org/2000/svg type,attr"`
}

// TfeFuncGType defines TfeFuncGType
type TfeFuncGType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsComponentTransferFunctionAttributes

	XsdGoPkgHasAttrTypeTxsdFeFuncGTypeType
}

// Walk : if the WalkHandlers.TfeFuncGType function is not nil (ie. was set by outside code), calls it with this TfeFuncGType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeFuncGType instance.
func (me *TfeFuncGType) Walk() (err error) {
	if fn := WalkHandlers.TfeFuncGType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeFuncG defines XsdGoPkgHasElemFeFuncG
type XsdGoPkgHasElemFeFuncG struct {
	FeFuncG *TfeFuncGType `xml:"http://www.w3.org/2000/svg feFuncG"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeFuncG function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeFuncG instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeFuncG instance.
func (me *XsdGoPkgHasElemFeFuncG) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeFuncG; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeFuncG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrTypeTxsdFeFuncBTypeType defines attribute TypeTxsdFeFuncBTypeType
type XsdGoPkgHasAttrTypeTxsdFeFuncBTypeType struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"http://www.w3.org/2000/svg type,attr"`
}

// TfeFuncBType defines TfeFuncBType
type TfeFuncBType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsComponentTransferFunctionAttributes

	XsdGoPkgHasAttrTypeTxsdFeFuncBTypeType
}

// Walk : if the WalkHandlers.TfeFuncBType function is not nil (ie. was set by outside code), calls it with this TfeFuncBType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeFuncBType instance.
func (me *TfeFuncBType) Walk() (err error) {
	if fn := WalkHandlers.TfeFuncBType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeFuncB defines XsdGoPkgHasElemFeFuncB
type XsdGoPkgHasElemFeFuncB struct {
	FeFuncB *TfeFuncBType `xml:"http://www.w3.org/2000/svg feFuncB"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeFuncB function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeFuncB instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeFuncB instance.
func (me *XsdGoPkgHasElemFeFuncB) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeFuncB; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeFuncB.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrTypeTxsdFeFuncATypeType defines attribute TypeTxsdFeFuncATypeType
type XsdGoPkgHasAttrTypeTxsdFeFuncATypeType struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"http://www.w3.org/2000/svg type,attr"`
}

// TfeFuncAType defines TfeFuncAType
type TfeFuncAType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsComponentTransferFunctionAttributes

	XsdGoPkgHasAttrTypeTxsdFeFuncATypeType
}

// Walk : if the WalkHandlers.TfeFuncAType function is not nil (ie. was set by outside code), calls it with this TfeFuncAType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeFuncAType instance.
func (me *TfeFuncAType) Walk() (err error) {
	if fn := WalkHandlers.TfeFuncAType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeFuncA defines XsdGoPkgHasElemFeFuncA
type XsdGoPkgHasElemFeFuncA struct {
	FeFuncA *TfeFuncAType `xml:"http://www.w3.org/2000/svg feFuncA"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeFuncA function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeFuncA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeFuncA instance.
func (me *XsdGoPkgHasElemFeFuncA) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeFuncA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeFuncA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfeComponentTransferType defines TfeComponentTransferType
type TfeComponentTransferType struct {
	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn

	XsdGoPkgHasElemFeFuncR

	XsdGoPkgHasElemFeFuncG

	XsdGoPkgHasElemFeFuncB

	XsdGoPkgHasElemFeFuncA
}

// Walk : if the WalkHandlers.TfeComponentTransferType function is not nil (ie. was set by outside code), calls it with this TfeComponentTransferType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TfeComponentTransferType instance.
func (me *TfeComponentTransferType) Walk() (err error) {
	if fn := WalkHandlers.TfeComponentTransferType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemFeFuncR.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemFeFuncG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemFeFuncB.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemFeFuncA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeComponentTransfer defines XsdGoPkgHasElemsFeComponentTransfer
type XsdGoPkgHasElemsFeComponentTransfer struct {
	FeComponentTransfers []*TfeComponentTransferType `xml:"http://www.w3.org/2000/svg feComponentTransfer"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeComponentTransfer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeComponentTransfer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeComponentTransfer instance.
func (me *XsdGoPkgHasElemsFeComponentTransfer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeComponentTransfer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeComponentTransfers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdFeConvolveMatrixTypeEdgeMode defines TxsdFeConvolveMatrixTypeEdgeMode
type TxsdFeConvolveMatrixTypeEdgeMode xsdt.String

// Set : Since TxsdFeConvolveMatrixTypeEdgeMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeConvolveMatrixTypeEdgeMode) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeConvolveMatrixTypeEdgeMode is just a simple String type, this merely returns the current string value.
func (me TxsdFeConvolveMatrixTypeEdgeMode) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeConvolveMatrixTypeEdgeMode's alias type xsdt.String.
func (me TxsdFeConvolveMatrixTypeEdgeMode) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsDuplicate : Returns true if the value of this enumerated TxsdFeConvolveMatrixTypeEdgeMode is "duplicate".
func (me TxsdFeConvolveMatrixTypeEdgeMode) IsDuplicate() bool { return me.String() == "duplicate" }

// IsWrap : Returns true if the value of this enumerated TxsdFeConvolveMatrixTypeEdgeMode is "wrap".
func (me TxsdFeConvolveMatrixTypeEdgeMode) IsWrap() bool { return me.String() == "wrap" }

// IsNone : Returns true if the value of this enumerated TxsdFeConvolveMatrixTypeEdgeMode is "none".
func (me TxsdFeConvolveMatrixTypeEdgeMode) IsNone() bool { return me.String() == "none" }

// XsdGoPkgHasAttrEdgeModeTxsdFeConvolveMatrixTypeEdgeModeDuplicate defines attribute EdgeModeTxsdFeConvolveMatrixTypeEdgeModeDuplicate
type XsdGoPkgHasAttrEdgeModeTxsdFeConvolveMatrixTypeEdgeModeDuplicate struct {
	EdgeMode TxsdFeConvolveMatrixTypeEdgeMode `xml:"http://www.w3.org/2000/svg edgeMode,attr"`
}

// EdgeModeDefault : Returns the default value for EdgeMode -- "duplicate"
func (me XsdGoPkgHasAttrEdgeModeTxsdFeConvolveMatrixTypeEdgeModeDuplicate) EdgeModeDefault() TxsdFeConvolveMatrixTypeEdgeMode {
	return TxsdFeConvolveMatrixTypeEdgeMode("duplicate")
}

// XsdGoPkgHasAttrPreserveAlphaXsdtBoolean defines attribute PreserveAlphaXsdtBoolean
type XsdGoPkgHasAttrPreserveAlphaXsdtBoolean struct {
	PreserveAlpha xsdt.Boolean `xml:"http://www.w3.org/2000/svg preserveAlpha,attr"`
}

// XsdGoPkgHasAttrBiasXsdtDouble defines attribute BiasXsdtDouble
type XsdGoPkgHasAttrBiasXsdtDouble struct {
	Bias xsdt.Double `xml:"http://www.w3.org/2000/svg bias,attr"`
}

// XsdGoPkgHasAttrTargetXXsdtInteger defines attribute TargetXXsdtInteger
type XsdGoPkgHasAttrTargetXXsdtInteger struct {
	TargetX xsdt.Integer `xml:"http://www.w3.org/2000/svg targetX,attr"`
}

// XsdGoPkgHasAttrKernelUnitLengthXsdtString defines attribute KernelUnitLengthXsdtString
type XsdGoPkgHasAttrKernelUnitLengthXsdtString struct {
	KernelUnitLength xsdt.String `xml:"http://www.w3.org/2000/svg kernelUnitLength,attr"`
}

// XsdGoPkgHasAttrKernelMatrixXsdtString defines attribute KernelMatrixXsdtString
type XsdGoPkgHasAttrKernelMatrixXsdtString struct {
	KernelMatrix xsdt.String `xml:"http://www.w3.org/2000/svg kernelMatrix,attr"`
}

// XsdGoPkgHasAttrTargetYXsdtInteger defines attribute TargetYXsdtInteger
type XsdGoPkgHasAttrTargetYXsdtInteger struct {
	TargetY xsdt.Integer `xml:"http://www.w3.org/2000/svg targetY,attr"`
}

// XsdGoPkgHasAttrDivisorXsdtDouble defines attribute DivisorXsdtDouble
type XsdGoPkgHasAttrDivisorXsdtDouble struct {
	Divisor xsdt.Double `xml:"http://www.w3.org/2000/svg divisor,attr"`
}

// XsdGoPkgHasAttrOrderXsdtString defines attribute OrderXsdtString
type XsdGoPkgHasAttrOrderXsdtString struct {
	Order xsdt.String `xml:"http://www.w3.org/2000/svg order,attr"`
}

// TfeConvolveMatrixType defines TfeConvolveMatrixType
type TfeConvolveMatrixType struct {
	XsdGoPkgHasAttrKernelMatrixXsdtString

	XsdGoPkgHasAttrTargetYXsdtInteger

	XsdGoPkgHasAttrEdgeModeTxsdFeConvolveMatrixTypeEdgeModeDuplicate

	XsdGoPkgHasAttrPreserveAlphaXsdtBoolean

	XsdGoPkgHasAttrBiasXsdtDouble

	XsdGoPkgHasAttrTargetXXsdtInteger

	XsdGoPkgHasAttrKernelUnitLengthXsdtString

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn

	XsdGoPkgHasAttrOrderXsdtString

	XsdGoPkgHasAttrDivisorXsdtDouble

	XsdGoPkgHasElemsSet
}

// Walk : if the WalkHandlers.TfeConvolveMatrixType function is not nil (ie. was set by outside code), calls it with this TfeConvolveMatrixType instance as the single argument. Then calls the Walk() method on 2/12 embed(s) and 0/0 field(s) belonging to this TfeConvolveMatrixType instance.
func (me *TfeConvolveMatrixType) Walk() (err error) {
	if fn := WalkHandlers.TfeConvolveMatrixType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeConvolveMatrix defines XsdGoPkgHasElemsFeConvolveMatrix
type XsdGoPkgHasElemsFeConvolveMatrix struct {
	FeConvolveMatrixs []*TfeConvolveMatrixType `xml:"http://www.w3.org/2000/svg feConvolveMatrix"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeConvolveMatrix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeConvolveMatrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeConvolveMatrix instance.
func (me *XsdGoPkgHasElemsFeConvolveMatrix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeConvolveMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeConvolveMatrixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfeFloodType defines TfeFloodType
type TfeFloodType struct {
	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsPresentationAttributesFeFlood

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn

	XsdGoPkgHasAttrClassTClassListType
}

// Walk : if the WalkHandlers.TfeFloodType function is not nil (ie. was set by outside code), calls it with this TfeFloodType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TfeFloodType instance.
func (me *TfeFloodType) Walk() (err error) {
	if fn := WalkHandlers.TfeFloodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeFlood defines XsdGoPkgHasElemsFeFlood
type XsdGoPkgHasElemsFeFlood struct {
	FeFloods []*TfeFloodType `xml:"http://www.w3.org/2000/svg feFlood"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeFlood function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeFlood instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeFlood instance.
func (me *XsdGoPkgHasElemsFeFlood) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeFlood; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeFloods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrPrimitiveUnitsTxsdFilterTypePrimitiveUnits defines attribute PrimitiveUnitsTxsdFilterTypePrimitiveUnits
type XsdGoPkgHasAttrPrimitiveUnitsTxsdFilterTypePrimitiveUnits struct {
	PrimitiveUnits TxsdClipPathTypeClipPathUnits `xml:"http://www.w3.org/2000/svg primitiveUnits,attr"`
}

// XsdGoPkgHasAttrStdDeviationXsdtString defines attribute StdDeviationXsdtString
type XsdGoPkgHasAttrStdDeviationXsdtString struct {
	StdDeviation xsdt.String `xml:"http://www.w3.org/2000/svg stdDeviation,attr"`
}

// TfeGaussianBlurType defines TfeGaussianBlurType
type TfeGaussianBlurType struct {
	XsdGoPkgHasAttrStdDeviationXsdtString

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn
}

// Walk : if the WalkHandlers.TfeGaussianBlurType function is not nil (ie. was set by outside code), calls it with this TfeGaussianBlurType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeGaussianBlurType instance.
func (me *TfeGaussianBlurType) Walk() (err error) {
	if fn := WalkHandlers.TfeGaussianBlurType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeGaussianBlur defines XsdGoPkgHasElemsFeGaussianBlur
type XsdGoPkgHasElemsFeGaussianBlur struct {
	FeGaussianBlurs []*TfeGaussianBlurType `xml:"http://www.w3.org/2000/svg feGaussianBlur"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeGaussianBlur function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeGaussianBlur instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeGaussianBlur instance.
func (me *XsdGoPkgHasElemsFeGaussianBlur) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeGaussianBlur; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeGaussianBlurs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrAzimuthXsdtDouble defines attribute AzimuthXsdtDouble
type XsdGoPkgHasAttrAzimuthXsdtDouble struct {
	Azimuth xsdt.Double `xml:"http://www.w3.org/2000/svg azimuth,attr"`
}

// XsdGoPkgHasAttrElevationXsdtDouble defines attribute ElevationXsdtDouble
type XsdGoPkgHasAttrElevationXsdtDouble struct {
	Elevation xsdt.Double `xml:"http://www.w3.org/2000/svg elevation,attr"`
}

// TfeDistantLightType defines TfeDistantLightType
type TfeDistantLightType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrAzimuthXsdtDouble

	XsdGoPkgHasAttrElevationXsdtDouble
}

// Walk : if the WalkHandlers.TfeDistantLightType function is not nil (ie. was set by outside code), calls it with this TfeDistantLightType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeDistantLightType instance.
func (me *TfeDistantLightType) Walk() (err error) {
	if fn := WalkHandlers.TfeDistantLightType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeDistantLight defines XsdGoPkgHasElemFeDistantLight
type XsdGoPkgHasElemFeDistantLight struct {
	FeDistantLight *TfeDistantLightType `xml:"http://www.w3.org/2000/svg feDistantLight"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeDistantLight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeDistantLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeDistantLight instance.
func (me *XsdGoPkgHasElemFeDistantLight) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeDistantLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeDistantLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrYXsdtDouble defines attribute YXsdtDouble
type XsdGoPkgHasAttrYXsdtDouble struct {
	Y xsdt.Double `xml:"http://www.w3.org/2000/svg y,attr"`
}

// XsdGoPkgHasAttrPointsAtYXsdtDouble defines attribute PointsAtYXsdtDouble
type XsdGoPkgHasAttrPointsAtYXsdtDouble struct {
	PointsAtY xsdt.Double `xml:"http://www.w3.org/2000/svg pointsAtY,attr"`
}

// XsdGoPkgHasAttrSpecularExponentXsdtDouble defines attribute SpecularExponentXsdtDouble
type XsdGoPkgHasAttrSpecularExponentXsdtDouble struct {
	SpecularExponent xsdt.Double `xml:"http://www.w3.org/2000/svg specularExponent,attr"`
}

// XsdGoPkgHasAttrLimitingConeAngleXsdtDouble defines attribute LimitingConeAngleXsdtDouble
type XsdGoPkgHasAttrLimitingConeAngleXsdtDouble struct {
	LimitingConeAngle xsdt.Double `xml:"http://www.w3.org/2000/svg limitingConeAngle,attr"`
}

// XsdGoPkgHasAttrXXsdtDouble defines attribute XXsdtDouble
type XsdGoPkgHasAttrXXsdtDouble struct {
	X xsdt.Double `xml:"http://www.w3.org/2000/svg x,attr"`
}

// XsdGoPkgHasAttrZXsdtDouble defines attribute ZXsdtDouble
type XsdGoPkgHasAttrZXsdtDouble struct {
	Z xsdt.Double `xml:"http://www.w3.org/2000/svg z,attr"`
}

// XsdGoPkgHasAttrPointsAtXXsdtDouble defines attribute PointsAtXXsdtDouble
type XsdGoPkgHasAttrPointsAtXXsdtDouble struct {
	PointsAtX xsdt.Double `xml:"http://www.w3.org/2000/svg pointsAtX,attr"`
}

// XsdGoPkgHasAttrPointsAtZXsdtDouble defines attribute PointsAtZXsdtDouble
type XsdGoPkgHasAttrPointsAtZXsdtDouble struct {
	PointsAtZ xsdt.Double `xml:"http://www.w3.org/2000/svg pointsAtZ,attr"`
}

// TfeSpotLightType defines TfeSpotLightType
type TfeSpotLightType struct {
	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttrPointsAtXXsdtDouble

	XsdGoPkgHasAttrPointsAtZXsdtDouble

	XsdGoPkgHasAttrSpecularExponentXsdtDouble

	XsdGoPkgHasAttrLimitingConeAngleXsdtDouble

	XsdGoPkgHasAttrXXsdtDouble

	XsdGoPkgHasAttrZXsdtDouble

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrPointsAtYXsdtDouble

	XsdGoPkgHasAttrYXsdtDouble
}

// Walk : if the WalkHandlers.TfeSpotLightType function is not nil (ie. was set by outside code), calls it with this TfeSpotLightType instance as the single argument. Then calls the Walk() method on 2/11 embed(s) and 0/0 field(s) belonging to this TfeSpotLightType instance.
func (me *TfeSpotLightType) Walk() (err error) {
	if fn := WalkHandlers.TfeSpotLightType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeSpotLight defines XsdGoPkgHasElemFeSpotLight
type XsdGoPkgHasElemFeSpotLight struct {
	FeSpotLight *TfeSpotLightType `xml:"http://www.w3.org/2000/svg feSpotLight"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeSpotLight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeSpotLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeSpotLight instance.
func (me *XsdGoPkgHasElemFeSpotLight) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeSpotLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeSpotLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrSpecularConstantXsdtDouble defines attribute SpecularConstantXsdtDouble
type XsdGoPkgHasAttrSpecularConstantXsdtDouble struct {
	SpecularConstant xsdt.Double `xml:"http://www.w3.org/2000/svg specularConstant,attr"`
}

// TfePointLightType defines TfePointLightType
type TfePointLightType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrXXsdtDouble

	XsdGoPkgHasAttrYXsdtDouble

	XsdGoPkgHasAttrZXsdtDouble
}

// Walk : if the WalkHandlers.TfePointLightType function is not nil (ie. was set by outside code), calls it with this TfePointLightType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfePointLightType instance.
func (me *TfePointLightType) Walk() (err error) {
	if fn := WalkHandlers.TfePointLightType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFePointLight defines XsdGoPkgHasElemFePointLight
type XsdGoPkgHasElemFePointLight struct {
	FePointLight *TfePointLightType `xml:"http://www.w3.org/2000/svg fePointLight"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFePointLight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFePointLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFePointLight instance.
func (me *XsdGoPkgHasElemFePointLight) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFePointLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FePointLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrSurfaceScaleXsdtDouble defines attribute SurfaceScaleXsdtDouble
type XsdGoPkgHasAttrSurfaceScaleXsdtDouble struct {
	SurfaceScale xsdt.Double `xml:"http://www.w3.org/2000/svg surfaceScale,attr"`
}

// TfeSpecularLightingType defines TfeSpecularLightingType
type TfeSpecularLightingType struct {
	XsdGoPkgHasElemFePointLight

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrSurfaceScaleXsdtDouble

	XsdGoPkgHasAttrSpecularExponentXsdtDouble

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemFeDistantLight

	XsdGoPkgHasElemFeSpotLight

	XsdGoPkgHasAttsPresentationAttributesLightingEffects

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrSpecularConstantXsdtDouble
}

// Walk : if the WalkHandlers.TfeSpecularLightingType function is not nil (ie. was set by outside code), calls it with this TfeSpecularLightingType instance as the single argument. Then calls the Walk() method on 6/14 embed(s) and 0/0 field(s) belonging to this TfeSpecularLightingType instance.
func (me *TfeSpecularLightingType) Walk() (err error) {
	if fn := WalkHandlers.TfeSpecularLightingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemFePointLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemFeDistantLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemFeSpotLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeSpecularLighting defines XsdGoPkgHasElemsFeSpecularLighting
type XsdGoPkgHasElemsFeSpecularLighting struct {
	FeSpecularLightings []*TfeSpecularLightingType `xml:"http://www.w3.org/2000/svg feSpecularLighting"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeSpecularLighting function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeSpecularLighting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeSpecularLighting instance.
func (me *XsdGoPkgHasElemsFeSpecularLighting) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeSpecularLighting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeSpecularLightings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdFeTurbulenceTypeType defines TxsdFeTurbulenceTypeType
type TxsdFeTurbulenceTypeType xsdt.String

// Set : Since TxsdFeTurbulenceTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeTurbulenceTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeTurbulenceTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdFeTurbulenceTypeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeTurbulenceTypeType's alias type xsdt.String.
func (me TxsdFeTurbulenceTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsFractalNoise : Returns true if the value of this enumerated TxsdFeTurbulenceTypeType is "fractalNoise".
func (me TxsdFeTurbulenceTypeType) IsFractalNoise() bool { return me.String() == "fractalNoise" }

// IsTurbulence : Returns true if the value of this enumerated TxsdFeTurbulenceTypeType is "turbulence".
func (me TxsdFeTurbulenceTypeType) IsTurbulence() bool { return me.String() == "turbulence" }

// XsdGoPkgHasAttrTypeTxsdFeTurbulenceTypeTypeTurbulence defines attribute TypeTxsdFeTurbulenceTypeTypeTurbulence
type XsdGoPkgHasAttrTypeTxsdFeTurbulenceTypeTypeTurbulence struct {
	Type TxsdFeTurbulenceTypeType `xml:"http://www.w3.org/2000/svg type,attr"`
}

// TypeDefault : Returns the default value for Type -- "turbulence"
func (me XsdGoPkgHasAttrTypeTxsdFeTurbulenceTypeTypeTurbulence) TypeDefault() TxsdFeTurbulenceTypeType {
	return TxsdFeTurbulenceTypeType("turbulence")
}

// XsdGoPkgHasAttrBaseFrequencyXsdtString defines attribute BaseFrequencyXsdtString
type XsdGoPkgHasAttrBaseFrequencyXsdtString struct {
	BaseFrequency xsdt.String `xml:"http://www.w3.org/2000/svg baseFrequency,attr"`
}

// XsdGoPkgHasAttrSeedXsdtDouble defines attribute SeedXsdtDouble
type XsdGoPkgHasAttrSeedXsdtDouble struct {
	Seed xsdt.Double `xml:"http://www.w3.org/2000/svg seed,attr"`
}

// TxsdFeTurbulenceTypeStitchTiles defines TxsdFeTurbulenceTypeStitchTiles
type TxsdFeTurbulenceTypeStitchTiles xsdt.String

// String : Since TxsdFeTurbulenceTypeStitchTiles is just a simple String type, this merely returns the current string value.
func (me TxsdFeTurbulenceTypeStitchTiles) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeTurbulenceTypeStitchTiles's alias type xsdt.String.
func (me TxsdFeTurbulenceTypeStitchTiles) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsStitch : Returns true if the value of this enumerated TxsdFeTurbulenceTypeStitchTiles is "stitch".
func (me TxsdFeTurbulenceTypeStitchTiles) IsStitch() bool { return me.String() == "stitch" }

// IsNoStitch : Returns true if the value of this enumerated TxsdFeTurbulenceTypeStitchTiles is "noStitch".
func (me TxsdFeTurbulenceTypeStitchTiles) IsNoStitch() bool { return me.String() == "noStitch" }

// Set : Since TxsdFeTurbulenceTypeStitchTiles is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeTurbulenceTypeStitchTiles) Set(s string) { (*xsdt.String)(me).Set(s) }

// XsdGoPkgHasAttrStitchTilesTxsdFeTurbulenceTypeStitchTilesNoStitch defines attribute StitchTilesTxsdFeTurbulenceTypeStitchTilesNoStitch
type XsdGoPkgHasAttrStitchTilesTxsdFeTurbulenceTypeStitchTilesNoStitch struct {
	StitchTiles TxsdFeTurbulenceTypeStitchTiles `xml:"http://www.w3.org/2000/svg stitchTiles,attr"`
}

// StitchTilesDefault : Returns the default value for StitchTiles -- "noStitch"
func (me XsdGoPkgHasAttrStitchTilesTxsdFeTurbulenceTypeStitchTilesNoStitch) StitchTilesDefault() TxsdFeTurbulenceTypeStitchTiles {
	return TxsdFeTurbulenceTypeStitchTiles("noStitch")
}

// XsdGoPkgHasAttrNumOctavesXsdtInteger defines attribute NumOctavesXsdtInteger
type XsdGoPkgHasAttrNumOctavesXsdtInteger struct {
	NumOctaves xsdt.Integer `xml:"http://www.w3.org/2000/svg numOctaves,attr"`
}

// TfeTurbulenceType defines TfeTurbulenceType
type TfeTurbulenceType struct {
	XsdGoPkgHasAttrStitchTilesTxsdFeTurbulenceTypeStitchTilesNoStitch

	XsdGoPkgHasAttrTypeTxsdFeTurbulenceTypeTypeTurbulence

	XsdGoPkgHasAttrBaseFrequencyXsdtString

	XsdGoPkgHasAttrSeedXsdtDouble

	XsdGoPkgHasAttsFilterPrimitiveAttributes

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrNumOctavesXsdtInteger

	XsdGoPkgHasElemsAnimate
}

// Walk : if the WalkHandlers.TfeTurbulenceType function is not nil (ie. was set by outside code), calls it with this TfeTurbulenceType instance as the single argument. Then calls the Walk() method on 2/9 embed(s) and 0/0 field(s) belonging to this TfeTurbulenceType instance.
func (me *TfeTurbulenceType) Walk() (err error) {
	if fn := WalkHandlers.TfeTurbulenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeTurbulence defines XsdGoPkgHasElemsFeTurbulence
type XsdGoPkgHasElemsFeTurbulence struct {
	FeTurbulences []*TfeTurbulenceType `xml:"http://www.w3.org/2000/svg feTurbulence"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeTurbulence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeTurbulence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeTurbulence instance.
func (me *XsdGoPkgHasElemsFeTurbulence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeTurbulence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeTurbulences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrK4XsdtDouble defines attribute K4XsdtDouble
type XsdGoPkgHasAttrK4XsdtDouble struct {
	K4 xsdt.Double `xml:"http://www.w3.org/2000/svg k4,attr"`
}

// TxsdFeCompositeTypeOperator defines TxsdFeCompositeTypeOperator
type TxsdFeCompositeTypeOperator xsdt.String

// IsArithmetic : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "arithmetic".
func (me TxsdFeCompositeTypeOperator) IsArithmetic() bool { return me.String() == "arithmetic" }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeCompositeTypeOperator's alias type xsdt.String.
func (me TxsdFeCompositeTypeOperator) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsOut : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "out".
func (me TxsdFeCompositeTypeOperator) IsOut() bool { return me.String() == "out" }

// IsAtop : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "atop".
func (me TxsdFeCompositeTypeOperator) IsAtop() bool { return me.String() == "atop" }

// IsIn : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "in".
func (me TxsdFeCompositeTypeOperator) IsIn() bool { return me.String() == "in" }

// IsXor : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "xor".
func (me TxsdFeCompositeTypeOperator) IsXor() bool { return me.String() == "xor" }

// Set : Since TxsdFeCompositeTypeOperator is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeCompositeTypeOperator) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeCompositeTypeOperator is just a simple String type, this merely returns the current string value.
func (me TxsdFeCompositeTypeOperator) String() string { return xsdt.String(me).String() }

// IsOver : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "over".
func (me TxsdFeCompositeTypeOperator) IsOver() bool { return me.String() == "over" }

// XsdGoPkgHasAttrOperatorTxsdFeCompositeTypeOperatorOver defines attribute OperatorTxsdFeCompositeTypeOperatorOver
type XsdGoPkgHasAttrOperatorTxsdFeCompositeTypeOperatorOver struct {
	Operator TxsdFeCompositeTypeOperator `xml:"http://www.w3.org/2000/svg operator,attr"`
}

// OperatorDefault : Returns the default value for Operator -- "over"
func (me XsdGoPkgHasAttrOperatorTxsdFeCompositeTypeOperatorOver) OperatorDefault() TxsdFeCompositeTypeOperator {
	return TxsdFeCompositeTypeOperator("over")
}

// XsdGoPkgHasAttrK1XsdtDouble defines attribute K1XsdtDouble
type XsdGoPkgHasAttrK1XsdtDouble struct {
	K1 xsdt.Double `xml:"http://www.w3.org/2000/svg k1,attr"`
}

// XsdGoPkgHasAttrK3XsdtDouble defines attribute K3XsdtDouble
type XsdGoPkgHasAttrK3XsdtDouble struct {
	K3 xsdt.Double `xml:"http://www.w3.org/2000/svg k3,attr"`
}

// XsdGoPkgHasAttrK2XsdtDouble defines attribute K2XsdtDouble
type XsdGoPkgHasAttrK2XsdtDouble struct {
	K2 xsdt.Double `xml:"http://www.w3.org/2000/svg k2,attr"`
}

// TfeCompositeType defines TfeCompositeType
type TfeCompositeType struct {
	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn

	XsdGoPkgHasAttrIn2XsdtString

	XsdGoPkgHasAttrOperatorTxsdFeCompositeTypeOperatorOver

	XsdGoPkgHasAttrK1XsdtDouble

	XsdGoPkgHasAttrK4XsdtDouble

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrK2XsdtDouble

	XsdGoPkgHasAttrK3XsdtDouble
}

// Walk : if the WalkHandlers.TfeCompositeType function is not nil (ie. was set by outside code), calls it with this TfeCompositeType instance as the single argument. Then calls the Walk() method on 2/10 embed(s) and 0/0 field(s) belonging to this TfeCompositeType instance.
func (me *TfeCompositeType) Walk() (err error) {
	if fn := WalkHandlers.TfeCompositeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeComposite defines XsdGoPkgHasElemsFeComposite
type XsdGoPkgHasElemsFeComposite struct {
	FeComposites []*TfeCompositeType `xml:"http://www.w3.org/2000/svg feComposite"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeComposite function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeComposite instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeComposite instance.
func (me *XsdGoPkgHasElemsFeComposite) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeComposite; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeComposites {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrScaleXsdtDouble defines attribute ScaleXsdtDouble
type XsdGoPkgHasAttrScaleXsdtDouble struct {
	Scale xsdt.Double `xml:"http://www.w3.org/2000/svg scale,attr"`
}

// TxsdFeDisplacementMapTypeXChannelSelector defines TxsdFeDisplacementMapTypeXChannelSelector
type TxsdFeDisplacementMapTypeXChannelSelector xsdt.String

// IsB : Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "B".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsB() bool { return me.String() == "B" }

// IsA : Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "A".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsA() bool { return me.String() == "A" }

// Set : Since TxsdFeDisplacementMapTypeXChannelSelector is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeDisplacementMapTypeXChannelSelector) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeDisplacementMapTypeXChannelSelector is just a simple String type, this merely returns the current string value.
func (me TxsdFeDisplacementMapTypeXChannelSelector) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeDisplacementMapTypeXChannelSelector's alias type xsdt.String.
func (me TxsdFeDisplacementMapTypeXChannelSelector) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsR : Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "R".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsR() bool { return me.String() == "R" }

// IsG : Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "G".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsG() bool { return me.String() == "G" }

// XsdGoPkgHasAttrXChannelSelectorTxsdFeDisplacementMapTypeXChannelSelectorA defines attribute XChannelSelectorTxsdFeDisplacementMapTypeXChannelSelectorA
type XsdGoPkgHasAttrXChannelSelectorTxsdFeDisplacementMapTypeXChannelSelectorA struct {
	XChannelSelector TxsdFeDisplacementMapTypeXChannelSelector `xml:"http://www.w3.org/2000/svg xChannelSelector,attr"`
}

// XChannelSelectorDefault : Returns the default value for XChannelSelector -- "A"
func (me XsdGoPkgHasAttrXChannelSelectorTxsdFeDisplacementMapTypeXChannelSelectorA) XChannelSelectorDefault() TxsdFeDisplacementMapTypeXChannelSelector {
	return TxsdFeDisplacementMapTypeXChannelSelector("A")
}

// XsdGoPkgHasAttrYChannelSelectorTxsdFeDisplacementMapTypeYChannelSelectorA defines attribute YChannelSelectorTxsdFeDisplacementMapTypeYChannelSelectorA
type XsdGoPkgHasAttrYChannelSelectorTxsdFeDisplacementMapTypeYChannelSelectorA struct {
	YChannelSelector TxsdFeDisplacementMapTypeXChannelSelector `xml:"http://www.w3.org/2000/svg yChannelSelector,attr"`
}

// YChannelSelectorDefault : Returns the default value for YChannelSelector -- "A"
func (me XsdGoPkgHasAttrYChannelSelectorTxsdFeDisplacementMapTypeYChannelSelectorA) YChannelSelectorDefault() TxsdFeDisplacementMapTypeXChannelSelector {
	return TxsdFeDisplacementMapTypeXChannelSelector("A")
}

// TfeDisplacementMapType defines TfeDisplacementMapType
type TfeDisplacementMapType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn

	XsdGoPkgHasAttrIn2XsdtString

	XsdGoPkgHasAttrScaleXsdtDouble

	XsdGoPkgHasAttrXChannelSelectorTxsdFeDisplacementMapTypeXChannelSelectorA

	XsdGoPkgHasAttrYChannelSelectorTxsdFeDisplacementMapTypeYChannelSelectorA
}

// Walk : if the WalkHandlers.TfeDisplacementMapType function is not nil (ie. was set by outside code), calls it with this TfeDisplacementMapType instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TfeDisplacementMapType instance.
func (me *TfeDisplacementMapType) Walk() (err error) {
	if fn := WalkHandlers.TfeDisplacementMapType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeDisplacementMap defines XsdGoPkgHasElemsFeDisplacementMap
type XsdGoPkgHasElemsFeDisplacementMap struct {
	FeDisplacementMaps []*TfeDisplacementMapType `xml:"http://www.w3.org/2000/svg feDisplacementMap"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeDisplacementMap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeDisplacementMap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeDisplacementMap instance.
func (me *XsdGoPkgHasElemsFeDisplacementMap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeDisplacementMap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeDisplacementMaps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdFeColorMatrixTypeType defines TxsdFeColorMatrixTypeType
type TxsdFeColorMatrixTypeType xsdt.String

// IsLuminanceToAlpha : Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "luminanceToAlpha".
func (me TxsdFeColorMatrixTypeType) IsLuminanceToAlpha() bool {
	return me.String() == "luminanceToAlpha"
}

// Set : Since TxsdFeColorMatrixTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeColorMatrixTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeColorMatrixTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdFeColorMatrixTypeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeColorMatrixTypeType's alias type xsdt.String.
func (me TxsdFeColorMatrixTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsMatrix : Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "matrix".
func (me TxsdFeColorMatrixTypeType) IsMatrix() bool { return me.String() == "matrix" }

// IsSaturate : Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "saturate".
func (me TxsdFeColorMatrixTypeType) IsSaturate() bool { return me.String() == "saturate" }

// IsHueRotate : Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "hueRotate".
func (me TxsdFeColorMatrixTypeType) IsHueRotate() bool { return me.String() == "hueRotate" }

// XsdGoPkgHasAttrTypeTxsdFeColorMatrixTypeTypeMatrix defines attribute TypeTxsdFeColorMatrixTypeTypeMatrix
type XsdGoPkgHasAttrTypeTxsdFeColorMatrixTypeTypeMatrix struct {
	Type TxsdFeColorMatrixTypeType `xml:"http://www.w3.org/2000/svg type,attr"`
}

// TypeDefault : Returns the default value for Type -- "matrix"
func (me XsdGoPkgHasAttrTypeTxsdFeColorMatrixTypeTypeMatrix) TypeDefault() TxsdFeColorMatrixTypeType {
	return TxsdFeColorMatrixTypeType("matrix")
}

// TfeColorMatrixType defines TfeColorMatrixType
type TfeColorMatrixType struct {
	XsdGoPkgHasAttrValuesXsdtString

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn

	XsdGoPkgHasAttrTypeTxsdFeColorMatrixTypeTypeMatrix
}

// Walk : if the WalkHandlers.TfeColorMatrixType function is not nil (ie. was set by outside code), calls it with this TfeColorMatrixType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfeColorMatrixType instance.
func (me *TfeColorMatrixType) Walk() (err error) {
	if fn := WalkHandlers.TfeColorMatrixType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeColorMatrix defines XsdGoPkgHasElemsFeColorMatrix
type XsdGoPkgHasElemsFeColorMatrix struct {
	FeColorMatrixs []*TfeColorMatrixType `xml:"http://www.w3.org/2000/svg feColorMatrix"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeColorMatrix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeColorMatrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeColorMatrix instance.
func (me *XsdGoPkgHasElemsFeColorMatrix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeColorMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeColorMatrixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdFeMorphologyTypeOperator defines TxsdFeMorphologyTypeOperator
type TxsdFeMorphologyTypeOperator xsdt.String

// IsErode : Returns true if the value of this enumerated TxsdFeMorphologyTypeOperator is "erode".
func (me TxsdFeMorphologyTypeOperator) IsErode() bool { return me.String() == "erode" }

// IsDilate : Returns true if the value of this enumerated TxsdFeMorphologyTypeOperator is "dilate".
func (me TxsdFeMorphologyTypeOperator) IsDilate() bool { return me.String() == "dilate" }

// Set : Since TxsdFeMorphologyTypeOperator is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeMorphologyTypeOperator) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeMorphologyTypeOperator is just a simple String type, this merely returns the current string value.
func (me TxsdFeMorphologyTypeOperator) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeMorphologyTypeOperator's alias type xsdt.String.
func (me TxsdFeMorphologyTypeOperator) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrOperatorTxsdFeMorphologyTypeOperatorErode defines attribute OperatorTxsdFeMorphologyTypeOperatorErode
type XsdGoPkgHasAttrOperatorTxsdFeMorphologyTypeOperatorErode struct {
	Operator TxsdFeMorphologyTypeOperator `xml:"http://www.w3.org/2000/svg operator,attr"`
}

// OperatorDefault : Returns the default value for Operator -- "erode"
func (me XsdGoPkgHasAttrOperatorTxsdFeMorphologyTypeOperatorErode) OperatorDefault() TxsdFeMorphologyTypeOperator {
	return TxsdFeMorphologyTypeOperator("erode")
}

// XsdGoPkgHasAttrRadiusTLengthType defines attribute RadiusTLengthType
type XsdGoPkgHasAttrRadiusTLengthType struct {
	Radius TLengthType `xml:"http://www.w3.org/2000/svg radius,attr"`
}

// TfeMorphologyType defines TfeMorphologyType
type TfeMorphologyType struct {
	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn

	XsdGoPkgHasAttrOperatorTxsdFeMorphologyTypeOperatorErode

	XsdGoPkgHasAttrRadiusTLengthType

	XsdGoPkgHasElemsAnimate
}

// Walk : if the WalkHandlers.TfeMorphologyType function is not nil (ie. was set by outside code), calls it with this TfeMorphologyType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfeMorphologyType instance.
func (me *TfeMorphologyType) Walk() (err error) {
	if fn := WalkHandlers.TfeMorphologyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeMorphology defines XsdGoPkgHasElemsFeMorphology
type XsdGoPkgHasElemsFeMorphology struct {
	FeMorphologies []*TfeMorphologyType `xml:"http://www.w3.org/2000/svg feMorphology"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeMorphology function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeMorphology instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeMorphology instance.
func (me *XsdGoPkgHasElemsFeMorphology) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeMorphology; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeMorphologies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfeTileType defines TfeTileType
type TfeTileType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn

	XsdGoPkgHasAttsStdAttrs
}

// Walk : if the WalkHandlers.TfeTileType function is not nil (ie. was set by outside code), calls it with this TfeTileType instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TfeTileType instance.
func (me *TfeTileType) Walk() (err error) {
	if fn := WalkHandlers.TfeTileType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeTile defines XsdGoPkgHasElemsFeTile
type XsdGoPkgHasElemsFeTile struct {
	FeTiles []*TfeTileType `xml:"http://www.w3.org/2000/svg feTile"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeTile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeTile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeTile instance.
func (me *XsdGoPkgHasElemsFeTile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeTile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeTiles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrDiffuseConstantXsdtDouble defines attribute DiffuseConstantXsdtDouble
type XsdGoPkgHasAttrDiffuseConstantXsdtDouble struct {
	DiffuseConstant xsdt.Double `xml:"http://www.w3.org/2000/svg diffuseConstant,attr"`
}

// TfeDiffuseLightingType defines TfeDiffuseLightingType
type TfeDiffuseLightingType struct {
	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsPresentationAttributesLightingEffects

	XsdGoPkgHasElemFeDistantLight

	XsdGoPkgHasElemFeSpotLight

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrSurfaceScaleXsdtDouble

	XsdGoPkgHasAttrDiffuseConstantXsdtDouble

	XsdGoPkgHasElemFePointLight

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn
}

// Walk : if the WalkHandlers.TfeDiffuseLightingType function is not nil (ie. was set by outside code), calls it with this TfeDiffuseLightingType instance as the single argument. Then calls the Walk() method on 6/13 embed(s) and 0/0 field(s) belonging to this TfeDiffuseLightingType instance.
func (me *TfeDiffuseLightingType) Walk() (err error) {
	if fn := WalkHandlers.TfeDiffuseLightingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemFeDistantLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemFeSpotLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemFePointLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeDiffuseLighting defines XsdGoPkgHasElemsFeDiffuseLighting
type XsdGoPkgHasElemsFeDiffuseLighting struct {
	FeDiffuseLightings []*TfeDiffuseLightingType `xml:"http://www.w3.org/2000/svg feDiffuseLighting"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeDiffuseLighting function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeDiffuseLighting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeDiffuseLighting instance.
func (me *XsdGoPkgHasElemsFeDiffuseLighting) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeDiffuseLighting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeDiffuseLightings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfeImageType defines TfeImageType
type TfeImageType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttsFilterPrimitiveAttributes

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttsPresentationAttributesAll

	xlink.XsdGoPkgHasAttrHref
}

// Walk : if the WalkHandlers.TfeImageType function is not nil (ie. was set by outside code), calls it with this TfeImageType instance as the single argument. Then calls the Walk() method on 3/13 embed(s) and 0/0 field(s) belonging to this TfeImageType instance.
func (me *TfeImageType) Walk() (err error) {
	if fn := WalkHandlers.TfeImageType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeImage defines XsdGoPkgHasElemsFeImage
type XsdGoPkgHasElemsFeImage struct {
	FeImages []*TfeImageType `xml:"http://www.w3.org/2000/svg feImage"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeImage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeImage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeImage instance.
func (me *XsdGoPkgHasElemsFeImage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeImages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrDxTLengthType defines attribute DxTLengthType
type XsdGoPkgHasAttrDxTLengthType struct {
	Dx TLengthType `xml:"http://www.w3.org/2000/svg dx,attr"`
}

// XsdGoPkgHasAttrDyTLengthType defines attribute DyTLengthType
type XsdGoPkgHasAttrDyTLengthType struct {
	Dy TLengthType `xml:"http://www.w3.org/2000/svg dy,attr"`
}

// TfeOffsetType defines TfeOffsetType
type TfeOffsetType struct {
	XsdGoPkgHasAttrDxTLengthType

	XsdGoPkgHasAttrDyTLengthType

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsFilterPrimitiveAttributesWithIn
}

// Walk : if the WalkHandlers.TfeOffsetType function is not nil (ie. was set by outside code), calls it with this TfeOffsetType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfeOffsetType instance.
func (me *TfeOffsetType) Walk() (err error) {
	if fn := WalkHandlers.TfeOffsetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeOffset defines XsdGoPkgHasElemsFeOffset
type XsdGoPkgHasElemsFeOffset struct {
	FeOffsets []*TfeOffsetType `xml:"http://www.w3.org/2000/svg feOffset"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeOffset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeOffset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeOffset instance.
func (me *XsdGoPkgHasElemsFeOffset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeOffset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeOffsets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrFilterResXsdtString defines attribute FilterResXsdtString
type XsdGoPkgHasAttrFilterResXsdtString struct {
	FilterRes xsdt.String `xml:"http://www.w3.org/2000/svg filterRes,attr"`
}

// TfeMergeNodeType defines TfeMergeNodeType
type TfeMergeNodeType struct {
	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrInXsdtString
}

// Walk : if the WalkHandlers.TfeMergeNodeType function is not nil (ie. was set by outside code), calls it with this TfeMergeNodeType instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TfeMergeNodeType instance.
func (me *TfeMergeNodeType) Walk() (err error) {
	if fn := WalkHandlers.TfeMergeNodeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeMergeNode defines XsdGoPkgHasElemsFeMergeNode
type XsdGoPkgHasElemsFeMergeNode struct {
	FeMergeNodes []*TfeMergeNodeType `xml:"http://www.w3.org/2000/svg feMergeNode"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeMergeNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeMergeNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeMergeNode instance.
func (me *XsdGoPkgHasElemsFeMergeNode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeMergeNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeMergeNodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfeMergeType defines TfeMergeType
type TfeMergeType struct {
	XsdGoPkgHasElemsFeMergeNode

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsFilterPrimitiveAttributes
}

// Walk : if the WalkHandlers.TfeMergeType function is not nil (ie. was set by outside code), calls it with this TfeMergeType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TfeMergeType instance.
func (me *TfeMergeType) Walk() (err error) {
	if fn := WalkHandlers.TfeMergeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsFeMergeNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeMerge defines XsdGoPkgHasElemsFeMerge
type XsdGoPkgHasElemsFeMerge struct {
	FeMerges []*TfeMergeType `xml:"http://www.w3.org/2000/svg feMerge"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeMerge function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeMerge instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeMerge instance.
func (me *XsdGoPkgHasElemsFeMerge) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeMerge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeMerges {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrFilterUnitsTxsdFilterTypeFilterUnits defines attribute FilterUnitsTxsdFilterTypeFilterUnits
type XsdGoPkgHasAttrFilterUnitsTxsdFilterTypeFilterUnits struct {
	FilterUnits TxsdClipPathTypeClipPathUnits `xml:"http://www.w3.org/2000/svg filterUnits,attr"`
}

// TfilterType defines TfilterType
type TfilterType struct {
	XsdGoPkgHasElemsFeGaussianBlur

	XsdGoPkgHasElemsFeSpecularLighting

	XsdGoPkgHasElemsFeTurbulence

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrPrimitiveUnitsTxsdFilterTypePrimitiveUnits

	XsdGoPkgHasElemsFeComposite

	XsdGoPkgHasElemsFeDisplacementMap

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsFeColorMatrix

	XsdGoPkgHasElemsFeMorphology

	XsdGoPkgHasAttrHeightTLengthType

	XsdGoPkgHasElemsFeDiffuseLighting

	XsdGoPkgHasElemsFeImage

	XsdGoPkgHasElemsFeOffset

	XsdGoPkgHasElemsFeTile

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrWidthTLengthType

	XsdGoPkgHasElemsFeMerge

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttrFilterUnitsTxsdFilterTypeFilterUnits

	XsdGoPkgHasAttrYTCoordinateType

	XsdGoPkgHasAttrFilterResXsdtString

	XsdGoPkgHasElemsFeBlend

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrClassTClassListType

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasElemsFeComponentTransfer

	XsdGoPkgHasElemsFeConvolveMatrix

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasElemsFeFlood

	XsdGoPkgHasAttrXTCoordinateType
}

// Walk : if the WalkHandlers.TfilterType function is not nil (ie. was set by outside code), calls it with this TfilterType instance as the single argument. Then calls the Walk() method on 19/34 embed(s) and 0/0 field(s) belonging to this TfilterType instance.
func (me *TfilterType) Walk() (err error) {
	if fn := WalkHandlers.TfilterType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsFeColorMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeMorphology.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeDiffuseLighting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeOffset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeTile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeMerge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeBlend.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeComponentTransfer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeConvolveMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeFlood.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeGaussianBlur.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeSpecularLighting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeTurbulence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeComposite.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFeDisplacementMap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFilter defines XsdGoPkgHasElemsFilter
type XsdGoPkgHasElemsFilter struct {
	Filters []*TfilterType `xml:"http://www.w3.org/2000/svg filter"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFilter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFilter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFilter instance.
func (me *XsdGoPkgHasElemsFilter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFilter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Filters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrMarkerWidthTLengthType defines attribute MarkerWidthTLengthType
type XsdGoPkgHasAttrMarkerWidthTLengthType struct {
	MarkerWidth TLengthType `xml:"http://www.w3.org/2000/svg markerWidth,attr"`
}

// XsdGoPkgHasAttrRefYTCoordinateType defines attribute RefYTCoordinateType
type XsdGoPkgHasAttrRefYTCoordinateType struct {
	RefY TCoordinateType `xml:"http://www.w3.org/2000/svg refY,attr"`
}

// XsdGoPkgHasAttrOrientXsdtString defines attribute OrientXsdtString
type XsdGoPkgHasAttrOrientXsdtString struct {
	Orient xsdt.String `xml:"http://www.w3.org/2000/svg orient,attr"`
}

// TforeignObjectType defines TforeignObjectType
type TforeignObjectType struct {
	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrXTCoordinateType

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrHeightTLengthType

	XsdGoPkgHasCdata

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrYTCoordinateType

	XsdGoPkgHasAttrContentXsdtStringStructuredText

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrWidthTLengthType

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrTransformTransformListType
}

// Walk : if the WalkHandlers.TforeignObjectType function is not nil (ie. was set by outside code), calls it with this TforeignObjectType instance as the single argument. Then calls the Walk() method on 1/15 embed(s) and 0/0 field(s) belonging to this TforeignObjectType instance.
func (me *TforeignObjectType) Walk() (err error) {
	if fn := WalkHandlers.TforeignObjectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsForeignObject defines XsdGoPkgHasElemsForeignObject
type XsdGoPkgHasElemsForeignObject struct {
	ForeignObjects []*TforeignObjectType `xml:"http://www.w3.org/2000/svg foreignObject"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsForeignObject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsForeignObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsForeignObject instance.
func (me *XsdGoPkgHasElemsForeignObject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsForeignObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForeignObjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TlineType defines TlineType
type TlineType struct {
	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasAttrY1TCoordinateType

	XsdGoPkgHasAttrX2TCoordinateType

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasAttsPresentationAttributesMarkers

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrX1TCoordinateType

	XsdGoPkgHasAttrY2TCoordinateType

	XsdGoPkgHasAttrStyleTStyleSheetType
}

// Walk : if the WalkHandlers.TlineType function is not nil (ie. was set by outside code), calls it with this TlineType instance as the single argument. Then calls the Walk() method on 6/22 embed(s) and 0/0 field(s) belonging to this TlineType instance.
func (me *TlineType) Walk() (err error) {
	if fn := WalkHandlers.TlineType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsLine defines XsdGoPkgHasElemsLine
type XsdGoPkgHasElemsLine struct {
	Lines []*TlineType `xml:"http://www.w3.org/2000/svg line"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsLine function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsLine instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsLine instance.
func (me *XsdGoPkgHasElemsLine) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TswitchType defines TswitchType
type TswitchType struct {
	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsForeignObject

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsUse

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsPath

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttrTransformTransformListType
}

// Walk : if the WalkHandlers.TswitchType function is not nil (ie. was set by outside code), calls it with this TswitchType instance as the single argument. Then calls the Walk() method on 17/30 embed(s) and 0/0 field(s) belonging to this TswitchType instance.
func (me *TswitchType) Walk() (err error) {
	if fn := WalkHandlers.TswitchType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsForeignObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSwitch defines XsdGoPkgHasElemsSwitch
type XsdGoPkgHasElemsSwitch struct {
	Switchs []*TswitchType `xml:"http://www.w3.org/2000/svg switch"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSwitch function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSwitch instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSwitch instance.
func (me *XsdGoPkgHasElemsSwitch) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSwitch; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Switchs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrGradientUnitsTxsdRadialGradientTypeGradientUnits defines attribute GradientUnitsTxsdRadialGradientTypeGradientUnits
type XsdGoPkgHasAttrGradientUnitsTxsdRadialGradientTypeGradientUnits struct {
	GradientUnits TxsdClipPathTypeClipPathUnits `xml:"http://www.w3.org/2000/svg gradientUnits,attr"`
}

// XsdGoPkgHasAttrFxTCoordinateType defines attribute FxTCoordinateType
type XsdGoPkgHasAttrFxTCoordinateType struct {
	Fx TCoordinateType `xml:"http://www.w3.org/2000/svg fx,attr"`
}

// XsdGoPkgHasAttrSpreadMethodTxsdRadialGradientTypeSpreadMethodPad defines attribute SpreadMethodTxsdRadialGradientTypeSpreadMethodPad
type XsdGoPkgHasAttrSpreadMethodTxsdRadialGradientTypeSpreadMethodPad struct {
	SpreadMethod TxsdLinearGradientTypeSpreadMethod `xml:"http://www.w3.org/2000/svg spreadMethod,attr"`
}

// SpreadMethodDefault : Returns the default value for SpreadMethod -- "pad"
func (me XsdGoPkgHasAttrSpreadMethodTxsdRadialGradientTypeSpreadMethodPad) SpreadMethodDefault() TxsdLinearGradientTypeSpreadMethod {
	return TxsdLinearGradientTypeSpreadMethod("pad")
}

// XsdGoPkgHasAttrFyTCoordinateType defines attribute FyTCoordinateType
type XsdGoPkgHasAttrFyTCoordinateType struct {
	Fy TCoordinateType `xml:"http://www.w3.org/2000/svg fy,attr"`
}

// TradialGradientType defines TradialGradientType
type TradialGradientType struct {
	XsdGoPkgHasAttrSpreadMethodTxsdRadialGradientTypeSpreadMethodPad

	XsdGoPkgHasAttrCxTCoordinateType

	XsdGoPkgHasAttrFyTCoordinateType

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttrFxTCoordinateType

	XsdGoPkgHasElemsStop

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttrGradientTransformTransformListType

	XsdGoPkgHasAttrCyTCoordinateType

	XsdGoPkgHasAttrGradientUnitsTxsdRadialGradientTypeGradientUnits

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrRTLengthType

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasGroupDescTitleMetadata
}

// Walk : if the WalkHandlers.TradialGradientType function is not nil (ie. was set by outside code), calls it with this TradialGradientType instance as the single argument. Then calls the Walk() method on 5/17 embed(s) and 0/0 field(s) belonging to this TradialGradientType instance.
func (me *TradialGradientType) Walk() (err error) {
	if fn := WalkHandlers.TradialGradientType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsStop.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRadialGradient defines XsdGoPkgHasElemsRadialGradient
type XsdGoPkgHasElemsRadialGradient struct {
	RadialGradients []*TradialGradientType `xml:"http://www.w3.org/2000/svg radialGradient"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRadialGradient function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRadialGradient instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRadialGradient instance.
func (me *XsdGoPkgHasElemsRadialGradient) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRadialGradient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RadialGradients {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrGlyphRefXsdtString defines attribute GlyphRefXsdtString
type XsdGoPkgHasAttrGlyphRefXsdtString struct {
	GlyphRef xsdt.String `xml:"http://www.w3.org/2000/svg glyphRef,attr"`
}

// XsdGoPkgHasAttrFormatXsdtString defines attribute FormatXsdtString
type XsdGoPkgHasAttrFormatXsdtString struct {
	Format xsdt.String `xml:"http://www.w3.org/2000/svg format,attr"`
}

// TglyphRefType defines TglyphRefType
type TglyphRefType struct {
	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrXTCoordinatesType

	XsdGoPkgHasAttrYTCoordinatesType

	XsdGoPkgHasAttrDxTLengthsType

	XsdGoPkgHasAttrGlyphRefXsdtString

	XsdGoPkgHasAttrDyTLengthsType

	XsdGoPkgHasAttsPresentationAttributesFontSpecification

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrFormatXsdtString

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsXlinkRefAttrs
}

// Walk : if the WalkHandlers.TglyphRefType function is not nil (ie. was set by outside code), calls it with this TglyphRefType instance as the single argument. Then calls the Walk() method on 0/12 embed(s) and 0/0 field(s) belonging to this TglyphRefType instance.
func (me *TglyphRefType) Walk() (err error) {
	if fn := WalkHandlers.TglyphRefType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsGlyphRef defines XsdGoPkgHasElemsGlyphRef
type XsdGoPkgHasElemsGlyphRef struct {
	GlyphRefs []*TglyphRefType `xml:"http://www.w3.org/2000/svg glyphRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsGlyphRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsGlyphRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsGlyphRef instance.
func (me *XsdGoPkgHasElemsGlyphRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsGlyphRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GlyphRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TaltGlyphItemType defines TaltGlyphItemType
type TaltGlyphItemType struct {
	XsdGoPkgHasElemsGlyphRef

	XsdGoPkgHasAttsStdAttrs
}

// Walk : if the WalkHandlers.TaltGlyphItemType function is not nil (ie. was set by outside code), calls it with this TaltGlyphItemType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TaltGlyphItemType instance.
func (me *TaltGlyphItemType) Walk() (err error) {
	if fn := WalkHandlers.TaltGlyphItemType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsGlyphRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAltGlyphItem defines XsdGoPkgHasElemsAltGlyphItem
type XsdGoPkgHasElemsAltGlyphItem struct {
	AltGlyphItems []*TaltGlyphItemType `xml:"http://www.w3.org/2000/svg altGlyphItem"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAltGlyphItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAltGlyphItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAltGlyphItem instance.
func (me *XsdGoPkgHasElemsAltGlyphItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAltGlyphItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AltGlyphItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TaltGlyphDefType defines TaltGlyphDefType
type TaltGlyphDefType struct {
	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasElemsAltGlyphItem

	XsdGoPkgHasElemsGlyphRef
}

// Walk : if the WalkHandlers.TaltGlyphDefType function is not nil (ie. was set by outside code), calls it with this TaltGlyphDefType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TaltGlyphDefType instance.
func (me *TaltGlyphDefType) Walk() (err error) {
	if fn := WalkHandlers.TaltGlyphDefType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAltGlyphItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsGlyphRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAltGlyphDef defines XsdGoPkgHasElemsAltGlyphDef
type XsdGoPkgHasElemsAltGlyphDef struct {
	AltGlyphDefs []*TaltGlyphDefType `xml:"http://www.w3.org/2000/svg altGlyphDef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAltGlyphDef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAltGlyphDef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAltGlyphDef instance.
func (me *XsdGoPkgHasElemsAltGlyphDef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAltGlyphDef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AltGlyphDefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrMarkerHeightTLengthType defines attribute MarkerHeightTLengthType
type XsdGoPkgHasAttrMarkerHeightTLengthType struct {
	MarkerHeight TLengthType `xml:"http://www.w3.org/2000/svg markerHeight,attr"`
}

// XsdGoPkgHasAttrU1XsdtString defines attribute U1XsdtString
type XsdGoPkgHasAttrU1XsdtString struct {
	U1 xsdt.String `xml:"http://www.w3.org/2000/svg u1,attr"`
}

// XsdGoPkgHasAttrG1XsdtString defines attribute G1XsdtString
type XsdGoPkgHasAttrG1XsdtString struct {
	G1 xsdt.String `xml:"http://www.w3.org/2000/svg g1,attr"`
}

// XsdGoPkgHasAttrU2XsdtString defines attribute U2XsdtString
type XsdGoPkgHasAttrU2XsdtString struct {
	U2 xsdt.String `xml:"http://www.w3.org/2000/svg u2,attr"`
}

// XsdGoPkgHasAttrG2XsdtString defines attribute G2XsdtString
type XsdGoPkgHasAttrG2XsdtString struct {
	G2 xsdt.String `xml:"http://www.w3.org/2000/svg g2,attr"`
}

// XsdGoPkgHasAttrKXsdtDouble defines attribute KXsdtDouble
type XsdGoPkgHasAttrKXsdtDouble struct {
	K xsdt.Double `xml:"http://www.w3.org/2000/svg k,attr"`
}

// TvkernType defines TvkernType
type TvkernType struct {
	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrU1XsdtString

	XsdGoPkgHasAttrG1XsdtString

	XsdGoPkgHasAttrU2XsdtString

	XsdGoPkgHasAttrG2XsdtString

	XsdGoPkgHasAttrKXsdtDouble
}

// Walk : if the WalkHandlers.TvkernType function is not nil (ie. was set by outside code), calls it with this TvkernType instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TvkernType instance.
func (me *TvkernType) Walk() (err error) {
	if fn := WalkHandlers.TvkernType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsVkern defines XsdGoPkgHasElemsVkern
type XsdGoPkgHasElemsVkern struct {
	Vkerns []*TvkernType `xml:"http://www.w3.org/2000/svg vkern"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsVkern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsVkern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsVkern instance.
func (me *XsdGoPkgHasElemsVkern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsVkern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Vkerns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrVertAdvYXsdtDouble defines attribute VertAdvYXsdtDouble
type XsdGoPkgHasAttrVertAdvYXsdtDouble struct {
	VertAdvY xsdt.Double `xml:"http://www.w3.org/2000/svg vert-adv-y,attr"`
}

// TxsdViewTypeZoomAndPan defines TxsdViewTypeZoomAndPan
type TxsdViewTypeZoomAndPan xsdt.String

// Set : Since TxsdViewTypeZoomAndPan is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdViewTypeZoomAndPan) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdViewTypeZoomAndPan is just a simple String type, this merely returns the current string value.
func (me TxsdViewTypeZoomAndPan) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdViewTypeZoomAndPan's alias type xsdt.String.
func (me TxsdViewTypeZoomAndPan) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsDisable : Returns true if the value of this enumerated TxsdViewTypeZoomAndPan is "disable".
func (me TxsdViewTypeZoomAndPan) IsDisable() bool { return me.String() == "disable" }

// IsMagnify : Returns true if the value of this enumerated TxsdViewTypeZoomAndPan is "magnify".
func (me TxsdViewTypeZoomAndPan) IsMagnify() bool { return me.String() == "magnify" }

// IsZoom : Returns true if the value of this enumerated TxsdViewTypeZoomAndPan is "zoom".
func (me TxsdViewTypeZoomAndPan) IsZoom() bool { return me.String() == "zoom" }

// XsdGoPkgHasAttrZoomAndPanTxsdViewTypeZoomAndPanMagnify defines attribute ZoomAndPanTxsdViewTypeZoomAndPanMagnify
type XsdGoPkgHasAttrZoomAndPanTxsdViewTypeZoomAndPanMagnify struct {
	ZoomAndPan TxsdViewTypeZoomAndPan `xml:"http://www.w3.org/2000/svg zoomAndPan,attr"`
}

// ZoomAndPanDefault : Returns the default value for ZoomAndPan -- "magnify"
func (me XsdGoPkgHasAttrZoomAndPanTxsdViewTypeZoomAndPanMagnify) ZoomAndPanDefault() TxsdViewTypeZoomAndPan {
	return TxsdViewTypeZoomAndPan("magnify")
}

// XsdGoPkgHasAttrViewTargetXsdtString defines attribute ViewTargetXsdtString
type XsdGoPkgHasAttrViewTargetXsdtString struct {
	ViewTarget xsdt.String `xml:"http://www.w3.org/2000/svg viewTarget,attr"`
}

// TviewType defines TviewType
type TviewType struct {
	XsdGoPkgHasAttrViewBoxTViewBoxSpecType

	XsdGoPkgHasAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet

	XsdGoPkgHasAttrZoomAndPanTxsdViewTypeZoomAndPanMagnify

	XsdGoPkgHasAttrViewTargetXsdtString

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean
}

// Walk : if the WalkHandlers.TviewType function is not nil (ie. was set by outside code), calls it with this TviewType instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TviewType instance.
func (me *TviewType) Walk() (err error) {
	if fn := WalkHandlers.TviewType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsView defines XsdGoPkgHasElemsView
type XsdGoPkgHasElemsView struct {
	Views []*TviewType `xml:"http://www.w3.org/2000/svg view"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsView function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsView instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsView instance.
func (me *XsdGoPkgHasElemsView) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsView; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Views {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrHorizAdvXXsdtDouble defines attribute HorizAdvXXsdtDouble
type XsdGoPkgHasAttrHorizAdvXXsdtDouble struct {
	HorizAdvX xsdt.Double `xml:"http://www.w3.org/2000/svg horiz-adv-x,attr"`
}

// TmissingGlyphType defines TmissingGlyphType
type TmissingGlyphType struct {
	XsdGoPkgHasElemsSymbol

	XsdGoPkgHasElemsLinearGradient

	XsdGoPkgHasElemsFilter

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrHorizAdvXXsdtDouble

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsAltGlyphDef

	XsdGoPkgHasElemsFont

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsUse

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasElemsRadialGradient

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsCursor

	XsdGoPkgHasElemsColorProfile

	XsdGoPkgHasElemsFontFace

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrVertAdvYXsdtDouble

	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsStyle

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsScript

	XsdGoPkgHasElemsClipPath

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrDTPathDataType

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsPattern

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsMarker

	XsdGoPkgHasElemsView

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasElemsDefs

	XsdGoPkgHasElemsMask
}

// Walk : if the WalkHandlers.TmissingGlyphType function is not nil (ie. was set by outside code), calls it with this TmissingGlyphType instance as the single argument. Then calls the Walk() method on 29/46 embed(s) and 0/0 field(s) belonging to this TmissingGlyphType instance.
func (me *TmissingGlyphType) Walk() (err error) {
	if fn := WalkHandlers.TmissingGlyphType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemMissingGlyph defines XsdGoPkgHasElemMissingGlyph
type XsdGoPkgHasElemMissingGlyph struct {
	MissingGlyph *TmissingGlyphType `xml:"http://www.w3.org/2000/svg missing-glyph"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemMissingGlyph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemMissingGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemMissingGlyph instance.
func (me *XsdGoPkgHasElemMissingGlyph) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemMissingGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MissingGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrVertOriginYXsdtDouble defines attribute VertOriginYXsdtDouble
type XsdGoPkgHasAttrVertOriginYXsdtDouble struct {
	VertOriginY xsdt.Double `xml:"http://www.w3.org/2000/svg vert-origin-y,attr"`
}

// XsdGoPkgHasAttrHanXsdtString defines attribute HanXsdtString
type XsdGoPkgHasAttrHanXsdtString struct {
	Han xsdt.String `xml:"http://www.w3.org/2000/svg han,attr"`
}

// XsdGoPkgHasAttrArabicXsdtString defines attribute ArabicXsdtString
type XsdGoPkgHasAttrArabicXsdtString struct {
	Arabic xsdt.String `xml:"http://www.w3.org/2000/svg arabic,attr"`
}

// XsdGoPkgHasAttrGlyphNameXsdtString defines attribute GlyphNameXsdtString
type XsdGoPkgHasAttrGlyphNameXsdtString struct {
	GlyphName xsdt.String `xml:"http://www.w3.org/2000/svg glyph-name,attr"`
}

// XsdGoPkgHasAttrVertTextOrientXsdtString defines attribute VertTextOrientXsdtString
type XsdGoPkgHasAttrVertTextOrientXsdtString struct {
	VertTextOrient xsdt.String `xml:"http://www.w3.org/2000/svg vert-text-orient,attr"`
}

// XsdGoPkgHasAttrUnicodeXsdtString defines attribute UnicodeXsdtString
type XsdGoPkgHasAttrUnicodeXsdtString struct {
	Unicode xsdt.String `xml:"http://www.w3.org/2000/svg unicode,attr"`
}

// TglyphType defines TglyphType
type TglyphType struct {
	XsdGoPkgHasElemsCursor

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasElemsSymbol

	XsdGoPkgHasElemsClipPath

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsStyle

	XsdGoPkgHasElemsFilter

	XsdGoPkgHasAttrHorizAdvXXsdtDouble

	XsdGoPkgHasAttrDTPathDataType

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrHanXsdtString

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsPattern

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsDefs

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasElemsColorProfile

	XsdGoPkgHasAttrVertAdvYXsdtDouble

	XsdGoPkgHasAttrArabicXsdtString

	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsScript

	XsdGoPkgHasElemsLinearGradient

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsRadialGradient

	XsdGoPkgHasElemsFont

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsFontFace

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsUse

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsAltGlyphDef

	XsdGoPkgHasAttrGlyphNameXsdtString

	XsdGoPkgHasAttrVertTextOrientXsdtString

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsView

	XsdGoPkgHasElemsMarker

	XsdGoPkgHasElemsMask

	XsdGoPkgHasAttrUnicodeXsdtString
}

// Walk : if the WalkHandlers.TglyphType function is not nil (ie. was set by outside code), calls it with this TglyphType instance as the single argument. Then calls the Walk() method on 29/51 embed(s) and 0/0 field(s) belonging to this TglyphType instance.
func (me *TglyphType) Walk() (err error) {
	if fn := WalkHandlers.TglyphType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsGlyph defines XsdGoPkgHasElemsGlyph
type XsdGoPkgHasElemsGlyph struct {
	Glyphs []*TglyphType `xml:"http://www.w3.org/2000/svg glyph"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsGlyph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsGlyph instance.
func (me *XsdGoPkgHasElemsGlyph) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Glyphs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFontFace defines XsdGoPkgHasElemFontFace
type XsdGoPkgHasElemFontFace struct {
	FontFace *TfontFaceType `xml:"http://www.w3.org/2000/svg font-face"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFontFace function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFontFace instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFontFace instance.
func (me *XsdGoPkgHasElemFontFace) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFontFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// ThkernType defines ThkernType
type ThkernType struct {
	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrU2XsdtString

	XsdGoPkgHasAttrG2XsdtString

	XsdGoPkgHasAttrKXsdtDouble

	XsdGoPkgHasAttrU1XsdtString

	XsdGoPkgHasAttrG1XsdtString
}

// Walk : if the WalkHandlers.ThkernType function is not nil (ie. was set by outside code), calls it with this ThkernType instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this ThkernType instance.
func (me *ThkernType) Walk() (err error) {
	if fn := WalkHandlers.ThkernType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsHkern defines XsdGoPkgHasElemsHkern
type XsdGoPkgHasElemsHkern struct {
	Hkerns []*ThkernType `xml:"http://www.w3.org/2000/svg hkern"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsHkern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsHkern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsHkern instance.
func (me *XsdGoPkgHasElemsHkern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsHkern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Hkerns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrHorizOriginYXsdtDouble defines attribute HorizOriginYXsdtDouble
type XsdGoPkgHasAttrHorizOriginYXsdtDouble struct {
	HorizOriginY xsdt.Double `xml:"http://www.w3.org/2000/svg horiz-origin-y,attr"`
}

// XsdGoPkgHasAttrVertOriginXXsdtDouble defines attribute VertOriginXXsdtDouble
type XsdGoPkgHasAttrVertOriginXXsdtDouble struct {
	VertOriginX xsdt.Double `xml:"http://www.w3.org/2000/svg vert-origin-x,attr"`
}

// XsdGoPkgHasAttrHorizOriginXXsdtDouble defines attribute HorizOriginXXsdtDouble
type XsdGoPkgHasAttrHorizOriginXXsdtDouble struct {
	HorizOriginX xsdt.Double `xml:"http://www.w3.org/2000/svg horiz-origin-x,attr"`
}

// TfontType defines TfontType
type TfontType struct {
	XsdGoPkgHasAttrHorizOriginXXsdtDouble

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsVkern

	XsdGoPkgHasElemMissingGlyph

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrVertOriginYXsdtDouble

	XsdGoPkgHasElemsGlyph

	XsdGoPkgHasElemFontFace

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttrHorizAdvXXsdtDouble

	XsdGoPkgHasAttrVertAdvYXsdtDouble

	XsdGoPkgHasElemsHkern

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrHorizOriginYXsdtDouble

	XsdGoPkgHasAttrVertOriginXXsdtDouble
}

// Walk : if the WalkHandlers.TfontType function is not nil (ie. was set by outside code), calls it with this TfontType instance as the single argument. Then calls the Walk() method on 6/17 embed(s) and 0/0 field(s) belonging to this TfontType instance.
func (me *TfontType) Walk() (err error) {
	if fn := WalkHandlers.TfontType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsVkern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemMissingGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsHkern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFont defines XsdGoPkgHasElemsFont
type XsdGoPkgHasElemsFont struct {
	Fonts []*TfontType `xml:"http://www.w3.org/2000/svg font"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFont function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFont instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFont instance.
func (me *XsdGoPkgHasElemsFont) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFont; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Fonts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrPatternTransformTransformListType defines attribute PatternTransformTransformListType
type XsdGoPkgHasAttrPatternTransformTransformListType struct {
	PatternTransform TransformListType `xml:"http://www.w3.org/2000/svg patternTransform,attr"`
}

// XsdGoPkgHasAttrPatternUnitsTxsdPatternTypePatternUnits defines attribute PatternUnitsTxsdPatternTypePatternUnits
type XsdGoPkgHasAttrPatternUnitsTxsdPatternTypePatternUnits struct {
	PatternUnits TxsdClipPathTypeClipPathUnits `xml:"http://www.w3.org/2000/svg patternUnits,attr"`
}

// TpatternType defines TpatternType
type TpatternType struct {
	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsView

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsFont

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttrPatternTransformTransformListType

	XsdGoPkgHasElemsStyle

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet

	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsRadialGradient

	XsdGoPkgHasElemsCursor

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasElemsFontFace

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasElemsColorProfile

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttrViewBoxTViewBoxSpecType

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsPattern

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsScript

	XsdGoPkgHasElemsClipPath

	XsdGoPkgHasAttrWidthTLengthType

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsAltGlyphDef

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrYTCoordinateType

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasAttrPatternUnitsTxsdPatternTypePatternUnits

	XsdGoPkgHasElemsDefs

	XsdGoPkgHasElemsLinearGradient

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsSymbol

	XsdGoPkgHasElemsMarker

	XsdGoPkgHasAttrHeightTLengthType

	XsdGoPkgHasAttrXTCoordinateType

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsUse

	XsdGoPkgHasElemsMask

	XsdGoPkgHasElemsFilter

	XsdGoPkgHasAttsTestAttrs
}

// Walk : if the WalkHandlers.TpatternType function is not nil (ie. was set by outside code), calls it with this TpatternType instance as the single argument. Then calls the Walk() method on 30/56 embed(s) and 0/0 field(s) belonging to this TpatternType instance.
func (me *TpatternType) Walk() (err error) {
	if fn := WalkHandlers.TpatternType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPattern defines XsdGoPkgHasElemsPattern
type XsdGoPkgHasElemsPattern struct {
	Patterns []*TpatternType `xml:"http://www.w3.org/2000/svg pattern"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPattern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPattern instance.
func (me *XsdGoPkgHasElemsPattern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Patterns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TdefsType defines TdefsType
type TdefsType struct {
	XsdGoPkgHasElemsSymbol

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsAltGlyphDef

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasElemsFontFace

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsView

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasElemsMarker

	XsdGoPkgHasElemsCursor

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsUse

	XsdGoPkgHasElemsPattern

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasElemsDefs

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasElemsFilter

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsScript

	XsdGoPkgHasElemsStyle

	XsdGoPkgHasElemsClipPath

	XsdGoPkgHasElemsLinearGradient

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsMask

	XsdGoPkgHasElemsRadialGradient

	XsdGoPkgHasElemsFont

	XsdGoPkgHasElemsColorProfile

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean
}

// Walk : if the WalkHandlers.TdefsType function is not nil (ie. was set by outside code), calls it with this TdefsType instance as the single argument. Then calls the Walk() method on 31/48 embed(s) and 0/0 field(s) belonging to this TdefsType instance.
func (me *TdefsType) Walk() (err error) {
	if fn := WalkHandlers.TdefsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsDefs defines XsdGoPkgHasElemsDefs
type XsdGoPkgHasElemsDefs struct {
	Defses []*TdefsType `xml:"http://www.w3.org/2000/svg defs"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsDefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsDefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsDefs instance.
func (me *XsdGoPkgHasElemsDefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsDefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Defses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrRefXTCoordinateType defines attribute RefXTCoordinateType
type XsdGoPkgHasAttrRefXTCoordinateType struct {
	RefX TCoordinateType `xml:"http://www.w3.org/2000/svg refX,attr"`
}

// TmarkerType defines TmarkerType
type TmarkerType struct {
	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsColorProfile

	XsdGoPkgHasElemsFontFace

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsCursor

	XsdGoPkgHasAttrMarkerUnitsTxsdMarkerTypeMarkerUnits

	XsdGoPkgHasElemsLinearGradient

	XsdGoPkgHasElemsFilter

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsSymbol

	XsdGoPkgHasAttrMarkerWidthTLengthType

	XsdGoPkgHasAttrRefYTCoordinateType

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsMarker

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsScript

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasElemsRadialGradient

	XsdGoPkgHasAttrOrientXsdtString

	XsdGoPkgHasAttrViewBoxTViewBoxSpecType

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsAltGlyphDef

	XsdGoPkgHasAttrMarkerHeightTLengthType

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsDefs

	XsdGoPkgHasElemsUse

	XsdGoPkgHasElemsView

	XsdGoPkgHasElemsStyle

	XsdGoPkgHasElemsClipPath

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsMask

	XsdGoPkgHasElemsPattern

	XsdGoPkgHasAttrRefXTCoordinateType

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasElemsFont

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsText

	XsdGoPkgHasAttrStyleTStyleSheetType
}

// Walk : if the WalkHandlers.TmarkerType function is not nil (ie. was set by outside code), calls it with this TmarkerType instance as the single argument. Then calls the Walk() method on 32/53 embed(s) and 0/0 field(s) belonging to this TmarkerType instance.
func (me *TmarkerType) Walk() (err error) {
	if fn := WalkHandlers.TmarkerType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsMarker defines XsdGoPkgHasElemsMarker
type XsdGoPkgHasElemsMarker struct {
	Markers []*TmarkerType `xml:"http://www.w3.org/2000/svg marker"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsMarker function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsMarker instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsMarker instance.
func (me *XsdGoPkgHasElemsMarker) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsMarker; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Markers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TgType defines TgType
type TgType struct {
	XsdGoPkgHasElemsFontFace

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsSymbol

	XsdGoPkgHasElemsCursor

	XsdGoPkgHasElemsFont

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsMarker

	XsdGoPkgHasElemsClipPath

	XsdGoPkgHasElemsRadialGradient

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasElemsAltGlyphDef

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsDefs

	XsdGoPkgHasElemsView

	XsdGoPkgHasElemsLinearGradient

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasElemsMask

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsPattern

	XsdGoPkgHasElemsFilter

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsScript

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasElemsStyle

	XsdGoPkgHasElemsColorProfile

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsUse

	XsdGoPkgHasElemsA
}

// Walk : if the WalkHandlers.TgType function is not nil (ie. was set by outside code), calls it with this TgType instance as the single argument. Then calls the Walk() method on 33/48 embed(s) and 0/0 field(s) belonging to this TgType instance.
func (me *TgType) Walk() (err error) {
	if fn := WalkHandlers.TgType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMarker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsG defines XsdGoPkgHasElemsG
type XsdGoPkgHasElemsG struct {
	Gs []*TgType `xml:"http://www.w3.org/2000/svg g"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsG function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsG instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsG instance.
func (me *XsdGoPkgHasElemsG) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsG; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Gs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrMaskUnitsTxsdMaskTypeMaskUnits defines attribute MaskUnitsTxsdMaskTypeMaskUnits
type XsdGoPkgHasAttrMaskUnitsTxsdMaskTypeMaskUnits struct {
	MaskUnits TxsdClipPathTypeClipPathUnits `xml:"http://www.w3.org/2000/svg maskUnits,attr"`
}

// TmaskType defines TmaskType
type TmaskType struct {
	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasElemsDefs

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsSymbol

	XsdGoPkgHasElemsFilter

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttrWidthTLengthType

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsStyle

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsAltGlyphDef

	XsdGoPkgHasElemsScript

	XsdGoPkgHasElemsLinearGradient

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasAttrYTCoordinateType

	XsdGoPkgHasElemsPattern

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrHeightTLengthType

	XsdGoPkgHasElemsClipPath

	XsdGoPkgHasElemsMask

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsUse

	XsdGoPkgHasElemsMarker

	XsdGoPkgHasElemsColorProfile

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasElemsCursor

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrXTCoordinateType

	XsdGoPkgHasElemsView

	XsdGoPkgHasElemsRadialGradient

	XsdGoPkgHasElemsFont

	XsdGoPkgHasAttrMaskUnitsTxsdMaskTypeMaskUnits

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsFontFace
}

// Walk : if the WalkHandlers.TmaskType function is not nil (ie. was set by outside code), calls it with this TmaskType instance as the single argument. Then calls the Walk() method on 34/52 embed(s) and 0/0 field(s) belonging to this TmaskType instance.
func (me *TmaskType) Walk() (err error) {
	if fn := WalkHandlers.TmaskType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMarker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsMask defines XsdGoPkgHasElemsMask
type XsdGoPkgHasElemsMask struct {
	Masks []*TmaskType `xml:"http://www.w3.org/2000/svg mask"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsMask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsMask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsMask instance.
func (me *XsdGoPkgHasElemsMask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Masks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrTargetXsdtNmtoken defines attribute TargetXsdtNmtoken
type XsdGoPkgHasAttrTargetXsdtNmtoken struct {
	Target xsdt.Nmtoken `xml:"http://www.w3.org/2000/svg target,attr"`
}

// TaType defines TaType
type TaType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElemsDefs

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsColorProfile

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsRadialGradient

	XsdGoPkgHasElemsFontFace

	xlink.XsdGoPkgHasAttrActuate

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsPattern

	XsdGoPkgHasElemsCursor

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsUse

	XsdGoPkgHasElemsView

	XsdGoPkgHasAttrTargetXsdtNmtoken

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasElemsSymbol

	XsdGoPkgHasElemsLinearGradient

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsScript

	XsdGoPkgHasAttsStdAttrs

	xlink.XsdGoPkgHasAttrType

	xlink.XsdGoPkgHasAttrTitle

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsClipPath

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsMarker

	xlink.XsdGoPkgHasAttrRole

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasElemsMask

	XsdGoPkgHasElemsFilter

	xlink.XsdGoPkgHasAttrShow

	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsFont

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasElemsAltGlyphDef

	XsdGoPkgHasElemsStyle

	xlink.XsdGoPkgHasAttrArcrole

	xlink.XsdGoPkgHasAttrHref
}

// Walk : if the WalkHandlers.TaType function is not nil (ie. was set by outside code), calls it with this TaType instance as the single argument. Then calls the Walk() method on 36/57 embed(s) and 0/0 field(s) belonging to this TaType instance.
func (me *TaType) Walk() (err error) {
	if fn := WalkHandlers.TaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMarker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsA defines XsdGoPkgHasElemsA
type XsdGoPkgHasElemsA struct {
	As []*TaType `xml:"http://www.w3.org/2000/svg a"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsA function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsA instance.
func (me *XsdGoPkgHasElemsA) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.As {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TaltGlyphType defines TaltGlyphType
type TaltGlyphType struct {
	XsdGoPkgHasAttrDyTLengthsType

	XsdGoPkgHasCdata

	XsdGoPkgHasAttrXTCoordinatesType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrGlyphRefXsdtString

	XsdGoPkgHasAttrDxTLengthsType

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasAttsPresentationAttributesTextContentElements

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrRotateXsdtString

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttsPresentationAttributesFontSpecification

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrFormatXsdtString

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttrYTCoordinatesType

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrClassTClassListType
}

// Walk : if the WalkHandlers.TaltGlyphType function is not nil (ie. was set by outside code), calls it with this TaltGlyphType instance as the single argument. Then calls the Walk() method on 1/22 embed(s) and 0/0 field(s) belonging to this TaltGlyphType instance.
func (me *TaltGlyphType) Walk() (err error) {
	if fn := WalkHandlers.TaltGlyphType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAltGlyph defines XsdGoPkgHasElemsAltGlyph
type XsdGoPkgHasElemsAltGlyph struct {
	AltGlyphs []*TaltGlyphType `xml:"http://www.w3.org/2000/svg altGlyph"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAltGlyph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAltGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAltGlyph instance.
func (me *XsdGoPkgHasElemsAltGlyph) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAltGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AltGlyphs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TtspanType defines TtspanType
type TtspanType struct {
	XsdGoPkgHasElemsAltGlyph

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttrDxTLengthsType

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasCdata

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttsPresentationAttributesFontSpecification

	XsdGoPkgHasAttsPresentationAttributesTextContentElements

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrRotateXsdtString

	XsdGoPkgHasAttrLengthAdjustTxsdTspanTypeLengthAdjust

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsTref

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttrYTCoordinatesType

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttrXTCoordinatesType

	XsdGoPkgHasAttrDyTLengthsType

	XsdGoPkgHasElemsTspan

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrTextLengthTLengthType

	XsdGoPkgHasAttrClassTClassListType
}

// Walk : if the WalkHandlers.TtspanType function is not nil (ie. was set by outside code), calls it with this TtspanType instance as the single argument. Then calls the Walk() method on 10/30 embed(s) and 0/0 field(s) belonging to this TtspanType instance.
func (me *TtspanType) Walk() (err error) {
	if fn := WalkHandlers.TtspanType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsTref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTspan defines XsdGoPkgHasElemsTspan
type XsdGoPkgHasElemsTspan struct {
	Tspans []*TtspanType `xml:"http://www.w3.org/2000/svg tspan"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTspan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTspan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTspan instance.
func (me *XsdGoPkgHasElemsTspan) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTspan; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tspans {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrLengthAdjustTxsdTextTypeLengthAdjust defines attribute LengthAdjustTxsdTextTypeLengthAdjust
type XsdGoPkgHasAttrLengthAdjustTxsdTextTypeLengthAdjust struct {
	LengthAdjust TxsdTspanTypeLengthAdjust `xml:"http://www.w3.org/2000/svg lengthAdjust,attr"`
}

// TxsdTextPathTypeSpacing defines TxsdTextPathTypeSpacing
type TxsdTextPathTypeSpacing xsdt.String

// IsAuto : Returns true if the value of this enumerated TxsdTextPathTypeSpacing is "auto".
func (me TxsdTextPathTypeSpacing) IsAuto() bool { return me.String() == "auto" }

// IsExact : Returns true if the value of this enumerated TxsdTextPathTypeSpacing is "exact".
func (me TxsdTextPathTypeSpacing) IsExact() bool { return me.String() == "exact" }

// Set : Since TxsdTextPathTypeSpacing is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTextPathTypeSpacing) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdTextPathTypeSpacing is just a simple String type, this merely returns the current string value.
func (me TxsdTextPathTypeSpacing) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdTextPathTypeSpacing's alias type xsdt.String.
func (me TxsdTextPathTypeSpacing) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XsdGoPkgHasAttrSpacingTxsdTextPathTypeSpacing defines attribute SpacingTxsdTextPathTypeSpacing
type XsdGoPkgHasAttrSpacingTxsdTextPathTypeSpacing struct {
	Spacing TxsdTextPathTypeSpacing `xml:"http://www.w3.org/2000/svg spacing,attr"`
}

// XsdGoPkgHasAttrStartOffsetXsdtString defines attribute StartOffsetXsdtString
type XsdGoPkgHasAttrStartOffsetXsdtString struct {
	StartOffset xsdt.String `xml:"http://www.w3.org/2000/svg startOffset,attr"`
}

// XsdGoPkgHasAttrLengthAdjustTxsdTextPathTypeLengthAdjust defines attribute LengthAdjustTxsdTextPathTypeLengthAdjust
type XsdGoPkgHasAttrLengthAdjustTxsdTextPathTypeLengthAdjust struct {
	LengthAdjust TxsdTspanTypeLengthAdjust `xml:"http://www.w3.org/2000/svg lengthAdjust,attr"`
}

// TxsdTextPathTypeMethod defines TxsdTextPathTypeMethod
type TxsdTextPathTypeMethod xsdt.String

// Set : Since TxsdTextPathTypeMethod is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTextPathTypeMethod) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdTextPathTypeMethod is just a simple String type, this merely returns the current string value.
func (me TxsdTextPathTypeMethod) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdTextPathTypeMethod's alias type xsdt.String.
func (me TxsdTextPathTypeMethod) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsAlign : Returns true if the value of this enumerated TxsdTextPathTypeMethod is "align".
func (me TxsdTextPathTypeMethod) IsAlign() bool { return me.String() == "align" }

// IsStretch : Returns true if the value of this enumerated TxsdTextPathTypeMethod is "stretch".
func (me TxsdTextPathTypeMethod) IsStretch() bool { return me.String() == "stretch" }

// XsdGoPkgHasAttrMethodTxsdTextPathTypeMethod defines attribute MethodTxsdTextPathTypeMethod
type XsdGoPkgHasAttrMethodTxsdTextPathTypeMethod struct {
	Method TxsdTextPathTypeMethod `xml:"http://www.w3.org/2000/svg method,attr"`
}

// TtextPathType defines TtextPathType
type TtextPathType struct {
	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasAttsXlinkRefAttrs

	XsdGoPkgHasAttsPresentationAttributesFontSpecification

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasCdata

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsTspan

	XsdGoPkgHasAttsTestAttrs

	xlink.XsdGoPkgHasAttrHref

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsTref

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttrSpacingTxsdTextPathTypeSpacing

	XsdGoPkgHasAttsPresentationAttributesTextContentElements

	XsdGoPkgHasAttrTextLengthTLengthType

	XsdGoPkgHasAttrLengthAdjustTxsdTextPathTypeLengthAdjust

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrStartOffsetXsdtString

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttrMethodTxsdTextPathTypeMethod

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsAltGlyph
}

// Walk : if the WalkHandlers.TtextPathType function is not nil (ie. was set by outside code), calls it with this TtextPathType instance as the single argument. Then calls the Walk() method on 11/29 embed(s) and 0/0 field(s) belonging to this TtextPathType instance.
func (me *TtextPathType) Walk() (err error) {
	if fn := WalkHandlers.TtextPathType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsTspan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTextPath defines XsdGoPkgHasElemsTextPath
type XsdGoPkgHasElemsTextPath struct {
	TextPaths []*TtextPathType `xml:"http://www.w3.org/2000/svg textPath"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTextPath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTextPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTextPath instance.
func (me *XsdGoPkgHasElemsTextPath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTextPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TextPaths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TtextType defines TtextType
type TtextType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsTspan

	XsdGoPkgHasElemsAltGlyph

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasAttsPresentationAttributesTextElements

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasAttrLengthAdjustTxsdTextTypeLengthAdjust

	XsdGoPkgHasAttrYTCoordinateType

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsTextPath

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttsPresentationAttributesFontSpecification

	XsdGoPkgHasElemsTref

	XsdGoPkgHasElemsA

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttrXTCoordinateType

	XsdGoPkgHasAttrTextLengthTLengthType

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttsPresentationAttributesColor

	XsdGoPkgHasAttsPresentationAttributesTextContentElements

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrTransformTransformListType
}

// Walk : if the WalkHandlers.TtextType function is not nil (ie. was set by outside code), calls it with this TtextType instance as the single argument. Then calls the Walk() method on 14/32 embed(s) and 0/0 field(s) belonging to this TtextType instance.
func (me *TtextType) Walk() (err error) {
	if fn := WalkHandlers.TtextType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTspan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTextPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsText defines XsdGoPkgHasElemsText
type XsdGoPkgHasElemsText struct {
	Texts []*TtextType `xml:"http://www.w3.org/2000/svg text"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsText instance.
func (me *XsdGoPkgHasElemsText) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Texts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TclipPathType defines TclipPathType
type TclipPathType struct {
	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttsPresentationAttributesFontSpecification

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasAttsPresentationAttributesTextElements

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasGroupDescTitleMetadata

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsUse

	XsdGoPkgHasAttsPresentationAttributesFillStroke

	XsdGoPkgHasAttsPresentationAttributesTextContentElements

	XsdGoPkgHasAttrClipPathUnitsTxsdClipPathTypeClipPathUnits

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasAttsPresentationAttributesGraphics

	XsdGoPkgHasAttrTransformTransformListType

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsSet

	XsdGoPkgHasAttsStdAttrs
}

// Walk : if the WalkHandlers.TclipPathType function is not nil (ie. was set by outside code), calls it with this TclipPathType instance as the single argument. Then calls the Walk() method on 15/28 embed(s) and 0/0 field(s) belonging to this TclipPathType instance.
func (me *TclipPathType) Walk() (err error) {
	if fn := WalkHandlers.TclipPathType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsClipPath defines XsdGoPkgHasElemsClipPath
type XsdGoPkgHasElemsClipPath struct {
	ClipPaths []*TclipPathType `xml:"http://www.w3.org/2000/svg clipPath"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsClipPath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsClipPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsClipPath instance.
func (me *XsdGoPkgHasElemsClipPath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsClipPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ClipPaths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TsymbolType defines TsymbolType
type TsymbolType struct {
	XsdGoPkgHasElemsAltGlyphDef

	XsdGoPkgHasElemsRadialGradient

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasElemsFont

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasElemsFontFace

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet

	XsdGoPkgHasElemsDefs

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsMarker

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsView

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsSymbol

	XsdGoPkgHasElemsClipPath

	XsdGoPkgHasElemsColorProfile

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttrViewBoxTViewBoxSpecType

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsStyle

	XsdGoPkgHasElemsCursor

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsScript

	XsdGoPkgHasElemsMask

	XsdGoPkgHasElemsPattern

	XsdGoPkgHasElemsFilter

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsUse

	XsdGoPkgHasElemsLinearGradient
}

// Walk : if the WalkHandlers.TsymbolType function is not nil (ie. was set by outside code), calls it with this TsymbolType instance as the single argument. Then calls the Walk() method on 38/48 embed(s) and 0/0 field(s) belonging to this TsymbolType instance.
func (me *TsymbolType) Walk() (err error) {
	if fn := WalkHandlers.TsymbolType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsClipPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMarker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSymbol defines XsdGoPkgHasElemsSymbol
type XsdGoPkgHasElemsSymbol struct {
	Symbols []*TsymbolType `xml:"http://www.w3.org/2000/svg symbol"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSymbol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSymbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSymbol instance.
func (me *XsdGoPkgHasElemsSymbol) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSymbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Symbols {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrContentStyleTypeTContentTypeTypeTextCSS defines attribute ContentStyleTypeTContentTypeTypeTextCss
type XsdGoPkgHasAttrContentStyleTypeTContentTypeTypeTextCSS struct {
	ContentStyleType TContentTypeType `xml:"http://www.w3.org/2000/svg contentStyleType,attr"`
}

// ContentStyleTypeDefault : Returns the default value for ContentStyleType -- "text/css"
func (me XsdGoPkgHasAttrContentStyleTypeTContentTypeTypeTextCSS) ContentStyleTypeDefault() TContentTypeType {
	return TContentTypeType("text/css")
}

// XsdGoPkgHasAttrZoomAndPanTxsdSvgTypeZoomAndPanMagnify defines attribute ZoomAndPanTxsdSvgTypeZoomAndPanMagnify
type XsdGoPkgHasAttrZoomAndPanTxsdSvgTypeZoomAndPanMagnify struct {
	ZoomAndPan TxsdViewTypeZoomAndPan `xml:"http://www.w3.org/2000/svg zoomAndPan,attr"`
}

// ZoomAndPanDefault : Returns the default value for ZoomAndPan -- "magnify"
func (me XsdGoPkgHasAttrZoomAndPanTxsdSvgTypeZoomAndPanMagnify) ZoomAndPanDefault() TxsdViewTypeZoomAndPan {
	return TxsdViewTypeZoomAndPan("magnify")
}

// XsdGoPkgHasAttrContentScriptTypeTContentTypeTypeTextEcmascript defines attribute ContentScriptTypeTContentTypeTypeTextEcmascript
type XsdGoPkgHasAttrContentScriptTypeTContentTypeTypeTextEcmascript struct {
	ContentScriptType TContentTypeType `xml:"http://www.w3.org/2000/svg contentScriptType,attr"`
}

// ContentScriptTypeDefault : Returns the default value for ContentScriptType -- "text/ecmascript"
func (me XsdGoPkgHasAttrContentScriptTypeTContentTypeTypeTextEcmascript) ContentScriptTypeDefault() TContentTypeType {
	return TContentTypeType("text/ecmascript")
}

// TsvgType defines TsvgType
type TsvgType struct {
	XsdGoPkgHasElemsFontFace

	XsdGoPkgHasAttsTestAttrs

	XsdGoPkgHasElemsPattern

	XsdGoPkgHasAttsDocumentEvents

	XsdGoPkgHasElemsMask

	XsdGoPkgHasAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet

	XsdGoPkgHasAttrContentStyleTypeTContentTypeTypeTextCSS

	XsdGoPkgHasElemsMetadata

	XsdGoPkgHasElemsUse

	XsdGoPkgHasElemsImage

	XsdGoPkgHasElemsView

	XsdGoPkgHasElemsAltGlyphDef

	XsdGoPkgHasAttsStdAttrs

	XsdGoPkgHasAttrExternalResourcesRequiredXsdtBoolean

	XsdGoPkgHasElemsTitle

	XsdGoPkgHasElemsScript

	XsdGoPkgHasElemsFilter

	XsdGoPkgHasAttrWidthTLengthType

	XsdGoPkgHasAttrHeightTLengthType

	XsdGoPkgHasElemsMarker

	XsdGoPkgHasAttrZoomAndPanTxsdSvgTypeZoomAndPanMagnify

	XsdGoPkgHasAttsGraphicsElementEvents

	XsdGoPkgHasAttrContentScriptTypeTContentTypeTypeTextEcmascript

	XsdGoPkgHasAttrStyleTStyleSheetType

	XsdGoPkgHasElemsCursor

	XsdGoPkgHasElemsPolyline

	XsdGoPkgHasElemsStyle

	XsdGoPkgHasElemsAnimateColor

	XsdGoPkgHasElemsText

	XsdGoPkgHasElemsAnimate

	XsdGoPkgHasAttrXTCoordinateType

	XsdGoPkgHasElemsDesc

	XsdGoPkgHasElemsEllipse

	XsdGoPkgHasAttsPresentationAttributesAll

	XsdGoPkgHasAttrClassTClassListType

	XsdGoPkgHasElemsRect

	XsdGoPkgHasElemsLinearGradient

	XsdGoPkgHasElemsSet

	XsdGoPkgHasElemsCircle

	XsdGoPkgHasElemsAnimateMotion

	XsdGoPkgHasElemsColorProfile

	XsdGoPkgHasAttsLangSpaceAttrs

	XsdGoPkgHasAttrViewBoxTViewBoxSpecType

	XsdGoPkgHasElemsSymbol

	XsdGoPkgHasElemsClipPath

	XsdGoPkgHasElemsDefs

	XsdGoPkgHasElemsPolygon

	XsdGoPkgHasElemsRadialGradient

	XsdGoPkgHasElemsG

	XsdGoPkgHasElemsAnimateTransform

	XsdGoPkgHasElemsPath

	XsdGoPkgHasElemsLine

	XsdGoPkgHasElemsSvg

	XsdGoPkgHasElemsSwitch

	XsdGoPkgHasElemsA

	XsdGoPkgHasElemsFont

	XsdGoPkgHasAttrYTCoordinateType
}

// Walk : if the WalkHandlers.TsvgType function is not nil (ie. was set by outside code), calls it with this TsvgType instance as the single argument. Then calls the Walk() method on 39/57 embed(s) and 0/0 field(s) belonging to this TsvgType instance.
func (me *TsvgType) Walk() (err error) {
	if fn := WalkHandlers.TsvgType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMarker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSymbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsClipPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSvg defines XsdGoPkgHasElemSvg
type XsdGoPkgHasElemSvg struct {
	Svg *TsvgType `xml:"http://www.w3.org/2000/svg svg"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSvg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSvg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSvg instance.
func (me *XsdGoPkgHasElemSvg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSvg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Svg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemG defines XsdGoPkgHasElemG
type XsdGoPkgHasElemG struct {
	G *TgType `xml:"http://www.w3.org/2000/svg g"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemG function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemG instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemG instance.
func (me *XsdGoPkgHasElemG) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemG; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.G.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemDefs defines XsdGoPkgHasElemDefs
type XsdGoPkgHasElemDefs struct {
	Defs *TdefsType `xml:"http://www.w3.org/2000/svg defs"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemDefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemDefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemDefs instance.
func (me *XsdGoPkgHasElemDefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemDefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Defs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSymbol defines XsdGoPkgHasElemSymbol
type XsdGoPkgHasElemSymbol struct {
	Symbol *TsymbolType `xml:"http://www.w3.org/2000/svg symbol"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSymbol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSymbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSymbol instance.
func (me *XsdGoPkgHasElemSymbol) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSymbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemUse defines XsdGoPkgHasElemUse
type XsdGoPkgHasElemUse struct {
	Use *TuseType `xml:"http://www.w3.org/2000/svg use"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemUse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemUse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemUse instance.
func (me *XsdGoPkgHasElemUse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemUse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Use.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemImage defines XsdGoPkgHasElemImage
type XsdGoPkgHasElemImage struct {
	Image *TimageType `xml:"http://www.w3.org/2000/svg image"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemImage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemImage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemImage instance.
func (me *XsdGoPkgHasElemImage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSwitch defines XsdGoPkgHasElemSwitch
type XsdGoPkgHasElemSwitch struct {
	Switch *TswitchType `xml:"http://www.w3.org/2000/svg switch"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSwitch function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSwitch instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSwitch instance.
func (me *XsdGoPkgHasElemSwitch) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSwitch; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Switch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemStyle defines XsdGoPkgHasElemStyle
type XsdGoPkgHasElemStyle struct {
	Style *TstyleType `xml:"http://www.w3.org/2000/svg style"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemStyle instance.
func (me *XsdGoPkgHasElemStyle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemStyle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Style.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPath defines XsdGoPkgHasElemPath
type XsdGoPkgHasElemPath struct {
	Path *TpathType `xml:"http://www.w3.org/2000/svg path"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPath instance.
func (me *XsdGoPkgHasElemPath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Path.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRect defines XsdGoPkgHasElemRect
type XsdGoPkgHasElemRect struct {
	Rect *TrectType `xml:"http://www.w3.org/2000/svg rect"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemRect instance.
func (me *XsdGoPkgHasElemRect) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Rect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemCircle defines XsdGoPkgHasElemCircle
type XsdGoPkgHasElemCircle struct {
	Circle *TcircleType `xml:"http://www.w3.org/2000/svg circle"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemCircle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemCircle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemCircle instance.
func (me *XsdGoPkgHasElemCircle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemCircle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Circle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEllipse defines XsdGoPkgHasElemEllipse
type XsdGoPkgHasElemEllipse struct {
	Ellipse *TellipseType `xml:"http://www.w3.org/2000/svg ellipse"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEllipse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEllipse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEllipse instance.
func (me *XsdGoPkgHasElemEllipse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEllipse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ellipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemLine defines XsdGoPkgHasElemLine
type XsdGoPkgHasElemLine struct {
	Line *TlineType `xml:"http://www.w3.org/2000/svg line"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemLine function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemLine instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemLine instance.
func (me *XsdGoPkgHasElemLine) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Line.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPolyline defines XsdGoPkgHasElemPolyline
type XsdGoPkgHasElemPolyline struct {
	Polyline *TpolylineType `xml:"http://www.w3.org/2000/svg polyline"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPolyline function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPolyline instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPolyline instance.
func (me *XsdGoPkgHasElemPolyline) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPolyline; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Polyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPolygon defines XsdGoPkgHasElemPolygon
type XsdGoPkgHasElemPolygon struct {
	Polygon *TpolygonType `xml:"http://www.w3.org/2000/svg polygon"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPolygon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPolygon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPolygon instance.
func (me *XsdGoPkgHasElemPolygon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPolygon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Polygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemText defines XsdGoPkgHasElemText
type XsdGoPkgHasElemText struct {
	Text *TtextType `xml:"http://www.w3.org/2000/svg text"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemText instance.
func (me *XsdGoPkgHasElemText) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Text.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTspan defines XsdGoPkgHasElemTspan
type XsdGoPkgHasElemTspan struct {
	Tspan *TtspanType `xml:"http://www.w3.org/2000/svg tspan"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTspan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTspan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemTspan instance.
func (me *XsdGoPkgHasElemTspan) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTspan; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tspan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTref defines XsdGoPkgHasElemTref
type XsdGoPkgHasElemTref struct {
	Tref *TtrefType `xml:"http://www.w3.org/2000/svg tref"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemTref instance.
func (me *XsdGoPkgHasElemTref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTextPath defines XsdGoPkgHasElemTextPath
type XsdGoPkgHasElemTextPath struct {
	TextPath *TtextPathType `xml:"http://www.w3.org/2000/svg textPath"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTextPath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTextPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemTextPath instance.
func (me *XsdGoPkgHasElemTextPath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTextPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAltGlyph defines XsdGoPkgHasElemAltGlyph
type XsdGoPkgHasElemAltGlyph struct {
	AltGlyph *TaltGlyphType `xml:"http://www.w3.org/2000/svg altGlyph"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAltGlyph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAltGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAltGlyph instance.
func (me *XsdGoPkgHasElemAltGlyph) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAltGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AltGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAltGlyphDef defines XsdGoPkgHasElemAltGlyphDef
type XsdGoPkgHasElemAltGlyphDef struct {
	AltGlyphDef *TaltGlyphDefType `xml:"http://www.w3.org/2000/svg altGlyphDef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAltGlyphDef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAltGlyphDef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAltGlyphDef instance.
func (me *XsdGoPkgHasElemAltGlyphDef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAltGlyphDef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAltGlyphItem defines XsdGoPkgHasElemAltGlyphItem
type XsdGoPkgHasElemAltGlyphItem struct {
	AltGlyphItem *TaltGlyphItemType `xml:"http://www.w3.org/2000/svg altGlyphItem"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAltGlyphItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAltGlyphItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAltGlyphItem instance.
func (me *XsdGoPkgHasElemAltGlyphItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAltGlyphItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AltGlyphItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemGlyphRef defines XsdGoPkgHasElemGlyphRef
type XsdGoPkgHasElemGlyphRef struct {
	GlyphRef *TglyphRefType `xml:"http://www.w3.org/2000/svg glyphRef"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemGlyphRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemGlyphRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemGlyphRef instance.
func (me *XsdGoPkgHasElemGlyphRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemGlyphRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GlyphRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemMarker defines XsdGoPkgHasElemMarker
type XsdGoPkgHasElemMarker struct {
	Marker *TmarkerType `xml:"http://www.w3.org/2000/svg marker"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemMarker function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemMarker instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemMarker instance.
func (me *XsdGoPkgHasElemMarker) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemMarker; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Marker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemColorProfile defines XsdGoPkgHasElemColorProfile
type XsdGoPkgHasElemColorProfile struct {
	ColorProfile *TcolorProfileType `xml:"http://www.w3.org/2000/svg color-profile"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemColorProfile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemColorProfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemColorProfile instance.
func (me *XsdGoPkgHasElemColorProfile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemColorProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemLinearGradient defines XsdGoPkgHasElemLinearGradient
type XsdGoPkgHasElemLinearGradient struct {
	LinearGradient *TlinearGradientType `xml:"http://www.w3.org/2000/svg linearGradient"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemLinearGradient function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemLinearGradient instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemLinearGradient instance.
func (me *XsdGoPkgHasElemLinearGradient) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemLinearGradient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRadialGradient defines XsdGoPkgHasElemRadialGradient
type XsdGoPkgHasElemRadialGradient struct {
	RadialGradient *TradialGradientType `xml:"http://www.w3.org/2000/svg radialGradient"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRadialGradient function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRadialGradient instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemRadialGradient instance.
func (me *XsdGoPkgHasElemRadialGradient) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRadialGradient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemStop defines XsdGoPkgHasElemStop
type XsdGoPkgHasElemStop struct {
	Stop *TstopType `xml:"http://www.w3.org/2000/svg stop"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemStop function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemStop instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemStop instance.
func (me *XsdGoPkgHasElemStop) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemStop; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Stop.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPattern defines XsdGoPkgHasElemPattern
type XsdGoPkgHasElemPattern struct {
	Pattern *TpatternType `xml:"http://www.w3.org/2000/svg pattern"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPattern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPattern instance.
func (me *XsdGoPkgHasElemPattern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemClipPath defines XsdGoPkgHasElemClipPath
type XsdGoPkgHasElemClipPath struct {
	ClipPath *TclipPathType `xml:"http://www.w3.org/2000/svg clipPath"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemClipPath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemClipPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemClipPath instance.
func (me *XsdGoPkgHasElemClipPath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemClipPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClipPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemMask defines XsdGoPkgHasElemMask
type XsdGoPkgHasElemMask struct {
	Mask *TmaskType `xml:"http://www.w3.org/2000/svg mask"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemMask function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemMask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemMask instance.
func (me *XsdGoPkgHasElemMask) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFilter defines XsdGoPkgHasElemFilter
type XsdGoPkgHasElemFilter struct {
	Filter *TfilterType `xml:"http://www.w3.org/2000/svg filter"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFilter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFilter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFilter instance.
func (me *XsdGoPkgHasElemFilter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFilter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Filter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeDistantLight defines XsdGoPkgHasElemsFeDistantLight
type XsdGoPkgHasElemsFeDistantLight struct {
	FeDistantLights []*TfeDistantLightType `xml:"http://www.w3.org/2000/svg feDistantLight"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeDistantLight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeDistantLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeDistantLight instance.
func (me *XsdGoPkgHasElemsFeDistantLight) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeDistantLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeDistantLights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFePointLight defines XsdGoPkgHasElemsFePointLight
type XsdGoPkgHasElemsFePointLight struct {
	FePointLights []*TfePointLightType `xml:"http://www.w3.org/2000/svg fePointLight"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFePointLight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFePointLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFePointLight instance.
func (me *XsdGoPkgHasElemsFePointLight) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFePointLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FePointLights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeSpotLight defines XsdGoPkgHasElemsFeSpotLight
type XsdGoPkgHasElemsFeSpotLight struct {
	FeSpotLights []*TfeSpotLightType `xml:"http://www.w3.org/2000/svg feSpotLight"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeSpotLight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeSpotLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeSpotLight instance.
func (me *XsdGoPkgHasElemsFeSpotLight) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeSpotLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeSpotLights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeBlend defines XsdGoPkgHasElemFeBlend
type XsdGoPkgHasElemFeBlend struct {
	FeBlend *TfeBlendType `xml:"http://www.w3.org/2000/svg feBlend"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeBlend function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeBlend instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeBlend instance.
func (me *XsdGoPkgHasElemFeBlend) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeBlend; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeBlend.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeColorMatrix defines XsdGoPkgHasElemFeColorMatrix
type XsdGoPkgHasElemFeColorMatrix struct {
	FeColorMatrix *TfeColorMatrixType `xml:"http://www.w3.org/2000/svg feColorMatrix"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeColorMatrix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeColorMatrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeColorMatrix instance.
func (me *XsdGoPkgHasElemFeColorMatrix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeColorMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeColorMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeComponentTransfer defines XsdGoPkgHasElemFeComponentTransfer
type XsdGoPkgHasElemFeComponentTransfer struct {
	FeComponentTransfer *TfeComponentTransferType `xml:"http://www.w3.org/2000/svg feComponentTransfer"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeComponentTransfer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeComponentTransfer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeComponentTransfer instance.
func (me *XsdGoPkgHasElemFeComponentTransfer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeComponentTransfer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeComponentTransfer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeFuncR defines XsdGoPkgHasElemsFeFuncR
type XsdGoPkgHasElemsFeFuncR struct {
	FeFuncRs []*TfeFuncRType `xml:"http://www.w3.org/2000/svg feFuncR"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeFuncR function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeFuncR instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeFuncR instance.
func (me *XsdGoPkgHasElemsFeFuncR) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeFuncR; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeFuncRs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeFuncG defines XsdGoPkgHasElemsFeFuncG
type XsdGoPkgHasElemsFeFuncG struct {
	FeFuncGs []*TfeFuncGType `xml:"http://www.w3.org/2000/svg feFuncG"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeFuncG function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeFuncG instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeFuncG instance.
func (me *XsdGoPkgHasElemsFeFuncG) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeFuncG; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeFuncGs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeFuncB defines XsdGoPkgHasElemsFeFuncB
type XsdGoPkgHasElemsFeFuncB struct {
	FeFuncBs []*TfeFuncBType `xml:"http://www.w3.org/2000/svg feFuncB"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeFuncB function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeFuncB instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeFuncB instance.
func (me *XsdGoPkgHasElemsFeFuncB) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeFuncB; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeFuncBs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFeFuncA defines XsdGoPkgHasElemsFeFuncA
type XsdGoPkgHasElemsFeFuncA struct {
	FeFuncAs []*TfeFuncAType `xml:"http://www.w3.org/2000/svg feFuncA"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFeFuncA function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFeFuncA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFeFuncA instance.
func (me *XsdGoPkgHasElemsFeFuncA) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFeFuncA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeFuncAs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeComposite defines XsdGoPkgHasElemFeComposite
type XsdGoPkgHasElemFeComposite struct {
	FeComposite *TfeCompositeType `xml:"http://www.w3.org/2000/svg feComposite"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeComposite function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeComposite instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeComposite instance.
func (me *XsdGoPkgHasElemFeComposite) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeComposite; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeComposite.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeConvolveMatrix defines XsdGoPkgHasElemFeConvolveMatrix
type XsdGoPkgHasElemFeConvolveMatrix struct {
	FeConvolveMatrix *TfeConvolveMatrixType `xml:"http://www.w3.org/2000/svg feConvolveMatrix"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeConvolveMatrix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeConvolveMatrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeConvolveMatrix instance.
func (me *XsdGoPkgHasElemFeConvolveMatrix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeConvolveMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeConvolveMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeDiffuseLighting defines XsdGoPkgHasElemFeDiffuseLighting
type XsdGoPkgHasElemFeDiffuseLighting struct {
	FeDiffuseLighting *TfeDiffuseLightingType `xml:"http://www.w3.org/2000/svg feDiffuseLighting"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeDiffuseLighting function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeDiffuseLighting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeDiffuseLighting instance.
func (me *XsdGoPkgHasElemFeDiffuseLighting) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeDiffuseLighting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeDiffuseLighting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeDisplacementMap defines XsdGoPkgHasElemFeDisplacementMap
type XsdGoPkgHasElemFeDisplacementMap struct {
	FeDisplacementMap *TfeDisplacementMapType `xml:"http://www.w3.org/2000/svg feDisplacementMap"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeDisplacementMap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeDisplacementMap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeDisplacementMap instance.
func (me *XsdGoPkgHasElemFeDisplacementMap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeDisplacementMap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeDisplacementMap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeFlood defines XsdGoPkgHasElemFeFlood
type XsdGoPkgHasElemFeFlood struct {
	FeFlood *TfeFloodType `xml:"http://www.w3.org/2000/svg feFlood"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeFlood function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeFlood instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeFlood instance.
func (me *XsdGoPkgHasElemFeFlood) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeFlood; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeFlood.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeGaussianBlur defines XsdGoPkgHasElemFeGaussianBlur
type XsdGoPkgHasElemFeGaussianBlur struct {
	FeGaussianBlur *TfeGaussianBlurType `xml:"http://www.w3.org/2000/svg feGaussianBlur"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeGaussianBlur function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeGaussianBlur instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeGaussianBlur instance.
func (me *XsdGoPkgHasElemFeGaussianBlur) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeGaussianBlur; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeGaussianBlur.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeImage defines XsdGoPkgHasElemFeImage
type XsdGoPkgHasElemFeImage struct {
	FeImage *TfeImageType `xml:"http://www.w3.org/2000/svg feImage"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeImage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeImage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeImage instance.
func (me *XsdGoPkgHasElemFeImage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeMerge defines XsdGoPkgHasElemFeMerge
type XsdGoPkgHasElemFeMerge struct {
	FeMerge *TfeMergeType `xml:"http://www.w3.org/2000/svg feMerge"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeMerge function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeMerge instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeMerge instance.
func (me *XsdGoPkgHasElemFeMerge) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeMerge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeMerge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeMergeNode defines XsdGoPkgHasElemFeMergeNode
type XsdGoPkgHasElemFeMergeNode struct {
	FeMergeNode *TfeMergeNodeType `xml:"http://www.w3.org/2000/svg feMergeNode"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeMergeNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeMergeNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeMergeNode instance.
func (me *XsdGoPkgHasElemFeMergeNode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeMergeNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeMergeNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeMorphology defines XsdGoPkgHasElemFeMorphology
type XsdGoPkgHasElemFeMorphology struct {
	FeMorphology *TfeMorphologyType `xml:"http://www.w3.org/2000/svg feMorphology"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeMorphology function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeMorphology instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeMorphology instance.
func (me *XsdGoPkgHasElemFeMorphology) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeMorphology; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeMorphology.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeOffset defines XsdGoPkgHasElemFeOffset
type XsdGoPkgHasElemFeOffset struct {
	FeOffset *TfeOffsetType `xml:"http://www.w3.org/2000/svg feOffset"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeOffset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeOffset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeOffset instance.
func (me *XsdGoPkgHasElemFeOffset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeOffset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeOffset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeSpecularLighting defines XsdGoPkgHasElemFeSpecularLighting
type XsdGoPkgHasElemFeSpecularLighting struct {
	FeSpecularLighting *TfeSpecularLightingType `xml:"http://www.w3.org/2000/svg feSpecularLighting"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeSpecularLighting function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeSpecularLighting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeSpecularLighting instance.
func (me *XsdGoPkgHasElemFeSpecularLighting) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeSpecularLighting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeSpecularLighting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeTile defines XsdGoPkgHasElemFeTile
type XsdGoPkgHasElemFeTile struct {
	FeTile *TfeTileType `xml:"http://www.w3.org/2000/svg feTile"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeTile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeTile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeTile instance.
func (me *XsdGoPkgHasElemFeTile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeTile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeTile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFeTurbulence defines XsdGoPkgHasElemFeTurbulence
type XsdGoPkgHasElemFeTurbulence struct {
	FeTurbulence *TfeTurbulenceType `xml:"http://www.w3.org/2000/svg feTurbulence"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFeTurbulence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFeTurbulence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFeTurbulence instance.
func (me *XsdGoPkgHasElemFeTurbulence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFeTurbulence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeTurbulence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemCursor defines XsdGoPkgHasElemCursor
type XsdGoPkgHasElemCursor struct {
	Cursor *TcursorType `xml:"http://www.w3.org/2000/svg cursor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemCursor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemCursor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemCursor instance.
func (me *XsdGoPkgHasElemCursor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemCursor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemA defines XsdGoPkgHasElemA
type XsdGoPkgHasElemA struct {
	A *TaType `xml:"http://www.w3.org/2000/svg a"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemA function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemA instance.
func (me *XsdGoPkgHasElemA) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.A.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemView defines XsdGoPkgHasElemView
type XsdGoPkgHasElemView struct {
	View *TviewType `xml:"http://www.w3.org/2000/svg view"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemView function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemView instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemView instance.
func (me *XsdGoPkgHasElemView) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemView; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.View.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemScript defines XsdGoPkgHasElemScript
type XsdGoPkgHasElemScript struct {
	Script *TscriptType `xml:"http://www.w3.org/2000/svg script"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemScript function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemScript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemScript instance.
func (me *XsdGoPkgHasElemScript) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemScript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Script.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAnimate defines XsdGoPkgHasElemAnimate
type XsdGoPkgHasElemAnimate struct {
	Animate *TanimateType `xml:"http://www.w3.org/2000/svg animate"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAnimate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAnimate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAnimate instance.
func (me *XsdGoPkgHasElemAnimate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAnimate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Animate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSet defines XsdGoPkgHasElemSet
type XsdGoPkgHasElemSet struct {
	Set *TsetType `xml:"http://www.w3.org/2000/svg set"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSet instance.
func (me *XsdGoPkgHasElemSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Set.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAnimateMotion defines XsdGoPkgHasElemAnimateMotion
type XsdGoPkgHasElemAnimateMotion struct {
	AnimateMotion *TanimateMotionType `xml:"http://www.w3.org/2000/svg animateMotion"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAnimateMotion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAnimateMotion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAnimateMotion instance.
func (me *XsdGoPkgHasElemAnimateMotion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAnimateMotion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsMpath defines XsdGoPkgHasElemsMpath
type XsdGoPkgHasElemsMpath struct {
	Mpaths []*TmpathType `xml:"http://www.w3.org/2000/svg mpath"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsMpath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsMpath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsMpath instance.
func (me *XsdGoPkgHasElemsMpath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsMpath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Mpaths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAnimateColor defines XsdGoPkgHasElemAnimateColor
type XsdGoPkgHasElemAnimateColor struct {
	AnimateColor *TanimateColorType `xml:"http://www.w3.org/2000/svg animateColor"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAnimateColor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAnimateColor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAnimateColor instance.
func (me *XsdGoPkgHasElemAnimateColor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAnimateColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAnimateTransform defines XsdGoPkgHasElemAnimateTransform
type XsdGoPkgHasElemAnimateTransform struct {
	AnimateTransform *TanimateTransformType `xml:"http://www.w3.org/2000/svg animateTransform"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAnimateTransform function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAnimateTransform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAnimateTransform instance.
func (me *XsdGoPkgHasElemAnimateTransform) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAnimateTransform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFont defines XsdGoPkgHasElemFont
type XsdGoPkgHasElemFont struct {
	Font *TfontType `xml:"http://www.w3.org/2000/svg font"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFont function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFont instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFont instance.
func (me *XsdGoPkgHasElemFont) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFont; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Font.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemGlyph defines XsdGoPkgHasElemGlyph
type XsdGoPkgHasElemGlyph struct {
	Glyph *TglyphType `xml:"http://www.w3.org/2000/svg glyph"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemGlyph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemGlyph instance.
func (me *XsdGoPkgHasElemGlyph) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Glyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsMissingGlyph defines XsdGoPkgHasElemsMissingGlyph
type XsdGoPkgHasElemsMissingGlyph struct {
	MissingGlyphs []*TmissingGlyphType `xml:"http://www.w3.org/2000/svg missing-glyph"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsMissingGlyph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsMissingGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsMissingGlyph instance.
func (me *XsdGoPkgHasElemsMissingGlyph) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsMissingGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MissingGlyphs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemHkern defines XsdGoPkgHasElemHkern
type XsdGoPkgHasElemHkern struct {
	Hkern *ThkernType `xml:"http://www.w3.org/2000/svg hkern"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemHkern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemHkern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemHkern instance.
func (me *XsdGoPkgHasElemHkern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemHkern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hkern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemVkern defines XsdGoPkgHasElemVkern
type XsdGoPkgHasElemVkern struct {
	Vkern *TvkernType `xml:"http://www.w3.org/2000/svg vkern"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemVkern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemVkern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemVkern instance.
func (me *XsdGoPkgHasElemVkern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemVkern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Vkern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFontFaceSrc defines XsdGoPkgHasElemsFontFaceSrc
type XsdGoPkgHasElemsFontFaceSrc struct {
	FontFaceSrcs []*TfontFaceSrcType `xml:"http://www.w3.org/2000/svg font-face-src"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFontFaceSrc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFontFaceSrc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFontFaceSrc instance.
func (me *XsdGoPkgHasElemsFontFaceSrc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFontFaceSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FontFaceSrcs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFontFaceURI defines XsdGoPkgHasElemFontFaceURI
type XsdGoPkgHasElemFontFaceURI struct {
	FontFaceURI *TfontFaceURIType `xml:"http://www.w3.org/2000/svg font-face-uri"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFontFaceURI function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFontFaceURI instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFontFaceURI instance.
func (me *XsdGoPkgHasElemFontFaceURI) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFontFaceURI; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FontFaceURI.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsFontFaceFormat defines XsdGoPkgHasElemsFontFaceFormat
type XsdGoPkgHasElemsFontFaceFormat struct {
	FontFaceFormats []*TfontFaceFormatType `xml:"http://www.w3.org/2000/svg font-face-format"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsFontFaceFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsFontFaceFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsFontFaceFormat instance.
func (me *XsdGoPkgHasElemsFontFaceFormat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsFontFaceFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FontFaceFormats {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemFontFaceName defines XsdGoPkgHasElemFontFaceName
type XsdGoPkgHasElemFontFaceName struct {
	FontFaceName *TfontFaceNameType `xml:"http://www.w3.org/2000/svg font-face-name"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemFontFaceName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemFontFaceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemFontFaceName instance.
func (me *XsdGoPkgHasElemFontFaceName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemFontFaceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FontFaceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsDefinitionSrc defines XsdGoPkgHasElemsDefinitionSrc
type XsdGoPkgHasElemsDefinitionSrc struct {
	DefinitionSrcs []*TdefinitionSrcType `xml:"http://www.w3.org/2000/svg definition-src"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsDefinitionSrc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsDefinitionSrc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsDefinitionSrc instance.
func (me *XsdGoPkgHasElemsDefinitionSrc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsDefinitionSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DefinitionSrcs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemForeignObject defines XsdGoPkgHasElemForeignObject
type XsdGoPkgHasElemForeignObject struct {
	ForeignObject *TforeignObjectType `xml:"http://www.w3.org/2000/svg foreignObject"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemForeignObject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemForeignObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemForeignObject instance.
func (me *XsdGoPkgHasElemForeignObject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemForeignObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ForeignObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TLanguageCodeType a language code, as per [RFC3066]
type TLanguageCodeType xsdt.String

// Set : Since TLanguageCodeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLanguageCodeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TLanguageCodeType is just a simple String type, this merely returns the current string value.
func (me TLanguageCodeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TLanguageCodeType's alias type xsdt.String.
func (me TLanguageCodeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// TNumberOrPercentageType a <number> or a  <percentage>
type TNumberOrPercentageType xsdt.String

// Set : Since TNumberOrPercentageType is just a simple String type, this merely sets the current value from the specified string.
func (me *TNumberOrPercentageType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TNumberOrPercentageType is just a simple String type, this merely returns the current string value.
func (me TNumberOrPercentageType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TNumberOrPercentageType's alias type xsdt.String.
func (me TNumberOrPercentageType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// TLinkTargetType link to this target
type TLinkTargetType xsdt.String

// Set : Since TLinkTargetType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLinkTargetType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TLinkTargetType is just a simple String type, this merely returns the current string value.
func (me TLinkTargetType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TLinkTargetType's alias type xsdt.String.
func (me TLinkTargetType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// TNumbersType list of <number>s
type TNumbersType xsdt.String

// String : Since TNumbersType is just a simple String type, this merely returns the current string value.
func (me TNumbersType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TNumbersType's alias type xsdt.String.
func (me TNumbersType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TNumbersType is just a simple String type, this merely sets the current value from the specified string.
func (me *TNumbersType) Set(s string) { (*xsdt.String)(me).Set(s) }

// TKerningValue 'kerning' property/attribute value (e.g., auto | <length>)
// auto | <length> | inherit
type TKerningValue xsdt.String

// String : Since TKerningValue is just a simple String type, this merely returns the current string value.
func (me TKerningValue) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TKerningValue's alias type xsdt.String.
func (me TKerningValue) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TKerningValue is just a simple String type, this merely sets the current value from the specified string.
func (me *TKerningValue) Set(s string) { (*xsdt.String)(me).Set(s) }

// TNumberOptionalNumberType list of <number>s, but at least one and at most two
type TNumberOptionalNumberType xsdt.String

// String : Since TNumberOptionalNumberType is just a simple String type, this merely returns the current string value.
func (me TNumberOptionalNumberType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TNumberOptionalNumberType's alias type xsdt.String.
func (me TNumberOptionalNumberType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TNumberOptionalNumberType is just a simple String type, this merely sets the current value from the specified string.
func (me *TNumberOptionalNumberType) Set(s string) { (*xsdt.String)(me).Set(s) }

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 245 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

// XsdGoPkgWalkHandlers Provides 245 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElemsPattern                                                func(*XsdGoPkgHasElemsPattern, bool) error
	XsdGoPkgHasElemsMask                                                   func(*XsdGoPkgHasElemsMask, bool) error
	XsdGoPkgHasElemMpath                                                   func(*XsdGoPkgHasElemMpath, bool) error
	XsdGoPkgHasElemsScript                                                 func(*XsdGoPkgHasElemsScript, bool) error
	TstyleType                                                             func(*TstyleType, bool) error
	XsdGoPkgHasElemsTextPath                                               func(*XsdGoPkgHasElemsTextPath, bool) error
	TmpathType                                                             func(*TmpathType, bool) error
	TfeDisplacementMapType                                                 func(*TfeDisplacementMapType, bool) error
	XsdGoPkgHasElemFeConvolveMatrix                                        func(*XsdGoPkgHasElemFeConvolveMatrix, bool) error
	TcircleType                                                            func(*TcircleType, bool) error
	XsdGoPkgHasElemsColorProfile                                           func(*XsdGoPkgHasElemsColorProfile, bool) error
	XsdGoPkgHasElemsFeConvolveMatrix                                       func(*XsdGoPkgHasElemsFeConvolveMatrix, bool) error
	XsdGoPkgHasElemPath                                                    func(*XsdGoPkgHasElemPath, bool) error
	XsdGoPkgHasElemCircle                                                  func(*XsdGoPkgHasElemCircle, bool) error
	XsdGoPkgHasElemSet                                                     func(*XsdGoPkgHasElemSet, bool) error
	XsdGoPkgHasElemsStyle                                                  func(*XsdGoPkgHasElemsStyle, bool) error
	XsdGoPkgHasElemsFeComponentTransfer                                    func(*XsdGoPkgHasElemsFeComponentTransfer, bool) error
	XsdGoPkgHasElemStyle                                                   func(*XsdGoPkgHasElemStyle, bool) error
	XsdGoPkgHasElemFont                                                    func(*XsdGoPkgHasElemFont, bool) error
	XsdGoPkgHasElemsMissingGlyph                                           func(*XsdGoPkgHasElemsMissingGlyph, bool) error
	XsdGoPkgHasGroupDescTitleMetadata                                      func(*XsdGoPkgHasGroupDescTitleMetadata, bool) error
	TfontFaceType                                                          func(*TfontFaceType, bool) error
	XsdGoPkgHasElemsFilter                                                 func(*XsdGoPkgHasElemsFilter, bool) error
	XsdGoPkgHasElemFeMergeNode                                             func(*XsdGoPkgHasElemFeMergeNode, bool) error
	XsdGoPkgHasElemFeSpecularLighting                                      func(*XsdGoPkgHasElemFeSpecularLighting, bool) error
	XsdGoPkgHasElemA                                                       func(*XsdGoPkgHasElemA, bool) error
	TdefinitionSrcType                                                     func(*TdefinitionSrcType, bool) error
	XsdGoPkgHasElemsFeColorMatrix                                          func(*XsdGoPkgHasElemsFeColorMatrix, bool) error
	TglyphType                                                             func(*TglyphType, bool) error
	XsdGoPkgHasElemImage                                                   func(*XsdGoPkgHasElemImage, bool) error
	XsdGoPkgHasElemLine                                                    func(*XsdGoPkgHasElemLine, bool) error
	XsdGoPkgHasElemAnimateTransform                                        func(*XsdGoPkgHasElemAnimateTransform, bool) error
	XsdGoPkgHasElemsDesc                                                   func(*XsdGoPkgHasElemsDesc, bool) error
	TgType                                                                 func(*TgType, bool) error
	XsdGoPkgHasElemPattern                                                 func(*XsdGoPkgHasElemPattern, bool) error
	TimageType                                                             func(*TimageType, bool) error
	XsdGoPkgHasElemsFeDisplacementMap                                      func(*XsdGoPkgHasElemsFeDisplacementMap, bool) error
	XsdGoPkgHasElemsGlyph                                                  func(*XsdGoPkgHasElemsGlyph, bool) error
	TfePointLightType                                                      func(*TfePointLightType, bool) error
	XsdGoPkgHasElemsFeComposite                                            func(*XsdGoPkgHasElemsFeComposite, bool) error
	XsdGoPkgHasElemFontFace                                                func(*XsdGoPkgHasElemFontFace, bool) error
	XsdGoPkgHasElemTref                                                    func(*XsdGoPkgHasElemTref, bool) error
	XsdGoPkgHasElemFeMerge                                                 func(*XsdGoPkgHasElemFeMerge, bool) error
	XsdGoPkgHasElemsUse                                                    func(*XsdGoPkgHasElemsUse, bool) error
	XsdGoPkgHasElemsLinearGradient                                         func(*XsdGoPkgHasElemsLinearGradient, bool) error
	XsdGoPkgHasElemFeFuncR                                                 func(*XsdGoPkgHasElemFeFuncR, bool) error
	TfeFloodType                                                           func(*TfeFloodType, bool) error
	TglyphRefType                                                          func(*TglyphRefType, bool) error
	TmissingGlyphType                                                      func(*TmissingGlyphType, bool) error
	XsdGoPkgHasCdata                                                       func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElemsTspan                                                  func(*XsdGoPkgHasElemsTspan, bool) error
	XsdGoPkgHasElemUse                                                     func(*XsdGoPkgHasElemUse, bool) error
	XsdGoPkgHasElemFeDiffuseLighting                                       func(*XsdGoPkgHasElemFeDiffuseLighting, bool) error
	XsdGoPkgHasElemsAltGlyphDef                                            func(*XsdGoPkgHasElemsAltGlyphDef, bool) error
	TfeBlendType                                                           func(*TfeBlendType, bool) error
	XsdGoPkgHasElemFilter                                                  func(*XsdGoPkgHasElemFilter, bool) error
	XsdGoPkgHasElemFeTile                                                  func(*XsdGoPkgHasElemFeTile, bool) error
	XsdGoPkgHasElemForeignObject                                           func(*XsdGoPkgHasElemForeignObject, bool) error
	XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType func(*XsdGoPkgHasElemMetadataalldescTitleMetadataschemaMetadataTmetadataType, bool) error
	XsdGoPkgHasElemsFeImage                                                func(*XsdGoPkgHasElemsFeImage, bool) error
	TdefsType                                                              func(*TdefsType, bool) error
	XsdGoPkgHasElemEllipse                                                 func(*XsdGoPkgHasElemEllipse, bool) error
	XsdGoPkgHasElemFeFlood                                                 func(*XsdGoPkgHasElemFeFlood, bool) error
	XsdGoPkgHasElemFeImage                                                 func(*XsdGoPkgHasElemFeImage, bool) error
	XsdGoPkgHasElemsTref                                                   func(*XsdGoPkgHasElemsTref, bool) error
	TfeGaussianBlurType                                                    func(*TfeGaussianBlurType, bool) error
	ThkernType                                                             func(*ThkernType, bool) error
	XsdGoPkgHasElemFeTurbulence                                            func(*XsdGoPkgHasElemFeTurbulence, bool) error
	TaltGlyphType                                                          func(*TaltGlyphType, bool) error
	XsdGoPkgHasElemPolygon                                                 func(*XsdGoPkgHasElemPolygon, bool) error
	TfontFaceNameType                                                      func(*TfontFaceNameType, bool) error
	XsdGoPkgHasElemsSwitch                                                 func(*XsdGoPkgHasElemsSwitch, bool) error
	XsdGoPkgHasElemFeSpotLight                                             func(*XsdGoPkgHasElemFeSpotLight, bool) error
	TfeCompositeType                                                       func(*TfeCompositeType, bool) error
	XsdGoPkgHasElemsG                                                      func(*XsdGoPkgHasElemsG, bool) error
	TsymbolType                                                            func(*TsymbolType, bool) error
	XsdGoPkgHasElemLinearGradient                                          func(*XsdGoPkgHasElemLinearGradient, bool) error
	XsdGoPkgHasElemsMpath                                                  func(*XsdGoPkgHasElemsMpath, bool) error
	TellipseType                                                           func(*TellipseType, bool) error
	XsdGoPkgHasElemsSvg                                                    func(*XsdGoPkgHasElemsSvg, bool) error
	TfontFaceSrcType                                                       func(*TfontFaceSrcType, bool) error
	XsdGoPkgHasElemsFeBlend                                                func(*XsdGoPkgHasElemsFeBlend, bool) error
	XsdGoPkgHasElemsLine                                                   func(*XsdGoPkgHasElemsLine, bool) error
	XsdGoPkgHasElemAltGlyphDef                                             func(*XsdGoPkgHasElemAltGlyphDef, bool) error
	TfeImageType                                                           func(*TfeImageType, bool) error
	XsdGoPkgHasElemMissingGlyph                                            func(*XsdGoPkgHasElemMissingGlyph, bool) error
	XsdGoPkgHasElemsFontFaceFormat                                         func(*XsdGoPkgHasElemsFontFaceFormat, bool) error
	XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType          func(*XsdGoPkgHasElemTitlealldescTitleMetadataschemaTitleTtitleType, bool) error
	XsdGoPkgHasElemsGlyphRef                                               func(*XsdGoPkgHasElemsGlyphRef, bool) error
	TmaskType                                                              func(*TmaskType, bool) error
	TstopType                                                              func(*TstopType, bool) error
	XsdGoPkgHasElemDefs                                                    func(*XsdGoPkgHasElemDefs, bool) error
	XsdGoPkgHasElemStop                                                    func(*XsdGoPkgHasElemStop, bool) error
	TtextType                                                              func(*TtextType, bool) error
	XsdGoPkgHasElemsFeDistantLight                                         func(*XsdGoPkgHasElemsFeDistantLight, bool) error
	XsdGoPkgHasElemsAnimateMotion                                          func(*XsdGoPkgHasElemsAnimateMotion, bool) error
	XsdGoPkgHasElemTspan                                                   func(*XsdGoPkgHasElemTspan, bool) error
	XsdGoPkgHasElemsFeFuncR                                                func(*XsdGoPkgHasElemsFeFuncR, bool) error
	TfilterType                                                            func(*TfilterType, bool) error
	XsdGoPkgHasElemSwitch                                                  func(*XsdGoPkgHasElemSwitch, bool) error
	TcolorProfileType                                                      func(*TcolorProfileType, bool) error
	TfeFuncGType                                                           func(*TfeFuncGType, bool) error
	TfeMergeType                                                           func(*TfeMergeType, bool) error
	TvkernType                                                             func(*TvkernType, bool) error
	XsdGoPkgHasElemFeBlend                                                 func(*XsdGoPkgHasElemFeBlend, bool) error
	XsdGoPkgHasElemFeGaussianBlur                                          func(*XsdGoPkgHasElemFeGaussianBlur, bool) error
	XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType             func(*XsdGoPkgHasElemDescalldescTitleMetadataschemaDescTdescType, bool) error
	XsdGoPkgHasElemsFontFaceURI                                            func(*XsdGoPkgHasElemsFontFaceURI, bool) error
	XsdGoPkgHasElemsRadialGradient                                         func(*XsdGoPkgHasElemsRadialGradient, bool) error
	XsdGoPkgHasElemVkern                                                   func(*XsdGoPkgHasElemVkern, bool) error
	TpolylineType                                                          func(*TpolylineType, bool) error
	XsdGoPkgHasElemFeFuncA                                                 func(*XsdGoPkgHasElemFeFuncA, bool) error
	XsdGoPkgHasElemFeDistantLight                                          func(*XsdGoPkgHasElemFeDistantLight, bool) error
	XsdGoPkgHasElemClipPath                                                func(*XsdGoPkgHasElemClipPath, bool) error
	XsdGoPkgHasElemFeComposite                                             func(*XsdGoPkgHasElemFeComposite, bool) error
	XsdGoPkgHasElemGlyph                                                   func(*XsdGoPkgHasElemGlyph, bool) error
	XsdGoPkgHasElemsPath                                                   func(*XsdGoPkgHasElemsPath, bool) error
	XsdGoPkgHasElemsFeFlood                                                func(*XsdGoPkgHasElemsFeFlood, bool) error
	TfeTurbulenceType                                                      func(*TfeTurbulenceType, bool) error
	XsdGoPkgHasElemsText                                                   func(*XsdGoPkgHasElemsText, bool) error
	TsvgType                                                               func(*TsvgType, bool) error
	XsdGoPkgHasElemMask                                                    func(*XsdGoPkgHasElemMask, bool) error
	TsetType                                                               func(*TsetType, bool) error
	XsdGoPkgHasElemsFeOffset                                               func(*XsdGoPkgHasElemsFeOffset, bool) error
	XsdGoPkgHasElemsClipPath                                               func(*XsdGoPkgHasElemsClipPath, bool) error
	XsdGoPkgHasElemsFePointLight                                           func(*XsdGoPkgHasElemsFePointLight, bool) error
	XsdGoPkgHasElemFeColorMatrix                                           func(*XsdGoPkgHasElemFeColorMatrix, bool) error
	XsdGoPkgHasElemScript                                                  func(*XsdGoPkgHasElemScript, bool) error
	XsdGoPkgHasElemsAnimateColor                                           func(*XsdGoPkgHasElemsAnimateColor, bool) error
	TuseType                                                               func(*TuseType, bool) error
	TfontFaceURIType                                                       func(*TfontFaceURIType, bool) error
	TfeFuncBType                                                           func(*TfeFuncBType, bool) error
	TfeDistantLightType                                                    func(*TfeDistantLightType, bool) error
	TtextPathType                                                          func(*TtextPathType, bool) error
	XsdGoPkgHasElemsRect                                                   func(*XsdGoPkgHasElemsRect, bool) error
	XsdGoPkgHasElemDefinitionSrc                                           func(*XsdGoPkgHasElemDefinitionSrc, bool) error
	TfeFuncAType                                                           func(*TfeFuncAType, bool) error
	XsdGoPkgHasElemRect                                                    func(*XsdGoPkgHasElemRect, bool) error
	TcursorType                                                            func(*TcursorType, bool) error
	XsdGoPkgHasElemsFeDiffuseLighting                                      func(*XsdGoPkgHasElemsFeDiffuseLighting, bool) error
	XsdGoPkgHasElemColorProfile                                            func(*XsdGoPkgHasElemColorProfile, bool) error
	TscriptType                                                            func(*TscriptType, bool) error
	XsdGoPkgHasElemsFeMorphology                                           func(*XsdGoPkgHasElemsFeMorphology, bool) error
	XsdGoPkgHasElemsForeignObject                                          func(*XsdGoPkgHasElemsForeignObject, bool) error
	XsdGoPkgHasElemFontFaceName                                            func(*XsdGoPkgHasElemFontFaceName, bool) error
	XsdGoPkgHasElemsDefinitionSrc                                          func(*XsdGoPkgHasElemsDefinitionSrc, bool) error
	XsdGoPkgHasElemsCursor                                                 func(*XsdGoPkgHasElemsCursor, bool) error
	XsdGoPkgHasElemsVkern                                                  func(*XsdGoPkgHasElemsVkern, bool) error
	XsdGoPkgHasElemsFeFuncG                                                func(*XsdGoPkgHasElemsFeFuncG, bool) error
	TanimateType                                                           func(*TanimateType, bool) error
	TclipPathType                                                          func(*TclipPathType, bool) error
	XsdGoPkgHasElemText                                                    func(*XsdGoPkgHasElemText, bool) error
	XsdGoPkgHasElemsStop                                                   func(*XsdGoPkgHasElemsStop, bool) error
	TforeignObjectType                                                     func(*TforeignObjectType, bool) error
	TaltGlyphItemType                                                      func(*TaltGlyphItemType, bool) error
	XsdGoPkgHasElemAnimateMotion                                           func(*XsdGoPkgHasElemAnimateMotion, bool) error
	XsdGoPkgHasElemFeFuncB                                                 func(*XsdGoPkgHasElemFeFuncB, bool) error
	XsdGoPkgHasElemsFeGaussianBlur                                         func(*XsdGoPkgHasElemsFeGaussianBlur, bool) error
	XsdGoPkgHasElemSvg                                                     func(*XsdGoPkgHasElemSvg, bool) error
	XsdGoPkgHasElemMarker                                                  func(*XsdGoPkgHasElemMarker, bool) error
	XsdGoPkgHasElemsFeSpecularLighting                                     func(*XsdGoPkgHasElemsFeSpecularLighting, bool) error
	XsdGoPkgHasElemsFeMergeNode                                            func(*XsdGoPkgHasElemsFeMergeNode, bool) error
	XsdGoPkgHasElemsFeFuncB                                                func(*XsdGoPkgHasElemsFeFuncB, bool) error
	XsdGoPkgHasElemFontFaceURI                                             func(*XsdGoPkgHasElemFontFaceURI, bool) error
	XsdGoPkgHasElemsA                                                      func(*XsdGoPkgHasElemsA, bool) error
	XsdGoPkgHasElemsCircle                                                 func(*XsdGoPkgHasElemsCircle, bool) error
	TlineType                                                              func(*TlineType, bool) error
	XsdGoPkgHasElemsMetadata                                               func(*XsdGoPkgHasElemsMetadata, bool) error
	TtspanType                                                             func(*TtspanType, bool) error
	TfeFuncRType                                                           func(*TfeFuncRType, bool) error
	TfontType                                                              func(*TfontType, bool) error
	TaType                                                                 func(*TaType, bool) error
	XsdGoPkgHasElemView                                                    func(*XsdGoPkgHasElemView, bool) error
	XsdGoPkgHasElemsSet                                                    func(*XsdGoPkgHasElemsSet, bool) error
	XsdGoPkgHasElemsView                                                   func(*XsdGoPkgHasElemsView, bool) error
	XsdGoPkgHasElemsAltGlyph                                               func(*XsdGoPkgHasElemsAltGlyph, bool) error
	TpolygonType                                                           func(*TpolygonType, bool) error
	XsdGoPkgHasElemAnimate                                                 func(*XsdGoPkgHasElemAnimate, bool) error
	TanimateTransformType                                                  func(*TanimateTransformType, bool) error
	XsdGoPkgHasElemFeDisplacementMap                                       func(*XsdGoPkgHasElemFeDisplacementMap, bool) error
	XsdGoPkgHasElemFeOffset                                                func(*XsdGoPkgHasElemFeOffset, bool) error
	TanimateColorType                                                      func(*TanimateColorType, bool) error
	TanimateMotionType                                                     func(*TanimateMotionType, bool) error
	TfeMorphologyType                                                      func(*TfeMorphologyType, bool) error
	XsdGoPkgHasElemsFeMerge                                                func(*XsdGoPkgHasElemsFeMerge, bool) error
	XsdGoPkgHasElemsMarker                                                 func(*XsdGoPkgHasElemsMarker, bool) error
	XsdGoPkgHasElemRadialGradient                                          func(*XsdGoPkgHasElemRadialGradient, bool) error
	XsdGoPkgHasElemsImage                                                  func(*XsdGoPkgHasElemsImage, bool) error
	TtrefType                                                              func(*TtrefType, bool) error
	XsdGoPkgHasElemsSymbol                                                 func(*XsdGoPkgHasElemsSymbol, bool) error
	XsdGoPkgHasElemFeComponentTransfer                                     func(*XsdGoPkgHasElemFeComponentTransfer, bool) error
	TrectType                                                              func(*TrectType, bool) error
	XsdGoPkgHasElemFontFaceSrc                                             func(*XsdGoPkgHasElemFontFaceSrc, bool) error
	TfeConvolveMatrixType                                                  func(*TfeConvolveMatrixType, bool) error
	TswitchType                                                            func(*TswitchType, bool) error
	TviewType                                                              func(*TviewType, bool) error
	TpatternType                                                           func(*TpatternType, bool) error
	XsdGoPkgHasElemsFontFaceName                                           func(*XsdGoPkgHasElemsFontFaceName, bool) error
	XsdGoPkgHasElemsDefs                                                   func(*XsdGoPkgHasElemsDefs, bool) error
	XsdGoPkgHasElemsFeSpotLight                                            func(*XsdGoPkgHasElemsFeSpotLight, bool) error
	TmetadataType                                                          func(*TmetadataType, bool) error
	XsdGoPkgHasElemsPolygon                                                func(*XsdGoPkgHasElemsPolygon, bool) error
	XsdGoPkgHasElemsPolyline                                               func(*XsdGoPkgHasElemsPolyline, bool) error
	XsdGoPkgHasElemAnimateColor                                            func(*XsdGoPkgHasElemAnimateColor, bool) error
	XsdGoPkgHasElemFontFaceFormat                                          func(*XsdGoPkgHasElemFontFaceFormat, bool) error
	XsdGoPkgHasElemsFeTurbulence                                           func(*XsdGoPkgHasElemsFeTurbulence, bool) error
	TfeOffsetType                                                          func(*TfeOffsetType, bool) error
	XsdGoPkgHasElemGlyphRef                                                func(*XsdGoPkgHasElemGlyphRef, bool) error
	XsdGoPkgHasElemsFontFaceSrc                                            func(*XsdGoPkgHasElemsFontFaceSrc, bool) error
	TfeTileType                                                            func(*TfeTileType, bool) error
	XsdGoPkgHasElemsFeFuncA                                                func(*XsdGoPkgHasElemsFeFuncA, bool) error
	TlinearGradientType                                                    func(*TlinearGradientType, bool) error
	XsdGoPkgHasElemFeFuncG                                                 func(*XsdGoPkgHasElemFeFuncG, bool) error
	TfeDiffuseLightingType                                                 func(*TfeDiffuseLightingType, bool) error
	XsdGoPkgHasElemsAltGlyphItem                                           func(*XsdGoPkgHasElemsAltGlyphItem, bool) error
	TaltGlyphDefType                                                       func(*TaltGlyphDefType, bool) error
	XsdGoPkgHasElemAltGlyphItem                                            func(*XsdGoPkgHasElemAltGlyphItem, bool) error
	TdescType                                                              func(*TdescType, bool) error
	TtitleType                                                             func(*TtitleType, bool) error
	TfeComponentTransferType                                               func(*TfeComponentTransferType, bool) error
	TradialGradientType                                                    func(*TradialGradientType, bool) error
	XsdGoPkgHasElemAltGlyph                                                func(*XsdGoPkgHasElemAltGlyph, bool) error
	XsdGoPkgHasElemsAnimate                                                func(*XsdGoPkgHasElemsAnimate, bool) error
	TfontFaceFormatType                                                    func(*TfontFaceFormatType, bool) error
	XsdGoPkgHasElemsFeTile                                                 func(*XsdGoPkgHasElemsFeTile, bool) error
	XsdGoPkgHasElemsHkern                                                  func(*XsdGoPkgHasElemsHkern, bool) error
	XsdGoPkgHasElemSymbol                                                  func(*XsdGoPkgHasElemSymbol, bool) error
	TfeColorMatrixType                                                     func(*TfeColorMatrixType, bool) error
	XsdGoPkgHasElemTextPath                                                func(*XsdGoPkgHasElemTextPath, bool) error
	XsdGoPkgHasElemHkern                                                   func(*XsdGoPkgHasElemHkern, bool) error
	TpathType                                                              func(*TpathType, bool) error
	XsdGoPkgHasElemsFontFace                                               func(*XsdGoPkgHasElemsFontFace, bool) error
	TfeSpecularLightingType                                                func(*TfeSpecularLightingType, bool) error
	TmarkerType                                                            func(*TmarkerType, bool) error
	XsdGoPkgHasElemPolyline                                                func(*XsdGoPkgHasElemPolyline, bool) error
	XsdGoPkgHasElemFeMorphology                                            func(*XsdGoPkgHasElemFeMorphology, bool) error
	XsdGoPkgHasElemsEllipse                                                func(*XsdGoPkgHasElemsEllipse, bool) error
	TfeMergeNodeType                                                       func(*TfeMergeNodeType, bool) error
	XsdGoPkgHasElemsFont                                                   func(*XsdGoPkgHasElemsFont, bool) error
	XsdGoPkgHasElemG                                                       func(*XsdGoPkgHasElemG, bool) error
	XsdGoPkgHasElemsAnimateTransform                                       func(*XsdGoPkgHasElemsAnimateTransform, bool) error
	XsdGoPkgHasElemsTitle                                                  func(*XsdGoPkgHasElemsTitle, bool) error
	TfeSpotLightType                                                       func(*TfeSpotLightType, bool) error
	XsdGoPkgHasElemFePointLight                                            func(*XsdGoPkgHasElemFePointLight, bool) error
	XsdGoPkgHasElemCursor                                                  func(*XsdGoPkgHasElemCursor, bool) error
}
