// Package goXmldsigCore : autogenerated by go-xsd
package goXmldsigCore

import (
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// XsdGoPkgHasCdata defines type CDATA
type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrIDXsdtID defines attribute IdXsdtId
type XsdGoPkgHasAttrIDXsdtID struct {
	ID xsdt.ID `xml:"http://www.w3.org/2000/09/xmldsig# Id,attr"`
}

// XsdGoPkgHasAttrMimeTypeXsdtString defines attribute MimeTypeXsdtString
type XsdGoPkgHasAttrMimeTypeXsdtString struct {
	MimeType xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# MimeType,attr"`
}

// XsdGoPkgHasAttrEncodingXsdtAnyURI defines attribute EncodingXsdtAnyURI
type XsdGoPkgHasAttrEncodingXsdtAnyURI struct {
	Encoding xsdt.AnyURI `xml:"http://www.w3.org/2000/09/xmldsig# Encoding,attr"`
}

// TObjectType defines TObjectType
type TObjectType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasAttrMimeTypeXsdtString

	XsdGoPkgHasAttrEncodingXsdtAnyURI
}

// Walk : if the WalkHandlers.TObjectType function is not nil (ie. was set by outside code), calls it with this TObjectType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TObjectType instance.
func (me *TObjectType) Walk() (err error) {
	if fn := WalkHandlers.TObjectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsObject defines XsdGoPkgHasElemsObject
type XsdGoPkgHasElemsObject struct {
	Objects []*TObjectType `xml:"http://www.w3.org/2000/09/xmldsig# Object"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsObject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsObject instance.
func (me *XsdGoPkgHasElemsObject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Objects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrAlgorithmXsdtAnyURI defines attribute AlgorithmXsdtAnyURI
type XsdGoPkgHasAttrAlgorithmXsdtAnyURI struct {
	Algorithm xsdt.AnyURI `xml:"http://www.w3.org/2000/09/xmldsig# Algorithm,attr"`
}

// TCanonicalizationMethodType defines TCanonicalizationMethodType
type TCanonicalizationMethodType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttrAlgorithmXsdtAnyURI
}

// Walk : if the WalkHandlers.TCanonicalizationMethodType function is not nil (ie. was set by outside code), calls it with this TCanonicalizationMethodType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TCanonicalizationMethodType instance.
func (me *TCanonicalizationMethodType) Walk() (err error) {
	if fn := WalkHandlers.TCanonicalizationMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemCanonicalizationMethod defines XsdGoPkgHasElemCanonicalizationMethod
type XsdGoPkgHasElemCanonicalizationMethod struct {
	CanonicalizationMethod *TCanonicalizationMethodType `xml:"http://www.w3.org/2000/09/xmldsig# CanonicalizationMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemCanonicalizationMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemCanonicalizationMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemCanonicalizationMethod instance.
func (me *XsdGoPkgHasElemCanonicalizationMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemCanonicalizationMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CanonicalizationMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// THMACOutputLengthType defines THMACOutputLengthType
type THMACOutputLengthType xsdt.Integer

// ToXsdtInteger : This convenience method just performs a simple type conversion to THMACOutputLengthType's alias type xsdt.Integer.
func (me THMACOutputLengthType) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

// Set : Since THMACOutputLengthType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *THMACOutputLengthType) Set(s string) { (*xsdt.Integer)(me).Set(s) }

// String : Returns a string representation of this THMACOutputLengthType's current non-string scalar value.
func (me THMACOutputLengthType) String() string { return xsdt.Integer(me).String() }

// XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType defines XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType
type XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType struct {
	HMACOutputLength THMACOutputLengthType `xml:"http://www.w3.org/2000/09/xmldsig# HMACOutputLength"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType instance.
func (me *XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSignatureMethodType defines TSignatureMethodType
type TSignatureMethodType struct {
	XsdGoPkgHasAttrAlgorithmXsdtAnyURI

	XsdGoPkgHasCdata

	XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType
}

// Walk : if the WalkHandlers.TSignatureMethodType function is not nil (ie. was set by outside code), calls it with this TSignatureMethodType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TSignatureMethodType instance.
func (me *TSignatureMethodType) Walk() (err error) {
	if fn := WalkHandlers.TSignatureMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSignatureMethod defines XsdGoPkgHasElemSignatureMethod
type XsdGoPkgHasElemSignatureMethod struct {
	SignatureMethod *TSignatureMethodType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSignatureMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSignatureMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSignatureMethod instance.
func (me *XsdGoPkgHasElemSignatureMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSignatureMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrURIXsdtAnyURI defines attribute UriXsdtAnyURI
type XsdGoPkgHasAttrURIXsdtAnyURI struct {
	URI xsdt.AnyURI `xml:"http://www.w3.org/2000/09/xmldsig# URI,attr"`
}

// XsdGoPkgHasAttrTypeXsdtAnyURI defines attribute TypeXsdtAnyURI
type XsdGoPkgHasAttrTypeXsdtAnyURI struct {
	Type xsdt.AnyURI `xml:"http://www.w3.org/2000/09/xmldsig# Type,attr"`
}

// XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString defines XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString
type XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString struct {
	XPaths []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# XPath"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString instance.
func (me *XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TransformType defines TransformType
type TransformType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString

	XsdGoPkgHasAttrAlgorithmXsdtAnyURI
}

// Walk : if the WalkHandlers.TransformType function is not nil (ie. was set by outside code), calls it with this TransformType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TransformType instance.
func (me *TransformType) Walk() (err error) {
	if fn := WalkHandlers.TransformType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTransform defines XsdGoPkgHasElemsTransform
type XsdGoPkgHasElemsTransform struct {
	Transforms []*TransformType `xml:"http://www.w3.org/2000/09/xmldsig# Transform"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTransform function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTransform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTransform instance.
func (me *XsdGoPkgHasElemsTransform) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTransform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transforms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TransformsType defines TransformsType
type TransformsType struct {
	XsdGoPkgHasElemsTransform
}

// Walk : if the WalkHandlers.TransformsType function is not nil (ie. was set by outside code), calls it with this TransformsType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TransformsType instance.
func (me *TransformsType) Walk() (err error) {
	if fn := WalkHandlers.TransformsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTransforms defines XsdGoPkgHasElemTransforms
type XsdGoPkgHasElemTransforms struct {
	Transforms *TransformsType `xml:"http://www.w3.org/2000/09/xmldsig# Transforms"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTransforms function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTransforms instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemTransforms instance.
func (me *XsdGoPkgHasElemTransforms) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTransforms; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TDigestMethodType defines TDigestMethodType
type TDigestMethodType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttrAlgorithmXsdtAnyURI
}

// Walk : if the WalkHandlers.TDigestMethodType function is not nil (ie. was set by outside code), calls it with this TDigestMethodType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TDigestMethodType instance.
func (me *TDigestMethodType) Walk() (err error) {
	if fn := WalkHandlers.TDigestMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemDigestMethod defines XsdGoPkgHasElemDigestMethod
type XsdGoPkgHasElemDigestMethod struct {
	DigestMethod *TDigestMethodType `xml:"http://www.w3.org/2000/09/xmldsig# DigestMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemDigestMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemDigestMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemDigestMethod instance.
func (me *XsdGoPkgHasElemDigestMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemDigestMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DigestMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TDigestValueType defines TDigestValueType
type TDigestValueType xsdt.Base64Binary

// Set : Since TDigestValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TDigestValueType) Set(s string) { (*xsdt.Base64Binary)(me).Set(s) }

// String : Since TDigestValueType is just a simple String type, this merely returns the current string value.
func (me TDigestValueType) String() string { return xsdt.Base64Binary(me).String() }

// ToXsdtBase64Binary : This convenience method just performs a simple type conversion to TDigestValueType's alias type xsdt.Base64Binary.
func (me TDigestValueType) ToXsdtBase64Binary() xsdt.Base64Binary { return xsdt.Base64Binary(me) }

// XsdGoPkgHasElemDigestValue defines XsdGoPkgHasElemDigestValue
type XsdGoPkgHasElemDigestValue struct {
	DigestValue TDigestValueType `xml:"http://www.w3.org/2000/09/xmldsig# DigestValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemDigestValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemDigestValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemDigestValue instance.
func (me *XsdGoPkgHasElemDigestValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemDigestValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TReferenceType defines TReferenceType
type TReferenceType struct {
	XsdGoPkgHasElemTransforms

	XsdGoPkgHasElemDigestMethod

	XsdGoPkgHasElemDigestValue

	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasAttrURIXsdtAnyURI

	XsdGoPkgHasAttrTypeXsdtAnyURI
}

// Walk : if the WalkHandlers.TReferenceType function is not nil (ie. was set by outside code), calls it with this TReferenceType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TReferenceType instance.
func (me *TReferenceType) Walk() (err error) {
	if fn := WalkHandlers.TReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemTransforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemDigestMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemDigestValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsReference defines XsdGoPkgHasElemsReference
type XsdGoPkgHasElemsReference struct {
	References []*TReferenceType `xml:"http://www.w3.org/2000/09/xmldsig# Reference"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsReference instance.
func (me *XsdGoPkgHasElemsReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.References {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSignedInfoType defines TSignedInfoType
type TSignedInfoType struct {
	XsdGoPkgHasElemCanonicalizationMethod

	XsdGoPkgHasElemSignatureMethod

	XsdGoPkgHasElemsReference

	XsdGoPkgHasAttrIDXsdtID
}

// Walk : if the WalkHandlers.TSignedInfoType function is not nil (ie. was set by outside code), calls it with this TSignedInfoType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TSignedInfoType instance.
func (me *TSignedInfoType) Walk() (err error) {
	if fn := WalkHandlers.TSignedInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemSignatureMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemCanonicalizationMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSignedInfo defines XsdGoPkgHasElemSignedInfo
type XsdGoPkgHasElemSignedInfo struct {
	SignedInfo *TSignedInfoType `xml:"http://www.w3.org/2000/09/xmldsig# SignedInfo"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSignedInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSignedInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSignedInfo instance.
func (me *XsdGoPkgHasElemSignedInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSignedInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignedInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasBase64BinaryCdata defines XsdGoPkgHasBase64BinaryCdata
type XsdGoPkgHasBase64BinaryCdata struct {
	XsdGoPkgCDATA xsdt.Base64Binary `xml:",chardata"`
}

// TSignatureValueType defines TSignatureValueType
type TSignatureValueType struct {
	XsdGoPkgHasBase64BinaryCdata

	XsdGoPkgHasAttrIDXsdtID
}

// Walk : if the WalkHandlers.TSignatureValueType function is not nil (ie. was set by outside code), calls it with this TSignatureValueType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TSignatureValueType instance.
func (me *TSignatureValueType) Walk() (err error) {
	if fn := WalkHandlers.TSignatureValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSignatureValue defines XsdGoPkgHasElemSignatureValue
type XsdGoPkgHasElemSignatureValue struct {
	SignatureValue *TSignatureValueType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSignatureValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSignatureValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSignatureValue instance.
func (me *XsdGoPkgHasElemSignatureValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSignatureValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsKeyName defines XsdGoPkgHasElemsKeyName
type XsdGoPkgHasElemsKeyName struct {
	KeyNames []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# KeyName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsKeyName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsKeyName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsKeyName instance.
func (me *XsdGoPkgHasElemsKeyName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsKeyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TRetrievalMethodType defines TRetrievalMethodType
type TRetrievalMethodType struct {
	XsdGoPkgHasElemTransforms

	XsdGoPkgHasAttrURIXsdtAnyURI

	XsdGoPkgHasAttrTypeXsdtAnyURI
}

// Walk : if the WalkHandlers.TRetrievalMethodType function is not nil (ie. was set by outside code), calls it with this TRetrievalMethodType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TRetrievalMethodType instance.
func (me *TRetrievalMethodType) Walk() (err error) {
	if fn := WalkHandlers.TRetrievalMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemTransforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRetrievalMethod defines XsdGoPkgHasElemsRetrievalMethod
type XsdGoPkgHasElemsRetrievalMethod struct {
	RetrievalMethods []*TRetrievalMethodType `xml:"http://www.w3.org/2000/09/xmldsig# RetrievalMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRetrievalMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRetrievalMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRetrievalMethod instance.
func (me *XsdGoPkgHasElemsRetrievalMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRetrievalMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RetrievalMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary defines XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary
type XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary struct {
	PGPKeyID xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary defines XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary
type XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary struct {
	PGPKeyPacket xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyPacket"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TPGPDataType defines TPGPDataType
type TPGPDataType struct {
	XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary

	XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary
}

// Walk : if the WalkHandlers.TPGPDataType function is not nil (ie. was set by outside code), calls it with this TPGPDataType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPGPDataType instance.
func (me *TPGPDataType) Walk() (err error) {
	if fn := WalkHandlers.TPGPDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPGPData defines XsdGoPkgHasElemsPGPData
type XsdGoPkgHasElemsPGPData struct {
	PGPDatas []*TPGPDataType `xml:"http://www.w3.org/2000/09/xmldsig# PGPData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPGPData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPGPData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPGPData instance.
func (me *XsdGoPkgHasElemsPGPData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPGPData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PGPDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary defines XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary
type XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary struct {
	SPKISexps []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# SPKISexp"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSPKIDataType defines TSPKIDataType
type TSPKIDataType struct {
	XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary
}

// Walk : if the WalkHandlers.TSPKIDataType function is not nil (ie. was set by outside code), calls it with this TSPKIDataType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSPKIDataType instance.
func (me *TSPKIDataType) Walk() (err error) {
	if fn := WalkHandlers.TSPKIDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSPKIData defines XsdGoPkgHasElemsSPKIData
type XsdGoPkgHasElemsSPKIData struct {
	SPKIDatas []*TSPKIDataType `xml:"http://www.w3.org/2000/09/xmldsig# SPKIData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSPKIData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSPKIData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSPKIData instance.
func (me *XsdGoPkgHasElemsSPKIData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSPKIData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SPKIDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TCryptoBinary defines TCryptoBinary
type TCryptoBinary xsdt.Base64Binary

// Set : Since TCryptoBinary is just a simple String type, this merely sets the current value from the specified string.
func (me *TCryptoBinary) Set(s string) { (*xsdt.Base64Binary)(me).Set(s) }

// String : Since TCryptoBinary is just a simple String type, this merely returns the current string value.
func (me TCryptoBinary) String() string { return xsdt.Base64Binary(me).String() }

// ToXsdtBase64Binary : This convenience method just performs a simple type conversion to TCryptoBinary's alias type xsdt.Base64Binary.
func (me TCryptoBinary) ToXsdtBase64Binary() xsdt.Base64Binary { return xsdt.Base64Binary(me) }

// XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary defines XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary
type XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary struct {
	G TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# G"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary instance.
func (me *XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary defines XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary
type XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary struct {
	Y TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Y"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary instance.
func (me *XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary defines XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary
type XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary struct {
	J TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# J"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary instance.
func (me *XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary defines XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary
type XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary struct {
	P TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# P"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary instance.
func (me *XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary defines XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary
type XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary struct {
	Q TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Q"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary instance.
func (me *XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary defines XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary
type XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary struct {
	Seed TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Seed"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary instance.
func (me *XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary defines XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary
type XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary struct {
	PgenCounter TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# PgenCounter"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary instance.
func (me *XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TDSAKeyValueType defines TDSAKeyValueType
type TDSAKeyValueType struct {
	XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary

	XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary

	XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary

	XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary

	XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary

	XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary

	XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary
}

// Walk : if the WalkHandlers.TDSAKeyValueType function is not nil (ie. was set by outside code), calls it with this TDSAKeyValueType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TDSAKeyValueType instance.
func (me *TDSAKeyValueType) Walk() (err error) {
	if fn := WalkHandlers.TDSAKeyValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemDSAKeyValue defines XsdGoPkgHasElemDSAKeyValue
type XsdGoPkgHasElemDSAKeyValue struct {
	DSAKeyValue *TDSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# DSAKeyValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemDSAKeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemDSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemDSAKeyValue instance.
func (me *XsdGoPkgHasElemDSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemDSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary defines XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary
type XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary struct {
	Modulus TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Modulus"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary instance.
func (me *XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary defines XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary
type XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary struct {
	Exponent TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Exponent"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary instance.
func (me *XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TRSAKeyValueType defines TRSAKeyValueType
type TRSAKeyValueType struct {
	XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary

	XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary
}

// Walk : if the WalkHandlers.TRSAKeyValueType function is not nil (ie. was set by outside code), calls it with this TRSAKeyValueType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TRSAKeyValueType instance.
func (me *TRSAKeyValueType) Walk() (err error) {
	if fn := WalkHandlers.TRSAKeyValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRSAKeyValue defines XsdGoPkgHasElemRSAKeyValue
type XsdGoPkgHasElemRSAKeyValue struct {
	RSAKeyValue *TRSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# RSAKeyValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRSAKeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemRSAKeyValue instance.
func (me *XsdGoPkgHasElemRSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeyValueType defines TKeyValueType
type TKeyValueType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElemDSAKeyValue

	XsdGoPkgHasElemRSAKeyValue
}

// Walk : if the WalkHandlers.TKeyValueType function is not nil (ie. was set by outside code), calls it with this TKeyValueType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TKeyValueType instance.
func (me *TKeyValueType) Walk() (err error) {
	if fn := WalkHandlers.TKeyValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemDSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemRSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsKeyValue defines XsdGoPkgHasElemsKeyValue
type XsdGoPkgHasElemsKeyValue struct {
	KeyValues []*TKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# KeyValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsKeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsKeyValue instance.
func (me *XsdGoPkgHasElemsKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString defines XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString
type XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString struct {
	X509IssuerName xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString instance.
func (me *XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger defines XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger
type XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger struct {
	X509SerialNumber xsdt.Integer `xml:"http://www.w3.org/2000/09/xmldsig# X509SerialNumber"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger instance.
func (me *XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// Tx509IssuerSerialType defines Tx509IssuerSerialType
type Tx509IssuerSerialType struct {
	XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString

	XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger
}

// Walk : if the WalkHandlers.Tx509IssuerSerialType function is not nil (ie. was set by outside code), calls it with this Tx509IssuerSerialType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this Tx509IssuerSerialType instance.
func (me *Tx509IssuerSerialType) Walk() (err error) {
	if fn := WalkHandlers.Tx509IssuerSerialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType defines XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType
type XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType struct {
	X509IssuerSerial *Tx509IssuerSerialType `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerSerial"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType instance.
func (me *XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.X509IssuerSerial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary defines XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary
type XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary struct {
	X509Ski xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509SKI"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString defines XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString
type XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString struct {
	X509SubjectName xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509SubjectName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString instance.
func (me *XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary defines XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary
type XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary struct {
	X509Certificate xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509Certificate"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary defines XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary
type XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary struct {
	X509Crl xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509CRL"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// Tx509DataType defines Tx509DataType
type Tx509DataType struct {
	XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary

	XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType

	XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary

	XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString

	XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary
}

// Walk : if the WalkHandlers.Tx509DataType function is not nil (ie. was set by outside code), calls it with this Tx509DataType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this Tx509DataType instance.
func (me *Tx509DataType) Walk() (err error) {
	if fn := WalkHandlers.Tx509DataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsX509Data defines XsdGoPkgHasElemsX509Data
type XsdGoPkgHasElemsX509Data struct {
	X509Datas []*Tx509DataType `xml:"http://www.w3.org/2000/09/xmldsig# X509Data"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsX509Data function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsX509Data instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsX509Data instance.
func (me *XsdGoPkgHasElemsX509Data) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsX509Data; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.X509Datas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsMgmtData defines XsdGoPkgHasElemsMgmtData
type XsdGoPkgHasElemsMgmtData struct {
	MgmtDatas []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# MgmtData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsMgmtData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsMgmtData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsMgmtData instance.
func (me *XsdGoPkgHasElemsMgmtData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsMgmtData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeyInfoType defines TKeyInfoType
type TKeyInfoType struct {
	XsdGoPkgHasElemsMgmtData

	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasElemsKeyValue

	XsdGoPkgHasElemsX509Data

	XsdGoPkgHasElemsRetrievalMethod

	XsdGoPkgHasElemsPGPData

	XsdGoPkgHasElemsSPKIData

	XsdGoPkgHasCdata

	XsdGoPkgHasElemsKeyName
}

// Walk : if the WalkHandlers.TKeyInfoType function is not nil (ie. was set by outside code), calls it with this TKeyInfoType instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TKeyInfoType instance.
func (me *TKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.TKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsX509Data.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsMgmtData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsKeyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsRetrievalMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsPGPData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsSPKIData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemKeyInfo defines XsdGoPkgHasElemKeyInfo
type XsdGoPkgHasElemKeyInfo struct {
	KeyInfo *TKeyInfoType `xml:"http://www.w3.org/2000/09/xmldsig# KeyInfo"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemKeyInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemKeyInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemKeyInfo instance.
func (me *XsdGoPkgHasElemKeyInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemKeyInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSignatureType defines TSignatureType
type TSignatureType struct {
	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasElemSignedInfo

	XsdGoPkgHasElemSignatureValue

	XsdGoPkgHasElemKeyInfo

	XsdGoPkgHasElemsObject
}

// Walk : if the WalkHandlers.TSignatureType function is not nil (ie. was set by outside code), calls it with this TSignatureType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TSignatureType instance.
func (me *TSignatureType) Walk() (err error) {
	if fn := WalkHandlers.TSignatureType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemSignedInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemSignatureValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemKeyInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSignature defines XsdGoPkgHasElemsSignature
type XsdGoPkgHasElemsSignature struct {
	Signatures []*TSignatureType `xml:"http://www.w3.org/2000/09/xmldsig# Signature"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSignature function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSignature instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSignature instance.
func (me *XsdGoPkgHasElemsSignature) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSignature; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Signatures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSignature defines XsdGoPkgHasElemSignature
type XsdGoPkgHasElemSignature struct {
	Signature *TSignatureType `xml:"http://www.w3.org/2000/09/xmldsig# Signature"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSignature function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSignature instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSignature instance.
func (me *XsdGoPkgHasElemSignature) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSignature; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Signature.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSignatureValue defines XsdGoPkgHasElemsSignatureValue
type XsdGoPkgHasElemsSignatureValue struct {
	SignatureValues []*TSignatureValueType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSignatureValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSignatureValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSignatureValue instance.
func (me *XsdGoPkgHasElemsSignatureValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSignatureValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignatureValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSignedInfo defines XsdGoPkgHasElemsSignedInfo
type XsdGoPkgHasElemsSignedInfo struct {
	SignedInfos []*TSignedInfoType `xml:"http://www.w3.org/2000/09/xmldsig# SignedInfo"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSignedInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSignedInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSignedInfo instance.
func (me *XsdGoPkgHasElemsSignedInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSignedInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignedInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsCanonicalizationMethod defines XsdGoPkgHasElemsCanonicalizationMethod
type XsdGoPkgHasElemsCanonicalizationMethod struct {
	CanonicalizationMethods []*TCanonicalizationMethodType `xml:"http://www.w3.org/2000/09/xmldsig# CanonicalizationMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsCanonicalizationMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsCanonicalizationMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsCanonicalizationMethod instance.
func (me *XsdGoPkgHasElemsCanonicalizationMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsCanonicalizationMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CanonicalizationMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSignatureMethod defines XsdGoPkgHasElemsSignatureMethod
type XsdGoPkgHasElemsSignatureMethod struct {
	SignatureMethods []*TSignatureMethodType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSignatureMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSignatureMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSignatureMethod instance.
func (me *XsdGoPkgHasElemsSignatureMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSignatureMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignatureMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemReference defines XsdGoPkgHasElemReference
type XsdGoPkgHasElemReference struct {
	Reference *TReferenceType `xml:"http://www.w3.org/2000/09/xmldsig# Reference"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemReference instance.
func (me *XsdGoPkgHasElemReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTransforms defines XsdGoPkgHasElemsTransforms
type XsdGoPkgHasElemsTransforms struct {
	Transformses []*TransformsType `xml:"http://www.w3.org/2000/09/xmldsig# Transforms"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTransforms function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTransforms instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTransforms instance.
func (me *XsdGoPkgHasElemsTransforms) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTransforms; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transformses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTransform defines XsdGoPkgHasElemTransform
type XsdGoPkgHasElemTransform struct {
	Transform *TransformType `xml:"http://www.w3.org/2000/09/xmldsig# Transform"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTransform function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTransform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemTransform instance.
func (me *XsdGoPkgHasElemTransform) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTransform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsDigestMethod defines XsdGoPkgHasElemsDigestMethod
type XsdGoPkgHasElemsDigestMethod struct {
	DigestMethods []*TDigestMethodType `xml:"http://www.w3.org/2000/09/xmldsig# DigestMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsDigestMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsDigestMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsDigestMethod instance.
func (me *XsdGoPkgHasElemsDigestMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsDigestMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DigestMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsDigestValue defines XsdGoPkgHasElemsDigestValue
type XsdGoPkgHasElemsDigestValue struct {
	DigestValues []TDigestValueType `xml:"http://www.w3.org/2000/09/xmldsig# DigestValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsDigestValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsDigestValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsDigestValue instance.
func (me *XsdGoPkgHasElemsDigestValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsDigestValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsKeyInfo defines XsdGoPkgHasElemsKeyInfo
type XsdGoPkgHasElemsKeyInfo struct {
	KeyInfos []*TKeyInfoType `xml:"http://www.w3.org/2000/09/xmldsig# KeyInfo"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsKeyInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsKeyInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsKeyInfo instance.
func (me *XsdGoPkgHasElemsKeyInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsKeyInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemKeyName defines XsdGoPkgHasElemKeyName
type XsdGoPkgHasElemKeyName struct {
	KeyName xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# KeyName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemKeyName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemKeyName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemKeyName instance.
func (me *XsdGoPkgHasElemKeyName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemKeyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemMgmtData defines XsdGoPkgHasElemMgmtData
type XsdGoPkgHasElemMgmtData struct {
	MgmtData xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# MgmtData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemMgmtData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemMgmtData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemMgmtData instance.
func (me *XsdGoPkgHasElemMgmtData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemMgmtData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemKeyValue defines XsdGoPkgHasElemKeyValue
type XsdGoPkgHasElemKeyValue struct {
	KeyValue *TKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# KeyValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemKeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemKeyValue instance.
func (me *XsdGoPkgHasElemKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRetrievalMethod defines XsdGoPkgHasElemRetrievalMethod
type XsdGoPkgHasElemRetrievalMethod struct {
	RetrievalMethod *TRetrievalMethodType `xml:"http://www.w3.org/2000/09/xmldsig# RetrievalMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRetrievalMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRetrievalMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemRetrievalMethod instance.
func (me *XsdGoPkgHasElemRetrievalMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRetrievalMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RetrievalMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemX509Data defines XsdGoPkgHasElemX509Data
type XsdGoPkgHasElemX509Data struct {
	X509Data *Tx509DataType `xml:"http://www.w3.org/2000/09/xmldsig# X509Data"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemX509Data function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemX509Data instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemX509Data instance.
func (me *XsdGoPkgHasElemX509Data) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemX509Data; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.X509Data.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemPGPData defines XsdGoPkgHasElemPGPData
type XsdGoPkgHasElemPGPData struct {
	PGPData *TPGPDataType `xml:"http://www.w3.org/2000/09/xmldsig# PGPData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemPGPData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemPGPData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemPGPData instance.
func (me *XsdGoPkgHasElemPGPData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemPGPData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PGPData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSPKIData defines XsdGoPkgHasElemSPKIData
type XsdGoPkgHasElemSPKIData struct {
	SPKIData *TSPKIDataType `xml:"http://www.w3.org/2000/09/xmldsig# SPKIData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSPKIData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSPKIData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSPKIData instance.
func (me *XsdGoPkgHasElemSPKIData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSPKIData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SPKIData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemObject defines XsdGoPkgHasElemObject
type XsdGoPkgHasElemObject struct {
	Object *TObjectType `xml:"http://www.w3.org/2000/09/xmldsig# Object"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemObject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemObject instance.
func (me *XsdGoPkgHasElemObject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Object.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TManifestType defines TManifestType
type TManifestType struct {
	XsdGoPkgHasElemsReference

	XsdGoPkgHasAttrIDXsdtID
}

// Walk : if the WalkHandlers.TManifestType function is not nil (ie. was set by outside code), calls it with this TManifestType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TManifestType instance.
func (me *TManifestType) Walk() (err error) {
	if fn := WalkHandlers.TManifestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemManifest defines XsdGoPkgHasElemManifest
type XsdGoPkgHasElemManifest struct {
	Manifest *TManifestType `xml:"http://www.w3.org/2000/09/xmldsig# Manifest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemManifest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemManifest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemManifest instance.
func (me *XsdGoPkgHasElemManifest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemManifest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Manifest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsManifest defines XsdGoPkgHasElemsManifest
type XsdGoPkgHasElemsManifest struct {
	Manifests []*TManifestType `xml:"http://www.w3.org/2000/09/xmldsig# Manifest"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsManifest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsManifest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsManifest instance.
func (me *XsdGoPkgHasElemsManifest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsManifest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Manifests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrTargetXsdtAnyURI defines attribute TargetXsdtAnyURI
type XsdGoPkgHasAttrTargetXsdtAnyURI struct {
	Target xsdt.AnyURI `xml:"http://www.w3.org/2000/09/xmldsig# Target,attr"`
}

// TSignaturePropertyType defines TSignaturePropertyType
type TSignaturePropertyType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttrTargetXsdtAnyURI

	XsdGoPkgHasAttrIDXsdtID
}

// Walk : if the WalkHandlers.TSignaturePropertyType function is not nil (ie. was set by outside code), calls it with this TSignaturePropertyType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TSignaturePropertyType instance.
func (me *TSignaturePropertyType) Walk() (err error) {
	if fn := WalkHandlers.TSignaturePropertyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSignatureProperty defines XsdGoPkgHasElemsSignatureProperty
type XsdGoPkgHasElemsSignatureProperty struct {
	SignatureProperties []*TSignaturePropertyType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperty"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSignatureProperty function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSignatureProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSignatureProperty instance.
func (me *XsdGoPkgHasElemsSignatureProperty) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSignatureProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignatureProperties {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSignaturePropertiesType defines TSignaturePropertiesType
type TSignaturePropertiesType struct {
	XsdGoPkgHasElemsSignatureProperty

	XsdGoPkgHasAttrIDXsdtID
}

// Walk : if the WalkHandlers.TSignaturePropertiesType function is not nil (ie. was set by outside code), calls it with this TSignaturePropertiesType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSignaturePropertiesType instance.
func (me *TSignaturePropertiesType) Walk() (err error) {
	if fn := WalkHandlers.TSignaturePropertiesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsSignatureProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSignatureProperties defines XsdGoPkgHasElemSignatureProperties
type XsdGoPkgHasElemSignatureProperties struct {
	SignatureProperties *TSignaturePropertiesType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperties"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSignatureProperties function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSignatureProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSignatureProperties instance.
func (me *XsdGoPkgHasElemSignatureProperties) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSignatureProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSignatureProperties defines XsdGoPkgHasElemsSignatureProperties
type XsdGoPkgHasElemsSignatureProperties struct {
	SignaturePropertieses []*TSignaturePropertiesType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperties"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSignatureProperties function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSignatureProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSignatureProperties instance.
func (me *XsdGoPkgHasElemsSignatureProperties) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSignatureProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignaturePropertieses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSignatureProperty defines XsdGoPkgHasElemSignatureProperty
type XsdGoPkgHasElemSignatureProperty struct {
	SignatureProperty *TSignaturePropertyType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperty"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSignatureProperty function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSignatureProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemSignatureProperty instance.
func (me *XsdGoPkgHasElemSignatureProperty) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSignatureProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsDSAKeyValue defines XsdGoPkgHasElemsDSAKeyValue
type XsdGoPkgHasElemsDSAKeyValue struct {
	DSAKeyValues []*TDSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# DSAKeyValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsDSAKeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsDSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsDSAKeyValue instance.
func (me *XsdGoPkgHasElemsDSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsDSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DSAKeyValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRSAKeyValue defines XsdGoPkgHasElemsRSAKeyValue
type XsdGoPkgHasElemsRSAKeyValue struct {
	RSAKeyValues []*TRSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# RSAKeyValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRSAKeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRSAKeyValue instance.
func (me *XsdGoPkgHasElemsRSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RSAKeyValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString defines XsdGoPkgHasElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString
type XsdGoPkgHasElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString struct {
	X509SubjectNames []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509SubjectName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString instance.
func (me *XsdGoPkgHasElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary defines XsdGoPkgHasElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary
type XsdGoPkgHasElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary struct {
	Ys []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Y"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary instance.
func (me *XsdGoPkgHasElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary defines XsdGoPkgHasElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary
type XsdGoPkgHasElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary struct {
	Moduluses []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Modulus"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary instance.
func (me *XsdGoPkgHasElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary defines XsdGoPkgHasElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary
type XsdGoPkgHasElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary struct {
	SPKISexp xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# SPKISexp"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary defines XsdGoPkgHasElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary
type XsdGoPkgHasElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary struct {
	Qs []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Q"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary instance.
func (me *XsdGoPkgHasElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary defines XsdGoPkgHasElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary
type XsdGoPkgHasElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary struct {
	X509Crls []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509CRL"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary defines XsdGoPkgHasElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary
type XsdGoPkgHasElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary struct {
	PgenCounters []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# PgenCounter"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary instance.
func (me *XsdGoPkgHasElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary defines XsdGoPkgHasElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary
type XsdGoPkgHasElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary struct {
	PGPKeyPackets []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyPacket"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary defines XsdGoPkgHasElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary
type XsdGoPkgHasElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary struct {
	Js []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# J"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary instance.
func (me *XsdGoPkgHasElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType defines XsdGoPkgHasElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType
type XsdGoPkgHasElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType struct {
	X509IssuerSerials []*Tx509IssuerSerialType `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerSerial"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType instance.
func (me *XsdGoPkgHasElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.X509IssuerSerials {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary defines XsdGoPkgHasElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary
type XsdGoPkgHasElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary struct {
	Seeds []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Seed"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary instance.
func (me *XsdGoPkgHasElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary defines XsdGoPkgHasElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary
type XsdGoPkgHasElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary struct {
	PGPKeyIDs []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyID"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary defines XsdGoPkgHasElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary
type XsdGoPkgHasElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary struct {
	Exponents []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Exponent"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary instance.
func (me *XsdGoPkgHasElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary defines XsdGoPkgHasElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary
type XsdGoPkgHasElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary struct {
	X509Certificates []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509Certificate"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString defines XsdGoPkgHasElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString
type XsdGoPkgHasElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString struct {
	X509IssuerNames []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString instance.
func (me *XsdGoPkgHasElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary defines XsdGoPkgHasElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary
type XsdGoPkgHasElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary struct {
	Ps []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# P"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary instance.
func (me *XsdGoPkgHasElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary defines XsdGoPkgHasElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary
type XsdGoPkgHasElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary struct {
	X509Skis []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509SKI"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary defines XsdGoPkgHasElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary
type XsdGoPkgHasElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary struct {
	Gs []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# G"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary instance.
func (me *XsdGoPkgHasElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType defines XsdGoPkgHasElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType
type XsdGoPkgHasElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType struct {
	HMACOutputLengths []THMACOutputLengthType `xml:"http://www.w3.org/2000/09/xmldsig# HMACOutputLength"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType instance.
func (me *XsdGoPkgHasElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger defines XsdGoPkgHasElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger
type XsdGoPkgHasElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger struct {
	X509SerialNumbers []xsdt.Integer `xml:"http://www.w3.org/2000/09/xmldsig# X509SerialNumber"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger instance.
func (me *XsdGoPkgHasElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemXPathchoiceTransformTypeschemaXPathXsdtString defines XsdGoPkgHasElemXPathchoiceTransformTypeschemaXPathXsdtString
type XsdGoPkgHasElemXPathchoiceTransformTypeschemaXPathXsdtString struct {
	XPath xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# XPath"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemXPathchoiceTransformTypeschemaXPathXsdtString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemXPathchoiceTransformTypeschemaXPathXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemXPathchoiceTransformTypeschemaXPathXsdtString instance.
func (me *XsdGoPkgHasElemXPathchoiceTransformTypeschemaXPathXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemXPathchoiceTransformTypeschemaXPathXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 113 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

// XsdGoPkgWalkHandlers Provides 113 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TKeyValueType                                                                                          func(*TKeyValueType, bool) error
	XsdGoPkgHasElemRetrievalMethod                                                                         func(*XsdGoPkgHasElemRetrievalMethod, bool) error
	XsdGoPkgHasElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary                                   func(*XsdGoPkgHasElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary, bool) error
	XsdGoPkgHasElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary               func(*XsdGoPkgHasElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary, bool) error
	XsdGoPkgHasElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType func(*XsdGoPkgHasElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType, bool) error
	XsdGoPkgHasElemsRetrievalMethod                                                                        func(*XsdGoPkgHasElemsRetrievalMethod, bool) error
	XsdGoPkgHasElemPGPData                                                                                 func(*XsdGoPkgHasElemPGPData, bool) error
	XsdGoPkgHasElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary                             func(*XsdGoPkgHasElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary, bool) error
	XsdGoPkgHasElemKeyValue                                                                                func(*XsdGoPkgHasElemKeyValue, bool) error
	XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType  func(*XsdGoPkgHasElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType, bool) error
	XsdGoPkgHasElemTransforms                                                                              func(*XsdGoPkgHasElemTransforms, bool) error
	XsdGoPkgHasElemDigestValue                                                                             func(*XsdGoPkgHasElemDigestValue, bool) error
	XsdGoPkgHasElemSignedInfo                                                                              func(*XsdGoPkgHasElemSignedInfo, bool) error
	XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary                             func(*XsdGoPkgHasElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary, bool) error
	XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString                func(*XsdGoPkgHasElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString, bool) error
	XsdGoPkgHasElemXPathchoiceTransformTypeschemaXPathXsdtString                                           func(*XsdGoPkgHasElemXPathchoiceTransformTypeschemaXPathXsdtString, bool) error
	XsdGoPkgHasElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString               func(*XsdGoPkgHasElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString, bool) error
	XsdGoPkgHasElemsCanonicalizationMethod                                                                 func(*XsdGoPkgHasElemsCanonicalizationMethod, bool) error
	XsdGoPkgHasElemCanonicalizationMethod                                                                  func(*XsdGoPkgHasElemCanonicalizationMethod, bool) error
	TDigestMethodType                                                                                      func(*TDigestMethodType, bool) error
	XsdGoPkgHasElemSignatureValue                                                                          func(*XsdGoPkgHasElemSignatureValue, bool) error
	Tx509IssuerSerialType                                                                                  func(*Tx509IssuerSerialType, bool) error
	TSignaturePropertyType                                                                                 func(*TSignaturePropertyType, bool) error
	XsdGoPkgHasElemsRSAKeyValue                                                                            func(*XsdGoPkgHasElemsRSAKeyValue, bool) error
	XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary                                            func(*XsdGoPkgHasElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary, bool) error
	Tx509DataType                                                                                          func(*Tx509DataType, bool) error
	XsdGoPkgHasElemsMgmtData                                                                               func(*XsdGoPkgHasElemsMgmtData, bool) error
	XsdGoPkgHasElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary                                           func(*XsdGoPkgHasElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary, bool) error
	TDSAKeyValueType                                                                                       func(*TDSAKeyValueType, bool) error
	XsdGoPkgHasElemsKeyValue                                                                               func(*XsdGoPkgHasElemsKeyValue, bool) error
	XsdGoPkgHasElemTransform                                                                               func(*XsdGoPkgHasElemTransform, bool) error
	TSignaturePropertiesType                                                                               func(*TSignaturePropertiesType, bool) error
	XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString                                          func(*XsdGoPkgHasElemsXPathchoiceTransformTypeschemaXPathXsdtString, bool) error
	XsdGoPkgHasElemDigestMethod                                                                            func(*XsdGoPkgHasElemDigestMethod, bool) error
	XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary                              func(*XsdGoPkgHasElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary, bool) error
	XsdGoPkgHasElemsSignatureMethod                                                                        func(*XsdGoPkgHasElemsSignatureMethod, bool) error
	XsdGoPkgHasElemManifest                                                                                func(*XsdGoPkgHasElemManifest, bool) error
	TObjectType                                                                                            func(*TObjectType, bool) error
	XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary                 func(*XsdGoPkgHasElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary, bool) error
	XsdGoPkgHasElemsX509Data                                                                               func(*XsdGoPkgHasElemsX509Data, bool) error
	XsdGoPkgHasElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary                              func(*XsdGoPkgHasElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary, bool) error
	XsdGoPkgHasElemsObject                                                                                 func(*XsdGoPkgHasElemsObject, bool) error
	XsdGoPkgHasElemRSAKeyValue                                                                             func(*XsdGoPkgHasElemRSAKeyValue, bool) error
	XsdGoPkgHasElemSignatureProperties                                                                     func(*XsdGoPkgHasElemSignatureProperties, bool) error
	XsdGoPkgHasElemsDSAKeyValue                                                                            func(*XsdGoPkgHasElemsDSAKeyValue, bool) error
	XsdGoPkgHasElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString               func(*XsdGoPkgHasElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString, bool) error
	TSignatureValueType                                                                                    func(*TSignatureValueType, bool) error
	TPGPDataType                                                                                           func(*TPGPDataType, bool) error
	XsdGoPkgHasElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary                func(*XsdGoPkgHasElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary, bool) error
	XsdGoPkgHasElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType  func(*XsdGoPkgHasElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType, bool) error
	XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary          func(*XsdGoPkgHasElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary, bool) error
	TransformsType                                                                                         func(*TransformsType, bool) error
	XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary                         func(*XsdGoPkgHasElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary, bool) error
	XsdGoPkgHasElemsPGPData                                                                                func(*XsdGoPkgHasElemsPGPData, bool) error
	XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary                                    func(*XsdGoPkgHasElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary, bool) error
	XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString                func(*XsdGoPkgHasElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString, bool) error
	XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger           func(*XsdGoPkgHasElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger, bool) error
	XsdGoPkgHasElemKeyInfo                                                                                 func(*XsdGoPkgHasElemKeyInfo, bool) error
	TManifestType                                                                                          func(*TManifestType, bool) error
	XsdGoPkgHasElemsDigestMethod                                                                           func(*XsdGoPkgHasElemsDigestMethod, bool) error
	XsdGoPkgHasElemKeyName                                                                                 func(*XsdGoPkgHasElemKeyName, bool) error
	XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary                                            func(*XsdGoPkgHasElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary, bool) error
	TKeyInfoType                                                                                           func(*TKeyInfoType, bool) error
	XsdGoPkgHasElemsSignature                                                                              func(*XsdGoPkgHasElemsSignature, bool) error
	XsdGoPkgHasElemsSignatureValue                                                                         func(*XsdGoPkgHasElemsSignatureValue, bool) error
	XsdGoPkgHasElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary                                           func(*XsdGoPkgHasElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary, bool) error
	XsdGoPkgHasElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary                             func(*XsdGoPkgHasElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary, bool) error
	XsdGoPkgHasElemsTransform                                                                              func(*XsdGoPkgHasElemsTransform, bool) error
	XsdGoPkgHasElemsReference                                                                              func(*XsdGoPkgHasElemsReference, bool) error
	XsdGoPkgHasElemSPKIData                                                                                func(*XsdGoPkgHasElemSPKIData, bool) error
	XsdGoPkgHasElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary                         func(*XsdGoPkgHasElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary, bool) error
	XsdGoPkgHasElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary                        func(*XsdGoPkgHasElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary, bool) error
	XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary                          func(*XsdGoPkgHasElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary, bool) error
	XsdGoPkgHasElemsTransforms                                                                             func(*XsdGoPkgHasElemsTransforms, bool) error
	XsdGoPkgHasElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger          func(*XsdGoPkgHasElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger, bool) error
	XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary                func(*XsdGoPkgHasElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary, bool) error
	TRSAKeyValueType                                                                                       func(*TRSAKeyValueType, bool) error
	XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary                          func(*XsdGoPkgHasElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary, bool) error
	XsdGoPkgHasElemX509Data                                                                                func(*XsdGoPkgHasElemX509Data, bool) error
	XsdGoPkgHasElemsManifest                                                                               func(*XsdGoPkgHasElemsManifest, bool) error
	XsdGoPkgHasElemsSignatureProperties                                                                    func(*XsdGoPkgHasElemsSignatureProperties, bool) error
	XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary                                            func(*XsdGoPkgHasElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary, bool) error
	XsdGoPkgHasElemsSignedInfo                                                                             func(*XsdGoPkgHasElemsSignedInfo, bool) error
	XsdGoPkgHasElemSignatureProperty                                                                       func(*XsdGoPkgHasElemSignatureProperty, bool) error
	XsdGoPkgHasElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary         func(*XsdGoPkgHasElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary, bool) error
	XsdGoPkgHasElemSignatureMethod                                                                         func(*XsdGoPkgHasElemSignatureMethod, bool) error
	XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary                                func(*XsdGoPkgHasElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary, bool) error
	XsdGoPkgHasCdata                                                                                       func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary                                    func(*XsdGoPkgHasElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary, bool) error
	XsdGoPkgHasElemMgmtData                                                                                func(*XsdGoPkgHasElemMgmtData, bool) error
	XsdGoPkgHasElemObject                                                                                  func(*XsdGoPkgHasElemObject, bool) error
	TSignatureMethodType                                                                                   func(*TSignatureMethodType, bool) error
	TRetrievalMethodType                                                                                   func(*TRetrievalMethodType, bool) error
	XsdGoPkgHasElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary                                   func(*XsdGoPkgHasElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary, bool) error
	XsdGoPkgHasElemsKeyName                                                                                func(*XsdGoPkgHasElemsKeyName, bool) error
	XsdGoPkgHasElemsSPKIData                                                                               func(*XsdGoPkgHasElemsSPKIData, bool) error
	XsdGoPkgHasElemDSAKeyValue                                                                             func(*XsdGoPkgHasElemDSAKeyValue, bool) error
	XsdGoPkgHasElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary                         func(*XsdGoPkgHasElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary, bool) error
	TCanonicalizationMethodType                                                                            func(*TCanonicalizationMethodType, bool) error
	TReferenceType                                                                                         func(*TReferenceType, bool) error
	XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary                              func(*XsdGoPkgHasElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary, bool) error
	XsdGoPkgHasElemSignature                                                                               func(*XsdGoPkgHasElemSignature, bool) error
	TransformType                                                                                          func(*TransformType, bool) error
	TSignedInfoType                                                                                        func(*TSignedInfoType, bool) error
	XsdGoPkgHasElemReference                                                                               func(*XsdGoPkgHasElemReference, bool) error
	XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType   func(*XsdGoPkgHasElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType, bool) error
	TSignatureType                                                                                         func(*TSignatureType, bool) error
	XsdGoPkgHasElemsDigestValue                                                                            func(*XsdGoPkgHasElemsDigestValue, bool) error
	XsdGoPkgHasElemsKeyInfo                                                                                func(*XsdGoPkgHasElemsKeyInfo, bool) error
	XsdGoPkgHasElemsSignatureProperty                                                                      func(*XsdGoPkgHasElemsSignatureProperty, bool) error
	XsdGoPkgHasElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary                               func(*XsdGoPkgHasElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary, bool) error
	XsdGoPkgHasElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary                                           func(*XsdGoPkgHasElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary, bool) error
	TSPKIDataType                                                                                          func(*TSPKIDataType, bool) error
}
