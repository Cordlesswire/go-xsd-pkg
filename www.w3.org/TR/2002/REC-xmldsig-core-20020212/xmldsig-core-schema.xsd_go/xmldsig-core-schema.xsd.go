//	Auto-generated by the "go-xsd" package located at:
//		github.com/miracl/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd
package go_XmldsigCore

import (
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"http://www.w3.org/2000/09/xmldsig# Id,attr"`
}

type XsdGoPkgHasAttr_MimeType_XsdtString_ struct {
	MimeType xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# MimeType,attr"`
}

type XsdGoPkgHasAttr_Encoding_XsdtAnyURI_ struct {
	Encoding xsdt.AnyURI `xml:"http://www.w3.org/2000/09/xmldsig# Encoding,attr"`
}

type TObjectType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_MimeType_XsdtString_

	XsdGoPkgHasAttr_Encoding_XsdtAnyURI_
}

//	If the WalkHandlers.TObjectType function is not nil (ie. was set by outside code), calls it with this TObjectType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TObjectType instance.
func (me *TObjectType) Walk() (err error) {
	if fn := WalkHandlers.TObjectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Object struct {
	Objects []*TObjectType `xml:"http://www.w3.org/2000/09/xmldsig# Object"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Object function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Object instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Object instance.
func (me *XsdGoPkgHasElems_Object) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Object; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Objects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Algorithm_XsdtAnyURI_ struct {
	Algorithm xsdt.AnyURI `xml:"http://www.w3.org/2000/09/xmldsig# Algorithm,attr"`
}

type TCanonicalizationMethodType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Algorithm_XsdtAnyURI_
}

//	If the WalkHandlers.TCanonicalizationMethodType function is not nil (ie. was set by outside code), calls it with this TCanonicalizationMethodType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TCanonicalizationMethodType instance.
func (me *TCanonicalizationMethodType) Walk() (err error) {
	if fn := WalkHandlers.TCanonicalizationMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CanonicalizationMethod struct {
	CanonicalizationMethod *TCanonicalizationMethodType `xml:"http://www.w3.org/2000/09/xmldsig# CanonicalizationMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CanonicalizationMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CanonicalizationMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CanonicalizationMethod instance.
func (me *XsdGoPkgHasElem_CanonicalizationMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CanonicalizationMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CanonicalizationMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type THMACOutputLengthType xsdt.Integer

//	This convenience method just performs a simple type conversion to THMACOutputLengthType's alias type xsdt.Integer.
func (me THMACOutputLengthType) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

//	Since THMACOutputLengthType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *THMACOutputLengthType) Set(s string) { (*xsdt.Integer)(me).Set(s) }

//	Returns a string representation of this THMACOutputLengthType's current non-string scalar value.
func (me THMACOutputLengthType) String() string { return xsdt.Integer(me).String() }

type XsdGoPkgHasElem_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_ struct {
	HMACOutputLength THMACOutputLengthType `xml:"http://www.w3.org/2000/09/xmldsig# HMACOutputLength"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_ instance.
func (me *XsdGoPkgHasElem_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSignatureMethodType struct {
	XsdGoPkgHasAttr_Algorithm_XsdtAnyURI_

	XsdGoPkgHasCdata

	XsdGoPkgHasElem_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_
}

//	If the WalkHandlers.TSignatureMethodType function is not nil (ie. was set by outside code), calls it with this TSignatureMethodType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TSignatureMethodType instance.
func (me *TSignatureMethodType) Walk() (err error) {
	if fn := WalkHandlers.TSignatureMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SignatureMethod struct {
	SignatureMethod *TSignatureMethodType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SignatureMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SignatureMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SignatureMethod instance.
func (me *XsdGoPkgHasElem_SignatureMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SignatureMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Uri_XsdtAnyURI_ struct {
	Uri xsdt.AnyURI `xml:"http://www.w3.org/2000/09/xmldsig# URI,attr"`
}

type XsdGoPkgHasAttr_Type_XsdtAnyURI_ struct {
	Type xsdt.AnyURI `xml:"http://www.w3.org/2000/09/xmldsig# Type,attr"`
}

type XsdGoPkgHasElems_XPathchoiceTransformTypeschema_XPath_XsdtString_ struct {
	XPaths []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# XPath"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_XPathchoiceTransformTypeschema_XPath_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_XPathchoiceTransformTypeschema_XPath_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_XPathchoiceTransformTypeschema_XPath_XsdtString_ instance.
func (me *XsdGoPkgHasElems_XPathchoiceTransformTypeschema_XPath_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_XPathchoiceTransformTypeschema_XPath_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TransformType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_XPathchoiceTransformTypeschema_XPath_XsdtString_

	XsdGoPkgHasAttr_Algorithm_XsdtAnyURI_
}

//	If the WalkHandlers.TransformType function is not nil (ie. was set by outside code), calls it with this TransformType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TransformType instance.
func (me *TransformType) Walk() (err error) {
	if fn := WalkHandlers.TransformType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_XPathchoiceTransformTypeschema_XPath_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Transform struct {
	Transforms []*TransformType `xml:"http://www.w3.org/2000/09/xmldsig# Transform"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Transform function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Transform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Transform instance.
func (me *XsdGoPkgHasElems_Transform) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Transform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transforms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TransformsType struct {
	XsdGoPkgHasElems_Transform
}

//	If the WalkHandlers.TransformsType function is not nil (ie. was set by outside code), calls it with this TransformsType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TransformsType instance.
func (me *TransformsType) Walk() (err error) {
	if fn := WalkHandlers.TransformsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Transform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Transforms struct {
	Transforms *TransformsType `xml:"http://www.w3.org/2000/09/xmldsig# Transforms"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Transforms function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Transforms instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Transforms instance.
func (me *XsdGoPkgHasElem_Transforms) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Transforms; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDigestMethodType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Algorithm_XsdtAnyURI_
}

//	If the WalkHandlers.TDigestMethodType function is not nil (ie. was set by outside code), calls it with this TDigestMethodType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TDigestMethodType instance.
func (me *TDigestMethodType) Walk() (err error) {
	if fn := WalkHandlers.TDigestMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DigestMethod struct {
	DigestMethod *TDigestMethodType `xml:"http://www.w3.org/2000/09/xmldsig# DigestMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DigestMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DigestMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DigestMethod instance.
func (me *XsdGoPkgHasElem_DigestMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DigestMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DigestMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDigestValueType xsdt.Base64Binary

//	Since TDigestValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TDigestValueType) Set(s string) { (*xsdt.Base64Binary)(me).Set(s) }

//	Since TDigestValueType is just a simple String type, this merely returns the current string value.
func (me TDigestValueType) String() string { return xsdt.Base64Binary(me).String() }

//	This convenience method just performs a simple type conversion to TDigestValueType's alias type xsdt.Base64Binary.
func (me TDigestValueType) ToXsdtBase64Binary() xsdt.Base64Binary { return xsdt.Base64Binary(me) }

type XsdGoPkgHasElem_DigestValue struct {
	DigestValue TDigestValueType `xml:"http://www.w3.org/2000/09/xmldsig# DigestValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DigestValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DigestValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DigestValue instance.
func (me *XsdGoPkgHasElem_DigestValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DigestValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TReferenceType struct {
	XsdGoPkgHasElem_Transforms

	XsdGoPkgHasElem_DigestMethod

	XsdGoPkgHasElem_DigestValue

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Uri_XsdtAnyURI_

	XsdGoPkgHasAttr_Type_XsdtAnyURI_
}

//	If the WalkHandlers.TReferenceType function is not nil (ie. was set by outside code), calls it with this TReferenceType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TReferenceType instance.
func (me *TReferenceType) Walk() (err error) {
	if fn := WalkHandlers.TReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Transforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DigestMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DigestValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Reference struct {
	References []*TReferenceType `xml:"http://www.w3.org/2000/09/xmldsig# Reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Reference instance.
func (me *XsdGoPkgHasElems_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.References {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSignedInfoType struct {
	XsdGoPkgHasElem_CanonicalizationMethod

	XsdGoPkgHasElem_SignatureMethod

	XsdGoPkgHasElems_Reference

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TSignedInfoType function is not nil (ie. was set by outside code), calls it with this TSignedInfoType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TSignedInfoType instance.
func (me *TSignedInfoType) Walk() (err error) {
	if fn := WalkHandlers.TSignedInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SignatureMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CanonicalizationMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SignedInfo struct {
	SignedInfo *TSignedInfoType `xml:"http://www.w3.org/2000/09/xmldsig# SignedInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SignedInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SignedInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SignedInfo instance.
func (me *XsdGoPkgHasElem_SignedInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SignedInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignedInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasBase64BinaryCdata struct {
	XsdGoPkgCDATA xsdt.Base64Binary `xml:",chardata"`
}

type TSignatureValueType struct {
	XsdGoPkgHasBase64BinaryCdata

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TSignatureValueType function is not nil (ie. was set by outside code), calls it with this TSignatureValueType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TSignatureValueType instance.
func (me *TSignatureValueType) Walk() (err error) {
	if fn := WalkHandlers.TSignatureValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SignatureValue struct {
	SignatureValue *TSignatureValueType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SignatureValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SignatureValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SignatureValue instance.
func (me *XsdGoPkgHasElem_SignatureValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SignatureValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KeyName struct {
	KeyNames []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# KeyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KeyName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeyName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeyName instance.
func (me *XsdGoPkgHasElems_KeyName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KeyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRetrievalMethodType struct {
	XsdGoPkgHasElem_Transforms

	XsdGoPkgHasAttr_Uri_XsdtAnyURI_

	XsdGoPkgHasAttr_Type_XsdtAnyURI_
}

//	If the WalkHandlers.TRetrievalMethodType function is not nil (ie. was set by outside code), calls it with this TRetrievalMethodType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TRetrievalMethodType instance.
func (me *TRetrievalMethodType) Walk() (err error) {
	if fn := WalkHandlers.TRetrievalMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Transforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RetrievalMethod struct {
	RetrievalMethods []*TRetrievalMethodType `xml:"http://www.w3.org/2000/09/xmldsig# RetrievalMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RetrievalMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RetrievalMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RetrievalMethod instance.
func (me *XsdGoPkgHasElems_RetrievalMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RetrievalMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RetrievalMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_ struct {
	PGPKeyID xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElem_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_ struct {
	PGPKeyPacket xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyPacket"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElem_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPGPDataType struct {
	XsdGoPkgHasElem_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_

	XsdGoPkgHasElem_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_
}

//	If the WalkHandlers.TPGPDataType function is not nil (ie. was set by outside code), calls it with this TPGPDataType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPGPDataType instance.
func (me *TPGPDataType) Walk() (err error) {
	if fn := WalkHandlers.TPGPDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PGPData struct {
	PGPDatas []*TPGPDataType `xml:"http://www.w3.org/2000/09/xmldsig# PGPData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PGPData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PGPData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PGPData instance.
func (me *XsdGoPkgHasElems_PGPData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PGPData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PGPDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_ struct {
	SPKISexps []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# SPKISexp"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElems_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSPKIDataType struct {
	XsdGoPkgHasElems_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_
}

//	If the WalkHandlers.TSPKIDataType function is not nil (ie. was set by outside code), calls it with this TSPKIDataType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSPKIDataType instance.
func (me *TSPKIDataType) Walk() (err error) {
	if fn := WalkHandlers.TSPKIDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SPKIData struct {
	SPKIDatas []*TSPKIDataType `xml:"http://www.w3.org/2000/09/xmldsig# SPKIData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SPKIData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SPKIData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SPKIData instance.
func (me *XsdGoPkgHasElems_SPKIData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SPKIData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SPKIDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCryptoBinary xsdt.Base64Binary

//	Since TCryptoBinary is just a simple String type, this merely sets the current value from the specified string.
func (me *TCryptoBinary) Set(s string) { (*xsdt.Base64Binary)(me).Set(s) }

//	Since TCryptoBinary is just a simple String type, this merely returns the current string value.
func (me TCryptoBinary) String() string { return xsdt.Base64Binary(me).String() }

//	This convenience method just performs a simple type conversion to TCryptoBinary's alias type xsdt.Base64Binary.
func (me TCryptoBinary) ToXsdtBase64Binary() xsdt.Base64Binary { return xsdt.Base64Binary(me) }

type XsdGoPkgHasElem_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_ struct {
	G TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# G"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElem_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_ struct {
	Y TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Y"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElem_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_ struct {
	J TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# J"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElem_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_ struct {
	P TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# P"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElem_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_ struct {
	Q TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Q"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElem_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_ struct {
	Seed TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Seed"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElem_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_ struct {
	PgenCounter TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# PgenCounter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElem_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDSAKeyValueType struct {
	XsdGoPkgHasElem_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_

	XsdGoPkgHasElem_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_

	XsdGoPkgHasElem_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_

	XsdGoPkgHasElem_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_

	XsdGoPkgHasElem_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_

	XsdGoPkgHasElem_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_

	XsdGoPkgHasElem_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_
}

//	If the WalkHandlers.TDSAKeyValueType function is not nil (ie. was set by outside code), calls it with this TDSAKeyValueType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TDSAKeyValueType instance.
func (me *TDSAKeyValueType) Walk() (err error) {
	if fn := WalkHandlers.TDSAKeyValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DSAKeyValue struct {
	DSAKeyValue *TDSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# DSAKeyValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DSAKeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DSAKeyValue instance.
func (me *XsdGoPkgHasElem_DSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_ struct {
	Modulus TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Modulus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElem_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_ struct {
	Exponent TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Exponent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElem_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TRSAKeyValueType struct {
	XsdGoPkgHasElem_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_

	XsdGoPkgHasElem_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_
}

//	If the WalkHandlers.TRSAKeyValueType function is not nil (ie. was set by outside code), calls it with this TRSAKeyValueType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TRSAKeyValueType instance.
func (me *TRSAKeyValueType) Walk() (err error) {
	if fn := WalkHandlers.TRSAKeyValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RSAKeyValue struct {
	RSAKeyValue *TRSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# RSAKeyValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RSAKeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RSAKeyValue instance.
func (me *XsdGoPkgHasElem_RSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TKeyValueType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElem_DSAKeyValue

	XsdGoPkgHasElem_RSAKeyValue
}

//	If the WalkHandlers.TKeyValueType function is not nil (ie. was set by outside code), calls it with this TKeyValueType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TKeyValueType instance.
func (me *TKeyValueType) Walk() (err error) {
	if fn := WalkHandlers.TKeyValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KeyValue struct {
	KeyValues []*TKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# KeyValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeyValue instance.
func (me *XsdGoPkgHasElems_KeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_ struct {
	X509IssuerName xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_ struct {
	X509SerialNumber xsdt.Integer `xml:"http://www.w3.org/2000/09/xmldsig# X509SerialNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_ instance.
func (me *XsdGoPkgHasElem_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tx509IssuerSerialType struct {
	XsdGoPkgHasElem_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_

	XsdGoPkgHasElem_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_
}

//	If the WalkHandlers.Tx509IssuerSerialType function is not nil (ie. was set by outside code), calls it with this Tx509IssuerSerialType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this Tx509IssuerSerialType instance.
func (me *Tx509IssuerSerialType) Walk() (err error) {
	if fn := WalkHandlers.Tx509IssuerSerialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_ struct {
	X509IssuerSerial *Tx509IssuerSerialType `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerSerial"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_ instance.
func (me *XsdGoPkgHasElem_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.X509IssuerSerial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_ struct {
	X509Ski xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509SKI"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElem_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_ struct {
	X509SubjectName xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509SubjectName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_ struct {
	X509Certificate xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509Certificate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElem_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_ struct {
	X509Crl xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509CRL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElem_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tx509DataType struct {
	XsdGoPkgHasElem_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_

	XsdGoPkgHasElem_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_

	XsdGoPkgHasElem_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_

	XsdGoPkgHasElem_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_

	XsdGoPkgHasElem_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_
}

//	If the WalkHandlers.Tx509DataType function is not nil (ie. was set by outside code), calls it with this Tx509DataType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this Tx509DataType instance.
func (me *Tx509DataType) Walk() (err error) {
	if fn := WalkHandlers.Tx509DataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_X509Data struct {
	X509Datas []*Tx509DataType `xml:"http://www.w3.org/2000/09/xmldsig# X509Data"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_X509Data function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_X509Data instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_X509Data instance.
func (me *XsdGoPkgHasElems_X509Data) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_X509Data; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.X509Datas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MgmtData struct {
	MgmtDatas []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# MgmtData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MgmtData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MgmtData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MgmtData instance.
func (me *XsdGoPkgHasElems_MgmtData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MgmtData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TKeyInfoType struct {
	XsdGoPkgHasElems_MgmtData

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_KeyValue

	XsdGoPkgHasElems_X509Data

	XsdGoPkgHasElems_RetrievalMethod

	XsdGoPkgHasElems_PGPData

	XsdGoPkgHasElems_SPKIData

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_KeyName
}

//	If the WalkHandlers.TKeyInfoType function is not nil (ie. was set by outside code), calls it with this TKeyInfoType instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TKeyInfoType instance.
func (me *TKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.TKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_KeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_X509Data.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MgmtData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_KeyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RetrievalMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PGPData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SPKIData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KeyInfo struct {
	KeyInfo *TKeyInfoType `xml:"http://www.w3.org/2000/09/xmldsig# KeyInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KeyInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeyInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_KeyInfo instance.
func (me *XsdGoPkgHasElem_KeyInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeyInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSignatureType struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_SignedInfo

	XsdGoPkgHasElem_SignatureValue

	XsdGoPkgHasElem_KeyInfo

	XsdGoPkgHasElems_Object
}

//	If the WalkHandlers.TSignatureType function is not nil (ie. was set by outside code), calls it with this TSignatureType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TSignatureType instance.
func (me *TSignatureType) Walk() (err error) {
	if fn := WalkHandlers.TSignatureType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SignedInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignatureValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_KeyInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Object.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Signature struct {
	Signatures []*TSignatureType `xml:"http://www.w3.org/2000/09/xmldsig# Signature"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Signature function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Signature instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Signature instance.
func (me *XsdGoPkgHasElems_Signature) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Signature; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Signatures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Signature struct {
	Signature *TSignatureType `xml:"http://www.w3.org/2000/09/xmldsig# Signature"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Signature function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Signature instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Signature instance.
func (me *XsdGoPkgHasElem_Signature) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Signature; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Signature.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SignatureValue struct {
	SignatureValues []*TSignatureValueType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SignatureValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SignatureValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SignatureValue instance.
func (me *XsdGoPkgHasElems_SignatureValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SignatureValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignatureValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SignedInfo struct {
	SignedInfos []*TSignedInfoType `xml:"http://www.w3.org/2000/09/xmldsig# SignedInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SignedInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SignedInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SignedInfo instance.
func (me *XsdGoPkgHasElems_SignedInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SignedInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignedInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CanonicalizationMethod struct {
	CanonicalizationMethods []*TCanonicalizationMethodType `xml:"http://www.w3.org/2000/09/xmldsig# CanonicalizationMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CanonicalizationMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CanonicalizationMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CanonicalizationMethod instance.
func (me *XsdGoPkgHasElems_CanonicalizationMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CanonicalizationMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CanonicalizationMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SignatureMethod struct {
	SignatureMethods []*TSignatureMethodType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SignatureMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SignatureMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SignatureMethod instance.
func (me *XsdGoPkgHasElems_SignatureMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SignatureMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignatureMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Reference struct {
	Reference *TReferenceType `xml:"http://www.w3.org/2000/09/xmldsig# Reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Reference instance.
func (me *XsdGoPkgHasElem_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Transforms struct {
	Transformses []*TransformsType `xml:"http://www.w3.org/2000/09/xmldsig# Transforms"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Transforms function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Transforms instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Transforms instance.
func (me *XsdGoPkgHasElems_Transforms) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Transforms; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transformses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Transform struct {
	Transform *TransformType `xml:"http://www.w3.org/2000/09/xmldsig# Transform"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Transform function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Transform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Transform instance.
func (me *XsdGoPkgHasElem_Transform) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Transform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DigestMethod struct {
	DigestMethods []*TDigestMethodType `xml:"http://www.w3.org/2000/09/xmldsig# DigestMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DigestMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DigestMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DigestMethod instance.
func (me *XsdGoPkgHasElems_DigestMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DigestMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DigestMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DigestValue struct {
	DigestValues []TDigestValueType `xml:"http://www.w3.org/2000/09/xmldsig# DigestValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DigestValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DigestValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DigestValue instance.
func (me *XsdGoPkgHasElems_DigestValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DigestValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KeyInfo struct {
	KeyInfos []*TKeyInfoType `xml:"http://www.w3.org/2000/09/xmldsig# KeyInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KeyInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeyInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeyInfo instance.
func (me *XsdGoPkgHasElems_KeyInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KeyInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KeyName struct {
	KeyName xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# KeyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KeyName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeyName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_KeyName instance.
func (me *XsdGoPkgHasElem_KeyName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MgmtData struct {
	MgmtData xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# MgmtData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MgmtData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MgmtData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MgmtData instance.
func (me *XsdGoPkgHasElem_MgmtData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MgmtData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KeyValue struct {
	KeyValue *TKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# KeyValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_KeyValue instance.
func (me *XsdGoPkgHasElem_KeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RetrievalMethod struct {
	RetrievalMethod *TRetrievalMethodType `xml:"http://www.w3.org/2000/09/xmldsig# RetrievalMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RetrievalMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RetrievalMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RetrievalMethod instance.
func (me *XsdGoPkgHasElem_RetrievalMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RetrievalMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RetrievalMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_X509Data struct {
	X509Data *Tx509DataType `xml:"http://www.w3.org/2000/09/xmldsig# X509Data"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_X509Data function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_X509Data instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_X509Data instance.
func (me *XsdGoPkgHasElem_X509Data) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_X509Data; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.X509Data.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PGPData struct {
	PGPData *TPGPDataType `xml:"http://www.w3.org/2000/09/xmldsig# PGPData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PGPData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PGPData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PGPData instance.
func (me *XsdGoPkgHasElem_PGPData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PGPData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PGPData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SPKIData struct {
	SPKIData *TSPKIDataType `xml:"http://www.w3.org/2000/09/xmldsig# SPKIData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SPKIData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SPKIData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SPKIData instance.
func (me *XsdGoPkgHasElem_SPKIData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SPKIData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SPKIData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Object struct {
	Object *TObjectType `xml:"http://www.w3.org/2000/09/xmldsig# Object"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Object function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Object instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Object instance.
func (me *XsdGoPkgHasElem_Object) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Object; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Object.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TManifestType struct {
	XsdGoPkgHasElems_Reference

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TManifestType function is not nil (ie. was set by outside code), calls it with this TManifestType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TManifestType instance.
func (me *TManifestType) Walk() (err error) {
	if fn := WalkHandlers.TManifestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Manifest struct {
	Manifest *TManifestType `xml:"http://www.w3.org/2000/09/xmldsig# Manifest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Manifest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Manifest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Manifest instance.
func (me *XsdGoPkgHasElem_Manifest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Manifest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Manifest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Manifest struct {
	Manifests []*TManifestType `xml:"http://www.w3.org/2000/09/xmldsig# Manifest"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Manifest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Manifest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Manifest instance.
func (me *XsdGoPkgHasElems_Manifest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Manifest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Manifests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Target_XsdtAnyURI_ struct {
	Target xsdt.AnyURI `xml:"http://www.w3.org/2000/09/xmldsig# Target,attr"`
}

type TSignaturePropertyType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Target_XsdtAnyURI_

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TSignaturePropertyType function is not nil (ie. was set by outside code), calls it with this TSignaturePropertyType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TSignaturePropertyType instance.
func (me *TSignaturePropertyType) Walk() (err error) {
	if fn := WalkHandlers.TSignaturePropertyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SignatureProperty struct {
	SignatureProperties []*TSignaturePropertyType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SignatureProperty function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SignatureProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SignatureProperty instance.
func (me *XsdGoPkgHasElems_SignatureProperty) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SignatureProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignatureProperties {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSignaturePropertiesType struct {
	XsdGoPkgHasElems_SignatureProperty

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TSignaturePropertiesType function is not nil (ie. was set by outside code), calls it with this TSignaturePropertiesType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSignaturePropertiesType instance.
func (me *TSignaturePropertiesType) Walk() (err error) {
	if fn := WalkHandlers.TSignaturePropertiesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SignatureProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SignatureProperties struct {
	SignatureProperties *TSignaturePropertiesType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperties"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SignatureProperties function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SignatureProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SignatureProperties instance.
func (me *XsdGoPkgHasElem_SignatureProperties) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SignatureProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SignatureProperties struct {
	SignaturePropertieses []*TSignaturePropertiesType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperties"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SignatureProperties function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SignatureProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SignatureProperties instance.
func (me *XsdGoPkgHasElems_SignatureProperties) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SignatureProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignaturePropertieses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SignatureProperty struct {
	SignatureProperty *TSignaturePropertyType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SignatureProperty function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SignatureProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SignatureProperty instance.
func (me *XsdGoPkgHasElem_SignatureProperty) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SignatureProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DSAKeyValue struct {
	DSAKeyValues []*TDSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# DSAKeyValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DSAKeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DSAKeyValue instance.
func (me *XsdGoPkgHasElems_DSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DSAKeyValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RSAKeyValue struct {
	RSAKeyValues []*TRSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# RSAKeyValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RSAKeyValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RSAKeyValue instance.
func (me *XsdGoPkgHasElems_RSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RSAKeyValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_ struct {
	X509SubjectNames []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509SubjectName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_ struct {
	Ys []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Y"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElems_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_ struct {
	Moduluses []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Modulus"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElems_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_ struct {
	SPKISexp xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# SPKISexp"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElem_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_ struct {
	Qs []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Q"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElems_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_ struct {
	X509Crls []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509CRL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElems_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_ struct {
	PgenCounters []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# PgenCounter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElems_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_ struct {
	PGPKeyPackets []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyPacket"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElems_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_ struct {
	Js []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# J"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElems_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_ struct {
	X509IssuerSerials []*Tx509IssuerSerialType `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerSerial"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_ instance.
func (me *XsdGoPkgHasElems_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.X509IssuerSerials {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_ struct {
	Seeds []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Seed"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElems_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_ struct {
	PGPKeyIDs []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElems_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_ struct {
	Exponents []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Exponent"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElems_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_ struct {
	X509Certificates []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509Certificate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElems_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_ struct {
	X509IssuerNames []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_ struct {
	Ps []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# P"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElems_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_ struct {
	X509Skis []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509SKI"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElems_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_ struct {
	Gs []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# G"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_ instance.
func (me *XsdGoPkgHasElems_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_ struct {
	HMACOutputLengths []THMACOutputLengthType `xml:"http://www.w3.org/2000/09/xmldsig# HMACOutputLength"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_ instance.
func (me *XsdGoPkgHasElems_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_ struct {
	X509SerialNumbers []xsdt.Integer `xml:"http://www.w3.org/2000/09/xmldsig# X509SerialNumber"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_ instance.
func (me *XsdGoPkgHasElems_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_XPathchoiceTransformTypeschema_XPath_XsdtString_ struct {
	XPath xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# XPath"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_XPathchoiceTransformTypeschema_XPath_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_XPathchoiceTransformTypeschema_XPath_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_XPathchoiceTransformTypeschema_XPath_XsdtString_ instance.
func (me *XsdGoPkgHasElem_XPathchoiceTransformTypeschema_XPath_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_XPathchoiceTransformTypeschema_XPath_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 113 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 113 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TKeyValueType                                                                                              func(*TKeyValueType, bool) error
	XsdGoPkgHasElem_RetrievalMethod                                                                            func(*XsdGoPkgHasElem_RetrievalMethod, bool) error
	XsdGoPkgHasElems_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_                                   func(*XsdGoPkgHasElems_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_, bool) error
	XsdGoPkgHasElems_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_               func(*XsdGoPkgHasElems_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_, bool) error
	XsdGoPkgHasElems_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_ func(*XsdGoPkgHasElems_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_, bool) error
	XsdGoPkgHasElems_RetrievalMethod                                                                           func(*XsdGoPkgHasElems_RetrievalMethod, bool) error
	XsdGoPkgHasElem_PGPData                                                                                    func(*XsdGoPkgHasElem_PGPData, bool) error
	XsdGoPkgHasElems_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_                             func(*XsdGoPkgHasElems_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_, bool) error
	XsdGoPkgHasElem_KeyValue                                                                                   func(*XsdGoPkgHasElem_KeyValue, bool) error
	XsdGoPkgHasElem_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_  func(*XsdGoPkgHasElem_HMACOutputLengthsequenceSignatureMethodTypeschema_HMACOutputLength_THMACOutputLengthType_, bool) error
	XsdGoPkgHasElem_Transforms                                                                                 func(*XsdGoPkgHasElem_Transforms, bool) error
	XsdGoPkgHasElem_DigestValue                                                                                func(*XsdGoPkgHasElem_DigestValue, bool) error
	XsdGoPkgHasElem_SignedInfo                                                                                 func(*XsdGoPkgHasElem_SignedInfo, bool) error
	XsdGoPkgHasElems_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_                             func(*XsdGoPkgHasElems_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElem_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_                func(*XsdGoPkgHasElem_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_, bool) error
	XsdGoPkgHasElem_XPathchoiceTransformTypeschema_XPath_XsdtString_                                           func(*XsdGoPkgHasElem_XPathchoiceTransformTypeschema_XPath_XsdtString_, bool) error
	XsdGoPkgHasElems_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_               func(*XsdGoPkgHasElems_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_, bool) error
	XsdGoPkgHasElems_CanonicalizationMethod                                                                    func(*XsdGoPkgHasElems_CanonicalizationMethod, bool) error
	XsdGoPkgHasElem_CanonicalizationMethod                                                                     func(*XsdGoPkgHasElem_CanonicalizationMethod, bool) error
	TDigestMethodType                                                                                          func(*TDigestMethodType, bool) error
	XsdGoPkgHasElem_SignatureValue                                                                             func(*XsdGoPkgHasElem_SignatureValue, bool) error
	Tx509IssuerSerialType                                                                                      func(*Tx509IssuerSerialType, bool) error
	TSignaturePropertyType                                                                                     func(*TSignaturePropertyType, bool) error
	XsdGoPkgHasElems_RSAKeyValue                                                                               func(*XsdGoPkgHasElems_RSAKeyValue, bool) error
	XsdGoPkgHasElem_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_                                            func(*XsdGoPkgHasElem_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_, bool) error
	Tx509DataType                                                                                              func(*Tx509DataType, bool) error
	XsdGoPkgHasElems_MgmtData                                                                                  func(*XsdGoPkgHasElems_MgmtData, bool) error
	XsdGoPkgHasElems_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_                                           func(*XsdGoPkgHasElems_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_, bool) error
	TDSAKeyValueType                                                                                           func(*TDSAKeyValueType, bool) error
	XsdGoPkgHasElems_KeyValue                                                                                  func(*XsdGoPkgHasElems_KeyValue, bool) error
	XsdGoPkgHasElem_Transform                                                                                  func(*XsdGoPkgHasElem_Transform, bool) error
	TSignaturePropertiesType                                                                                   func(*TSignaturePropertiesType, bool) error
	XsdGoPkgHasElems_XPathchoiceTransformTypeschema_XPath_XsdtString_                                          func(*XsdGoPkgHasElems_XPathchoiceTransformTypeschema_XPath_XsdtString_, bool) error
	XsdGoPkgHasElem_DigestMethod                                                                               func(*XsdGoPkgHasElem_DigestMethod, bool) error
	XsdGoPkgHasElem_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_                              func(*XsdGoPkgHasElem_SeedsequencesequenceDSAKeyValueTypeschema_Seed_TCryptoBinary_, bool) error
	XsdGoPkgHasElems_SignatureMethod                                                                           func(*XsdGoPkgHasElems_SignatureMethod, bool) error
	XsdGoPkgHasElem_Manifest                                                                                   func(*XsdGoPkgHasElem_Manifest, bool) error
	TObjectType                                                                                                func(*TObjectType, bool) error
	XsdGoPkgHasElem_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_                 func(*XsdGoPkgHasElem_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElems_X509Data                                                                                  func(*XsdGoPkgHasElems_X509Data, bool) error
	XsdGoPkgHasElem_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_                              func(*XsdGoPkgHasElem_SPKISexpsequenceSPKIDataTypeschema_SPKISexp_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElems_Object                                                                                    func(*XsdGoPkgHasElems_Object, bool) error
	XsdGoPkgHasElem_RSAKeyValue                                                                                func(*XsdGoPkgHasElem_RSAKeyValue, bool) error
	XsdGoPkgHasElem_SignatureProperties                                                                        func(*XsdGoPkgHasElem_SignatureProperties, bool) error
	XsdGoPkgHasElems_DSAKeyValue                                                                               func(*XsdGoPkgHasElems_DSAKeyValue, bool) error
	XsdGoPkgHasElems_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_               func(*XsdGoPkgHasElems_X509SubjectNamechoicesequenceX509DataTypeschema_X509SubjectName_XsdtString_, bool) error
	TSignatureValueType                                                                                        func(*TSignatureValueType, bool) error
	TPGPDataType                                                                                               func(*TPGPDataType, bool) error
	XsdGoPkgHasElems_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_                func(*XsdGoPkgHasElems_PGPKeyPacketsequencechoicePGPDataTypeschema_PGPKeyPacket_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElems_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_  func(*XsdGoPkgHasElems_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_, bool) error
	XsdGoPkgHasElem_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_          func(*XsdGoPkgHasElem_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_, bool) error
	TransformsType                                                                                             func(*TransformsType, bool) error
	XsdGoPkgHasElem_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_                         func(*XsdGoPkgHasElem_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElems_PGPData                                                                                   func(*XsdGoPkgHasElems_PGPData, bool) error
	XsdGoPkgHasElem_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_                                    func(*XsdGoPkgHasElem_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_, bool) error
	XsdGoPkgHasElem_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_                func(*XsdGoPkgHasElem_X509IssuerNamesequenceX509IssuerSerialTypeschema_X509IssuerName_XsdtString_, bool) error
	XsdGoPkgHasElem_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_           func(*XsdGoPkgHasElem_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_, bool) error
	XsdGoPkgHasElem_KeyInfo                                                                                    func(*XsdGoPkgHasElem_KeyInfo, bool) error
	TManifestType                                                                                              func(*TManifestType, bool) error
	XsdGoPkgHasElems_DigestMethod                                                                              func(*XsdGoPkgHasElems_DigestMethod, bool) error
	XsdGoPkgHasElem_KeyName                                                                                    func(*XsdGoPkgHasElem_KeyName, bool) error
	XsdGoPkgHasElem_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_                                            func(*XsdGoPkgHasElem_JsequenceDSAKeyValueTypeschema_J_TCryptoBinary_, bool) error
	TKeyInfoType                                                                                               func(*TKeyInfoType, bool) error
	XsdGoPkgHasElems_Signature                                                                                 func(*XsdGoPkgHasElems_Signature, bool) error
	XsdGoPkgHasElems_SignatureValue                                                                            func(*XsdGoPkgHasElems_SignatureValue, bool) error
	XsdGoPkgHasElems_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_                                           func(*XsdGoPkgHasElems_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_, bool) error
	XsdGoPkgHasElems_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_                             func(*XsdGoPkgHasElems_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_, bool) error
	XsdGoPkgHasElems_Transform                                                                                 func(*XsdGoPkgHasElems_Transform, bool) error
	XsdGoPkgHasElems_Reference                                                                                 func(*XsdGoPkgHasElems_Reference, bool) error
	XsdGoPkgHasElem_SPKIData                                                                                   func(*XsdGoPkgHasElem_SPKIData, bool) error
	XsdGoPkgHasElems_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_                         func(*XsdGoPkgHasElems_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElems_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_                        func(*XsdGoPkgHasElems_PGPKeyIDsequencechoicePGPDataTypeschema_PGPKeyID_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElem_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_                          func(*XsdGoPkgHasElem_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElems_Transforms                                                                                func(*XsdGoPkgHasElems_Transforms, bool) error
	XsdGoPkgHasElems_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_          func(*XsdGoPkgHasElems_X509SerialNumbersequenceX509IssuerSerialTypeschema_X509SerialNumber_XsdtInteger_, bool) error
	XsdGoPkgHasElem_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_                func(*XsdGoPkgHasElem_PgenCountersequencesequenceDSAKeyValueTypeschema_PgenCounter_TCryptoBinary_, bool) error
	TRSAKeyValueType                                                                                           func(*TRSAKeyValueType, bool) error
	XsdGoPkgHasElem_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_                          func(*XsdGoPkgHasElem_X509CRLchoicesequenceX509DataTypeschema_X509Crl_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElem_X509Data                                                                                   func(*XsdGoPkgHasElem_X509Data, bool) error
	XsdGoPkgHasElems_Manifest                                                                                  func(*XsdGoPkgHasElems_Manifest, bool) error
	XsdGoPkgHasElems_SignatureProperties                                                                       func(*XsdGoPkgHasElems_SignatureProperties, bool) error
	XsdGoPkgHasElem_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_                                            func(*XsdGoPkgHasElem_YsequenceDSAKeyValueTypeschema_Y_TCryptoBinary_, bool) error
	XsdGoPkgHasElems_SignedInfo                                                                                func(*XsdGoPkgHasElems_SignedInfo, bool) error
	XsdGoPkgHasElem_SignatureProperty                                                                          func(*XsdGoPkgHasElem_SignatureProperty, bool) error
	XsdGoPkgHasElems_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_         func(*XsdGoPkgHasElems_X509CertificatechoicesequenceX509DataTypeschema_X509Certificate_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElem_SignatureMethod                                                                            func(*XsdGoPkgHasElem_SignatureMethod, bool) error
	XsdGoPkgHasElem_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_                                func(*XsdGoPkgHasElem_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_, bool) error
	XsdGoPkgHasCdata                                                                                           func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_                                    func(*XsdGoPkgHasElem_QsequencesequenceDSAKeyValueTypeschema_Q_TCryptoBinary_, bool) error
	XsdGoPkgHasElem_MgmtData                                                                                   func(*XsdGoPkgHasElem_MgmtData, bool) error
	XsdGoPkgHasElem_Object                                                                                     func(*XsdGoPkgHasElem_Object, bool) error
	TSignatureMethodType                                                                                       func(*TSignatureMethodType, bool) error
	TRetrievalMethodType                                                                                       func(*TRetrievalMethodType, bool) error
	XsdGoPkgHasElems_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_                                   func(*XsdGoPkgHasElems_PsequencesequenceDSAKeyValueTypeschema_P_TCryptoBinary_, bool) error
	XsdGoPkgHasElems_KeyName                                                                                   func(*XsdGoPkgHasElems_KeyName, bool) error
	XsdGoPkgHasElems_SPKIData                                                                                  func(*XsdGoPkgHasElems_SPKIData, bool) error
	XsdGoPkgHasElem_DSAKeyValue                                                                                func(*XsdGoPkgHasElem_DSAKeyValue, bool) error
	XsdGoPkgHasElems_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_                         func(*XsdGoPkgHasElems_X509SKIchoicesequenceX509DataTypeschema_X509Ski_XsdtBase64Binary_, bool) error
	TCanonicalizationMethodType                                                                                func(*TCanonicalizationMethodType, bool) error
	TReferenceType                                                                                             func(*TReferenceType, bool) error
	XsdGoPkgHasElem_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_                              func(*XsdGoPkgHasElem_ExponentsequenceRSAKeyValueTypeschema_Exponent_TCryptoBinary_, bool) error
	XsdGoPkgHasElem_Signature                                                                                  func(*XsdGoPkgHasElem_Signature, bool) error
	TransformType                                                                                              func(*TransformType, bool) error
	TSignedInfoType                                                                                            func(*TSignedInfoType, bool) error
	XsdGoPkgHasElem_Reference                                                                                  func(*XsdGoPkgHasElem_Reference, bool) error
	XsdGoPkgHasElem_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_   func(*XsdGoPkgHasElem_X509IssuerSerialchoicesequenceX509DataTypeschema_X509IssuerSerial_Tx509IssuerSerialType_, bool) error
	TSignatureType                                                                                             func(*TSignatureType, bool) error
	XsdGoPkgHasElems_DigestValue                                                                               func(*XsdGoPkgHasElems_DigestValue, bool) error
	XsdGoPkgHasElems_KeyInfo                                                                                   func(*XsdGoPkgHasElems_KeyInfo, bool) error
	XsdGoPkgHasElems_SignatureProperty                                                                         func(*XsdGoPkgHasElems_SignatureProperty, bool) error
	XsdGoPkgHasElems_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_                               func(*XsdGoPkgHasElems_ModulussequenceRSAKeyValueTypeschema_Modulus_TCryptoBinary_, bool) error
	XsdGoPkgHasElems_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_                                           func(*XsdGoPkgHasElems_GsequenceDSAKeyValueTypeschema_G_TCryptoBinary_, bool) error
	TSPKIDataType                                                                                              func(*TSPKIDataType, bool) error
}
