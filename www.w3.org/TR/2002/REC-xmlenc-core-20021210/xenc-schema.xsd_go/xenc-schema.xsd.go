// Package goXenc : autogenerated by go-xsd
package goXenc

import (
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// XsdGoPkgHasAttrURIXsdtAnyURI defines attribute UriXsdtAnyURI
type XsdGoPkgHasAttrURIXsdtAnyURI struct {
	URI xsdt.AnyURI `xml:"http://www.w3.org/2001/04/xmlenc# URI,attr"`
}

// TransformsType defines TransformsType
type TransformsType struct {
	ds.XsdGoPkgHasElemsTransform
}

// Walk : if the WalkHandlers.TransformsType function is not nil (ie. was set by outside code), calls it with this TransformsType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TransformsType instance.
func (me *TransformsType) Walk() (err error) {
	if fn := WalkHandlers.TransformsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType defines XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType
type XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType struct {
	Transforms *TransformsType `xml:"http://www.w3.org/2001/04/xmlenc# Transforms"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType instance.
func (me *XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TCipherReferenceType defines TCipherReferenceType
type TCipherReferenceType struct {
	XsdGoPkgHasAttrURIXsdtAnyURI

	XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType
}

// Walk : if the WalkHandlers.TCipherReferenceType function is not nil (ie. was set by outside code), calls it with this TCipherReferenceType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TCipherReferenceType instance.
func (me *TCipherReferenceType) Walk() (err error) {
	if fn := WalkHandlers.TCipherReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemCipherReference defines XsdGoPkgHasElemCipherReference
type XsdGoPkgHasElemCipherReference struct {
	CipherReference *TCipherReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# CipherReference"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemCipherReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemCipherReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemCipherReference instance.
func (me *XsdGoPkgHasElemCipherReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemCipherReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CipherReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary defines XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary
type XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary struct {
	CipherValue xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# CipherValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TCipherDataType defines TCipherDataType
type TCipherDataType struct {
	XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary

	XsdGoPkgHasElemCipherReference
}

// Walk : if the WalkHandlers.TCipherDataType function is not nil (ie. was set by outside code), calls it with this TCipherDataType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TCipherDataType instance.
func (me *TCipherDataType) Walk() (err error) {
	if fn := WalkHandlers.TCipherDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemCipherReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemCipherData defines XsdGoPkgHasElemCipherData
type XsdGoPkgHasElemCipherData struct {
	CipherData *TCipherDataType `xml:"http://www.w3.org/2001/04/xmlenc# CipherData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemCipherData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemCipherData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemCipherData instance.
func (me *XsdGoPkgHasElemCipherData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemCipherData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CipherData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsCipherData defines XsdGoPkgHasElemsCipherData
type XsdGoPkgHasElemsCipherData struct {
	CipherDatas []*TCipherDataType `xml:"http://www.w3.org/2001/04/xmlenc# CipherData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsCipherData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsCipherData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsCipherData instance.
func (me *XsdGoPkgHasElemsCipherData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsCipherData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CipherDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsCipherReference defines XsdGoPkgHasElemsCipherReference
type XsdGoPkgHasElemsCipherReference struct {
	CipherReferences []*TCipherReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# CipherReference"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsCipherReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsCipherReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsCipherReference instance.
func (me *XsdGoPkgHasElemsCipherReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsCipherReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CipherReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrAlgorithmXsdtAnyURI defines attribute AlgorithmXsdtAnyURI
type XsdGoPkgHasAttrAlgorithmXsdtAnyURI struct {
	Algorithm xsdt.AnyURI `xml:"http://www.w3.org/2001/04/xmlenc# Algorithm,attr"`
}

// XsdGoPkgHasCdata defines type CDATA
type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeySizeType defines TKeySizeType
type TKeySizeType xsdt.Integer

// Set : Since TKeySizeType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TKeySizeType) Set(s string) { (*xsdt.Integer)(me).Set(s) }

// String : Returns a string representation of this TKeySizeType's current non-string scalar value.
func (me TKeySizeType) String() string { return xsdt.Integer(me).String() }

// ToXsdtInteger : This convenience method just performs a simple type conversion to TKeySizeType's alias type xsdt.Integer.
func (me TKeySizeType) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

// XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType defines XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType
type XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType struct {
	KeySize TKeySizeType `xml:"http://www.w3.org/2001/04/xmlenc# KeySize"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType instance.
func (me *XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary defines XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary
type XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary struct {
	OAEPparams xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# OAEPparams"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEncryptionMethodType defines TEncryptionMethodType
type TEncryptionMethodType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType

	XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary

	XsdGoPkgHasAttrAlgorithmXsdtAnyURI
}

// Walk : if the WalkHandlers.TEncryptionMethodType function is not nil (ie. was set by outside code), calls it with this TEncryptionMethodType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TEncryptionMethodType instance.
func (me *TEncryptionMethodType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptionMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType defines XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType
type XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType struct {
	EncryptionMethod *TEncryptionMethodType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType instance.
func (me *XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptionMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrTargetXsdtAnyURI defines attribute TargetXsdtAnyURI
type XsdGoPkgHasAttrTargetXsdtAnyURI struct {
	Target xsdt.AnyURI `xml:"http://www.w3.org/2001/04/xmlenc# Target,attr"`
}

// XsdGoPkgHasAttrIDXsdtID defines attribute IdXsdtId
type XsdGoPkgHasAttrIDXsdtID struct {
	ID xsdt.ID `xml:"http://www.w3.org/2001/04/xmlenc# Id,attr"`
}

// TEncryptionPropertyType defines TEncryptionPropertyType
type TEncryptionPropertyType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttrTargetXsdtAnyURI

	XsdGoPkgHasAttrIDXsdtID
}

// Walk : if the WalkHandlers.TEncryptionPropertyType function is not nil (ie. was set by outside code), calls it with this TEncryptionPropertyType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TEncryptionPropertyType instance.
func (me *TEncryptionPropertyType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptionPropertyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEncryptionProperty defines XsdGoPkgHasElemsEncryptionProperty
type XsdGoPkgHasElemsEncryptionProperty struct {
	EncryptionProperties []*TEncryptionPropertyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperty"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEncryptionProperty function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEncryptionProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEncryptionProperty instance.
func (me *XsdGoPkgHasElemsEncryptionProperty) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEncryptionProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptionProperties {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEncryptionPropertiesType defines TEncryptionPropertiesType
type TEncryptionPropertiesType struct {
	XsdGoPkgHasElemsEncryptionProperty

	XsdGoPkgHasAttrIDXsdtID
}

// Walk : if the WalkHandlers.TEncryptionPropertiesType function is not nil (ie. was set by outside code), calls it with this TEncryptionPropertiesType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TEncryptionPropertiesType instance.
func (me *TEncryptionPropertiesType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptionPropertiesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsEncryptionProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEncryptionProperties defines XsdGoPkgHasElemEncryptionProperties
type XsdGoPkgHasElemEncryptionProperties struct {
	EncryptionProperties *TEncryptionPropertiesType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperties"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEncryptionProperties function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEncryptionProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEncryptionProperties instance.
func (me *XsdGoPkgHasElemEncryptionProperties) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEncryptionProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptionProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrMimeTypeXsdtString defines attribute MimeTypeXsdtString
type XsdGoPkgHasAttrMimeTypeXsdtString struct {
	MimeType xsdt.String `xml:"http://www.w3.org/2001/04/xmlenc# MimeType,attr"`
}

// XsdGoPkgHasAttrEncodingXsdtAnyURI defines attribute EncodingXsdtAnyURI
type XsdGoPkgHasAttrEncodingXsdtAnyURI struct {
	Encoding xsdt.AnyURI `xml:"http://www.w3.org/2001/04/xmlenc# Encoding,attr"`
}

// XsdGoPkgHasAttrTypeXsdtAnyURI defines attribute TypeXsdtAnyURI
type XsdGoPkgHasAttrTypeXsdtAnyURI struct {
	Type xsdt.AnyURI `xml:"http://www.w3.org/2001/04/xmlenc# Type,attr"`
}

// TEncryptedType defines TEncryptedType
type TEncryptedType struct {
	XsdGoPkgHasAttrEncodingXsdtAnyURI

	XsdGoPkgHasAttrIDXsdtID

	XsdGoPkgHasAttrTypeXsdtAnyURI

	XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType

	ds.XsdGoPkgHasElemKeyInfo

	XsdGoPkgHasElemCipherData

	XsdGoPkgHasElemEncryptionProperties

	XsdGoPkgHasAttrMimeTypeXsdtString
}

// Walk : if the WalkHandlers.TEncryptedType function is not nil (ie. was set by outside code), calls it with this TEncryptedType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TEncryptedType instance.
func (me *TEncryptedType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemCipherData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemEncryptionProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEncryptedDataType defines TEncryptedDataType
type TEncryptedDataType struct {
	TEncryptedType
}

// Walk : if the WalkHandlers.TEncryptedDataType function is not nil (ie. was set by outside code), calls it with this TEncryptedDataType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TEncryptedDataType instance.
func (me *TEncryptedDataType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TEncryptedType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEncryptedData defines XsdGoPkgHasElemEncryptedData
type XsdGoPkgHasElemEncryptedData struct {
	EncryptedData *TEncryptedDataType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEncryptedData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEncryptedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEncryptedData instance.
func (me *XsdGoPkgHasElemEncryptedData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEncryptedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEncryptedData defines XsdGoPkgHasElemsEncryptedData
type XsdGoPkgHasElemsEncryptedData struct {
	EncryptedDatas []*TEncryptedDataType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedData"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEncryptedData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEncryptedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEncryptedData instance.
func (me *XsdGoPkgHasElemsEncryptedData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEncryptedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasAttrRecipientXsdtString defines attribute RecipientXsdtString
type XsdGoPkgHasAttrRecipientXsdtString struct {
	Recipient xsdt.String `xml:"http://www.w3.org/2001/04/xmlenc# Recipient,attr"`
}

// TReferenceType defines TReferenceType
type TReferenceType struct {
	XsdGoPkgHasAttrURIXsdtAnyURI
}

// Walk : if the WalkHandlers.TReferenceType function is not nil (ie. was set by outside code), calls it with this TReferenceType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TReferenceType instance.
func (me *TReferenceType) Walk() (err error) {
	if fn := WalkHandlers.TReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType defines XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType
type XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType struct {
	DataReferences []*TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# DataReference"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType instance.
func (me *XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType defines XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType
type XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType struct {
	KeyReferences []*TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# KeyReference"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType instance.
func (me *XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdReferenceList defines TxsdReferenceList
type TxsdReferenceList struct {
	XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType

	XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType
}

// Walk : if the WalkHandlers.TxsdReferenceList function is not nil (ie. was set by outside code), calls it with this TxsdReferenceList instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdReferenceList instance.
func (me *TxsdReferenceList) Walk() (err error) {
	if fn := WalkHandlers.TxsdReferenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemReferenceList defines XsdGoPkgHasElemReferenceList
type XsdGoPkgHasElemReferenceList struct {
	ReferenceList *TxsdReferenceList `xml:"http://www.w3.org/2001/04/xmlenc# ReferenceList"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemReferenceList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemReferenceList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemReferenceList instance.
func (me *XsdGoPkgHasElemReferenceList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemReferenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReferenceList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString defines XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString
type XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString struct {
	CarriedKeyName xsdt.String `xml:"http://www.w3.org/2001/04/xmlenc# CarriedKeyName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString instance.
func (me *XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEncryptedKeyType defines TEncryptedKeyType
type TEncryptedKeyType struct {
	XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString

	XsdGoPkgHasAttrRecipientXsdtString

	TEncryptedType

	XsdGoPkgHasElemReferenceList
}

// Walk : if the WalkHandlers.TEncryptedKeyType function is not nil (ie. was set by outside code), calls it with this TEncryptedKeyType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TEncryptedKeyType instance.
func (me *TEncryptedKeyType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedKeyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TEncryptedType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemReferenceList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEncryptedKey defines XsdGoPkgHasElemEncryptedKey
type XsdGoPkgHasElemEncryptedKey struct {
	EncryptedKey *TEncryptedKeyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedKey"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEncryptedKey function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEncryptedKey instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEncryptedKey instance.
func (me *XsdGoPkgHasElemEncryptedKey) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEncryptedKey; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedKey.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEncryptedKey defines XsdGoPkgHasElemsEncryptedKey
type XsdGoPkgHasElemsEncryptedKey struct {
	EncryptedKeys []*TEncryptedKeyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedKey"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEncryptedKey function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEncryptedKey instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEncryptedKey instance.
func (me *XsdGoPkgHasElemsEncryptedKey) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEncryptedKey; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedKeys {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary defines XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary
type XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary struct {
	KaNonce xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# KA-Nonce"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType defines XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType
type XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType struct {
	OriginatorKeyInfo ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# OriginatorKeyInfo"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType instance.
func (me *XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType defines XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType
type XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType struct {
	RecipientKeyInfo ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# RecipientKeyInfo"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType instance.
func (me *XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAgreementMethodType defines TAgreementMethodType
type TAgreementMethodType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary

	XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType

	XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType

	XsdGoPkgHasAttrAlgorithmXsdtAnyURI
}

// Walk : if the WalkHandlers.TAgreementMethodType function is not nil (ie. was set by outside code), calls it with this TAgreementMethodType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TAgreementMethodType instance.
func (me *TAgreementMethodType) Walk() (err error) {
	if fn := WalkHandlers.TAgreementMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsAgreementMethod defines XsdGoPkgHasElemsAgreementMethod
type XsdGoPkgHasElemsAgreementMethod struct {
	AgreementMethods []*TAgreementMethodType `xml:"http://www.w3.org/2001/04/xmlenc# AgreementMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsAgreementMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsAgreementMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsAgreementMethod instance.
func (me *XsdGoPkgHasElemsAgreementMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsAgreementMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AgreementMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemAgreementMethod defines XsdGoPkgHasElemAgreementMethod
type XsdGoPkgHasElemAgreementMethod struct {
	AgreementMethod *TAgreementMethodType `xml:"http://www.w3.org/2001/04/xmlenc# AgreementMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemAgreementMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemAgreementMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemAgreementMethod instance.
func (me *XsdGoPkgHasElemAgreementMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemAgreementMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AgreementMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsReferenceList defines XsdGoPkgHasElemsReferenceList
type XsdGoPkgHasElemsReferenceList struct {
	ReferenceLists []*TxsdReferenceList `xml:"http://www.w3.org/2001/04/xmlenc# ReferenceList"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsReferenceList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsReferenceList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsReferenceList instance.
func (me *XsdGoPkgHasElemsReferenceList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsReferenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReferenceLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEncryptionProperties defines XsdGoPkgHasElemsEncryptionProperties
type XsdGoPkgHasElemsEncryptionProperties struct {
	EncryptionPropertieses []*TEncryptionPropertiesType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperties"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEncryptionProperties function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEncryptionProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEncryptionProperties instance.
func (me *XsdGoPkgHasElemsEncryptionProperties) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEncryptionProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptionPropertieses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemEncryptionProperty defines XsdGoPkgHasElemEncryptionProperty
type XsdGoPkgHasElemEncryptionProperty struct {
	EncryptionProperty *TEncryptionPropertyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperty"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemEncryptionProperty function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemEncryptionProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemEncryptionProperty instance.
func (me *XsdGoPkgHasElemEncryptionProperty) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemEncryptionProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptionProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType defines XsdGoPkgHasElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType
type XsdGoPkgHasElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType struct {
	OriginatorKeyInfos []ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# OriginatorKeyInfo"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType instance.
func (me *XsdGoPkgHasElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType defines XsdGoPkgHasElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType
type XsdGoPkgHasElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType struct {
	RecipientKeyInfos []ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# RecipientKeyInfo"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType instance.
func (me *XsdGoPkgHasElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString defines XsdGoPkgHasElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString
type XsdGoPkgHasElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString struct {
	CarriedKeyNames []xsdt.String `xml:"http://www.w3.org/2001/04/xmlenc# CarriedKeyName"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString instance.
func (me *XsdGoPkgHasElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary defines XsdGoPkgHasElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary
type XsdGoPkgHasElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary struct {
	CipherValues []xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# CipherValue"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType defines XsdGoPkgHasElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType
type XsdGoPkgHasElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType struct {
	KeyReference *TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# KeyReference"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType instance.
func (me *XsdGoPkgHasElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType defines XsdGoPkgHasElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType
type XsdGoPkgHasElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType struct {
	KeySizes []TKeySizeType `xml:"http://www.w3.org/2001/04/xmlenc# KeySize"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType instance.
func (me *XsdGoPkgHasElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType defines XsdGoPkgHasElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType
type XsdGoPkgHasElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType struct {
	Transformses []*TransformsType `xml:"http://www.w3.org/2001/04/xmlenc# Transforms"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType instance.
func (me *XsdGoPkgHasElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transformses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary defines XsdGoPkgHasElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary
type XsdGoPkgHasElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary struct {
	OAEPparamses []xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# OAEPparams"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary defines XsdGoPkgHasElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary
type XsdGoPkgHasElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary struct {
	KaNonces []xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# KA-Nonce"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary instance.
func (me *XsdGoPkgHasElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType defines XsdGoPkgHasElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType
type XsdGoPkgHasElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType struct {
	DataReference *TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# DataReference"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType instance.
func (me *XsdGoPkgHasElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XsdGoPkgHasElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType defines XsdGoPkgHasElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType
type XsdGoPkgHasElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType struct {
	EncryptionMethods []*TEncryptionMethodType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionMethod"`
}

// Walk : if the WalkHandlers.XsdGoPkgHasElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType instance.
func (me *XsdGoPkgHasElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptionMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 51 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

// XsdGoPkgWalkHandlers Provides 51 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType          func(*XsdGoPkgHasElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType, bool) error
	XsdGoPkgHasElemReferenceList                                                                                func(*XsdGoPkgHasElemReferenceList, bool) error
	XsdGoPkgHasElemAgreementMethod                                                                              func(*XsdGoPkgHasElemAgreementMethod, bool) error
	XsdGoPkgHasElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary                      func(*XsdGoPkgHasElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary, bool) error
	XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType            func(*XsdGoPkgHasElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType, bool) error
	TxsdReferenceList                                                                                           func(*TxsdReferenceList, bool) error
	XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString  func(*XsdGoPkgHasElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString, bool) error
	TransformsType                                                                                              func(*TransformsType, bool) error
	XsdGoPkgHasElemsCipherReference                                                                             func(*XsdGoPkgHasElemsCipherReference, bool) error
	TEncryptionMethodType                                                                                       func(*TEncryptionMethodType, bool) error
	TEncryptionPropertyType                                                                                     func(*TEncryptionPropertyType, bool) error
	TEncryptedDataType                                                                                          func(*TEncryptedDataType, bool) error
	XsdGoPkgHasElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType                           func(*XsdGoPkgHasElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType, bool) error
	XsdGoPkgHasElemsEncryptedKey                                                                                func(*XsdGoPkgHasElemsEncryptedKey, bool) error
	XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary                              func(*XsdGoPkgHasElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary, bool) error
	XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType            func(*XsdGoPkgHasElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType, bool) error
	TAgreementMethodType                                                                                        func(*TAgreementMethodType, bool) error
	XsdGoPkgHasElemsEncryptionProperties                                                                        func(*XsdGoPkgHasElemsEncryptionProperties, bool) error
	TEncryptedType                                                                                              func(*TEncryptedType, bool) error
	XsdGoPkgHasElemEncryptionProperty                                                                           func(*XsdGoPkgHasElemEncryptionProperty, bool) error
	XsdGoPkgHasElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType           func(*XsdGoPkgHasElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType, bool) error
	XsdGoPkgHasElemsAgreementMethod                                                                             func(*XsdGoPkgHasElemsAgreementMethod, bool) error
	XsdGoPkgHasElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary                             func(*XsdGoPkgHasElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary, bool) error
	XsdGoPkgHasElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType            func(*XsdGoPkgHasElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType, bool) error
	XsdGoPkgHasElemCipherReference                                                                              func(*XsdGoPkgHasElemCipherReference, bool) error
	TCipherDataType                                                                                             func(*TCipherDataType, bool) error
	XsdGoPkgHasElemsEncryptedData                                                                               func(*XsdGoPkgHasElemsEncryptedData, bool) error
	TReferenceType                                                                                              func(*TReferenceType, bool) error
	XsdGoPkgHasElemEncryptedKey                                                                                 func(*XsdGoPkgHasElemEncryptedKey, bool) error
	TCipherReferenceType                                                                                        func(*TCipherReferenceType, bool) error
	XsdGoPkgHasElemCipherData                                                                                   func(*XsdGoPkgHasElemCipherData, bool) error
	XsdGoPkgHasElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString func(*XsdGoPkgHasElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString, bool) error
	XsdGoPkgHasElemsReferenceList                                                                               func(*XsdGoPkgHasElemsReferenceList, bool) error
	XsdGoPkgHasElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType             func(*XsdGoPkgHasElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType, bool) error
	XsdGoPkgHasElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary                            func(*XsdGoPkgHasElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary, bool) error
	XsdGoPkgHasCdata                                                                                            func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary                       func(*XsdGoPkgHasElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary, bool) error
	XsdGoPkgHasElemsEncryptionProperty                                                                          func(*XsdGoPkgHasElemsEncryptionProperty, bool) error
	XsdGoPkgHasElemEncryptedData                                                                                func(*XsdGoPkgHasElemEncryptedData, bool) error
	XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType              func(*XsdGoPkgHasElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType, bool) error
	XsdGoPkgHasElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType             func(*XsdGoPkgHasElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType, bool) error
	XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType                                 func(*XsdGoPkgHasElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType, bool) error
	XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType             func(*XsdGoPkgHasElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType, bool) error
	TEncryptionPropertiesType                                                                                   func(*TEncryptionPropertiesType, bool) error
	TEncryptedKeyType                                                                                           func(*TEncryptedKeyType, bool) error
	XsdGoPkgHasElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType                                func(*XsdGoPkgHasElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType, bool) error
	XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType                            func(*XsdGoPkgHasElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType, bool) error
	XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary                             func(*XsdGoPkgHasElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary, bool) error
	XsdGoPkgHasElemsCipherData                                                                                  func(*XsdGoPkgHasElemsCipherData, bool) error
	XsdGoPkgHasElemEncryptionProperties                                                                         func(*XsdGoPkgHasElemEncryptionProperties, bool) error
	XsdGoPkgHasElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType           func(*XsdGoPkgHasElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType, bool) error
}
