//	Auto-generated by the "go-xsd" package located at:
//		github.com/miracl/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd
package go_Xenc

import (
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

type XsdGoPkgHasAttr_Uri_XsdtAnyURI_ struct {
	Uri xsdt.AnyURI `xml:"http://www.w3.org/2001/04/xmlenc# URI,attr"`
}

type TransformsType struct {
	ds.XsdGoPkgHasElems_Transform
}

//	If the WalkHandlers.TransformsType function is not nil (ie. was set by outside code), calls it with this TransformsType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TransformsType instance.
func (me *TransformsType) Walk() (err error) {
	if fn := WalkHandlers.TransformsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_ struct {
	Transforms *TransformsType `xml:"http://www.w3.org/2001/04/xmlenc# Transforms"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_ instance.
func (me *XsdGoPkgHasElem_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCipherReferenceType struct {
	XsdGoPkgHasAttr_Uri_XsdtAnyURI_

	XsdGoPkgHasElem_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_
}

//	If the WalkHandlers.TCipherReferenceType function is not nil (ie. was set by outside code), calls it with this TCipherReferenceType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TCipherReferenceType instance.
func (me *TCipherReferenceType) Walk() (err error) {
	if fn := WalkHandlers.TCipherReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CipherReference struct {
	CipherReference *TCipherReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# CipherReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CipherReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CipherReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CipherReference instance.
func (me *XsdGoPkgHasElem_CipherReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CipherReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CipherReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_ struct {
	CipherValue xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# CipherValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElem_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TCipherDataType struct {
	XsdGoPkgHasElem_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_

	XsdGoPkgHasElem_CipherReference
}

//	If the WalkHandlers.TCipherDataType function is not nil (ie. was set by outside code), calls it with this TCipherDataType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TCipherDataType instance.
func (me *TCipherDataType) Walk() (err error) {
	if fn := WalkHandlers.TCipherDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CipherReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CipherData struct {
	CipherData *TCipherDataType `xml:"http://www.w3.org/2001/04/xmlenc# CipherData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CipherData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CipherData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CipherData instance.
func (me *XsdGoPkgHasElem_CipherData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CipherData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CipherData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CipherData struct {
	CipherDatas []*TCipherDataType `xml:"http://www.w3.org/2001/04/xmlenc# CipherData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CipherData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CipherData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CipherData instance.
func (me *XsdGoPkgHasElems_CipherData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CipherData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CipherDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CipherReference struct {
	CipherReferences []*TCipherReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# CipherReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CipherReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CipherReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CipherReference instance.
func (me *XsdGoPkgHasElems_CipherReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CipherReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CipherReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Algorithm_XsdtAnyURI_ struct {
	Algorithm xsdt.AnyURI `xml:"http://www.w3.org/2001/04/xmlenc# Algorithm,attr"`
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TKeySizeType xsdt.Integer

//	Since TKeySizeType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TKeySizeType) Set(s string) { (*xsdt.Integer)(me).Set(s) }

//	Returns a string representation of this TKeySizeType's current non-string scalar value.
func (me TKeySizeType) String() string { return xsdt.Integer(me).String() }

//	This convenience method just performs a simple type conversion to TKeySizeType's alias type xsdt.Integer.
func (me TKeySizeType) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

type XsdGoPkgHasElem_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_ struct {
	KeySize TKeySizeType `xml:"http://www.w3.org/2001/04/xmlenc# KeySize"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_ instance.
func (me *XsdGoPkgHasElem_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_ struct {
	OAEPparams xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# OAEPparams"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElem_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEncryptionMethodType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElem_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_

	XsdGoPkgHasElem_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_

	XsdGoPkgHasAttr_Algorithm_XsdtAnyURI_
}

//	If the WalkHandlers.TEncryptionMethodType function is not nil (ie. was set by outside code), calls it with this TEncryptionMethodType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TEncryptionMethodType instance.
func (me *TEncryptionMethodType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptionMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_ struct {
	EncryptionMethod *TEncryptionMethodType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_ instance.
func (me *XsdGoPkgHasElem_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptionMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Target_XsdtAnyURI_ struct {
	Target xsdt.AnyURI `xml:"http://www.w3.org/2001/04/xmlenc# Target,attr"`
}

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"http://www.w3.org/2001/04/xmlenc# Id,attr"`
}

type TEncryptionPropertyType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Target_XsdtAnyURI_

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TEncryptionPropertyType function is not nil (ie. was set by outside code), calls it with this TEncryptionPropertyType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TEncryptionPropertyType instance.
func (me *TEncryptionPropertyType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptionPropertyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EncryptionProperty struct {
	EncryptionProperties []*TEncryptionPropertyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EncryptionProperty function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EncryptionProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EncryptionProperty instance.
func (me *XsdGoPkgHasElems_EncryptionProperty) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EncryptionProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptionProperties {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEncryptionPropertiesType struct {
	XsdGoPkgHasElems_EncryptionProperty

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TEncryptionPropertiesType function is not nil (ie. was set by outside code), calls it with this TEncryptionPropertiesType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TEncryptionPropertiesType instance.
func (me *TEncryptionPropertiesType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptionPropertiesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_EncryptionProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EncryptionProperties struct {
	EncryptionProperties *TEncryptionPropertiesType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperties"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EncryptionProperties function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EncryptionProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EncryptionProperties instance.
func (me *XsdGoPkgHasElem_EncryptionProperties) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EncryptionProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptionProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_MimeType_XsdtString_ struct {
	MimeType xsdt.String `xml:"http://www.w3.org/2001/04/xmlenc# MimeType,attr"`
}

type XsdGoPkgHasAttr_Encoding_XsdtAnyURI_ struct {
	Encoding xsdt.AnyURI `xml:"http://www.w3.org/2001/04/xmlenc# Encoding,attr"`
}

type XsdGoPkgHasAttr_Type_XsdtAnyURI_ struct {
	Type xsdt.AnyURI `xml:"http://www.w3.org/2001/04/xmlenc# Type,attr"`
}

type TEncryptedType struct {
	XsdGoPkgHasAttr_Encoding_XsdtAnyURI_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Type_XsdtAnyURI_

	XsdGoPkgHasElem_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_

	ds.XsdGoPkgHasElem_KeyInfo

	XsdGoPkgHasElem_CipherData

	XsdGoPkgHasElem_EncryptionProperties

	XsdGoPkgHasAttr_MimeType_XsdtString_
}

//	If the WalkHandlers.TEncryptedType function is not nil (ie. was set by outside code), calls it with this TEncryptedType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TEncryptedType instance.
func (me *TEncryptedType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CipherData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EncryptionProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEncryptedDataType struct {
	TEncryptedType
}

//	If the WalkHandlers.TEncryptedDataType function is not nil (ie. was set by outside code), calls it with this TEncryptedDataType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TEncryptedDataType instance.
func (me *TEncryptedDataType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TEncryptedType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EncryptedData struct {
	EncryptedData *TEncryptedDataType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EncryptedData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EncryptedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EncryptedData instance.
func (me *XsdGoPkgHasElem_EncryptedData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EncryptedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EncryptedData struct {
	EncryptedDatas []*TEncryptedDataType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EncryptedData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EncryptedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EncryptedData instance.
func (me *XsdGoPkgHasElems_EncryptedData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EncryptedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Recipient_XsdtString_ struct {
	Recipient xsdt.String `xml:"http://www.w3.org/2001/04/xmlenc# Recipient,attr"`
}

type TReferenceType struct {
	XsdGoPkgHasAttr_Uri_XsdtAnyURI_
}

//	If the WalkHandlers.TReferenceType function is not nil (ie. was set by outside code), calls it with this TReferenceType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TReferenceType instance.
func (me *TReferenceType) Walk() (err error) {
	if fn := WalkHandlers.TReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_ struct {
	DataReferences []*TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# DataReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_ instance.
func (me *XsdGoPkgHasElems_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_ struct {
	KeyReferences []*TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# KeyReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_ instance.
func (me *XsdGoPkgHasElems_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdReferenceList struct {
	XsdGoPkgHasElems_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_

	XsdGoPkgHasElems_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_
}

//	If the WalkHandlers.TxsdReferenceList function is not nil (ie. was set by outside code), calls it with this TxsdReferenceList instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdReferenceList instance.
func (me *TxsdReferenceList) Walk() (err error) {
	if fn := WalkHandlers.TxsdReferenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReferenceList struct {
	ReferenceList *TxsdReferenceList `xml:"http://www.w3.org/2001/04/xmlenc# ReferenceList"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReferenceList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReferenceList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReferenceList instance.
func (me *XsdGoPkgHasElem_ReferenceList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReferenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReferenceList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_ struct {
	CarriedKeyName xsdt.String `xml:"http://www.w3.org/2001/04/xmlenc# CarriedKeyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_ instance.
func (me *XsdGoPkgHasElem_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TEncryptedKeyType struct {
	XsdGoPkgHasElem_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_

	XsdGoPkgHasAttr_Recipient_XsdtString_

	TEncryptedType

	XsdGoPkgHasElem_ReferenceList
}

//	If the WalkHandlers.TEncryptedKeyType function is not nil (ie. was set by outside code), calls it with this TEncryptedKeyType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TEncryptedKeyType instance.
func (me *TEncryptedKeyType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedKeyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TEncryptedType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReferenceList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EncryptedKey struct {
	EncryptedKey *TEncryptedKeyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedKey"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EncryptedKey function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EncryptedKey instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EncryptedKey instance.
func (me *XsdGoPkgHasElem_EncryptedKey) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EncryptedKey; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedKey.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EncryptedKey struct {
	EncryptedKeys []*TEncryptedKeyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedKey"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EncryptedKey function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EncryptedKey instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EncryptedKey instance.
func (me *XsdGoPkgHasElems_EncryptedKey) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EncryptedKey; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedKeys {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_ struct {
	KaNonce xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# KA-Nonce"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElem_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_ struct {
	OriginatorKeyInfo ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# OriginatorKeyInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_ instance.
func (me *XsdGoPkgHasElem_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_ struct {
	RecipientKeyInfo ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# RecipientKeyInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_ instance.
func (me *XsdGoPkgHasElem_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAgreementMethodType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElem_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_

	XsdGoPkgHasElem_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_

	XsdGoPkgHasElem_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_

	XsdGoPkgHasAttr_Algorithm_XsdtAnyURI_
}

//	If the WalkHandlers.TAgreementMethodType function is not nil (ie. was set by outside code), calls it with this TAgreementMethodType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TAgreementMethodType instance.
func (me *TAgreementMethodType) Walk() (err error) {
	if fn := WalkHandlers.TAgreementMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AgreementMethod struct {
	AgreementMethods []*TAgreementMethodType `xml:"http://www.w3.org/2001/04/xmlenc# AgreementMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AgreementMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AgreementMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AgreementMethod instance.
func (me *XsdGoPkgHasElems_AgreementMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AgreementMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AgreementMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AgreementMethod struct {
	AgreementMethod *TAgreementMethodType `xml:"http://www.w3.org/2001/04/xmlenc# AgreementMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AgreementMethod function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AgreementMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AgreementMethod instance.
func (me *XsdGoPkgHasElem_AgreementMethod) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AgreementMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AgreementMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReferenceList struct {
	ReferenceLists []*TxsdReferenceList `xml:"http://www.w3.org/2001/04/xmlenc# ReferenceList"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReferenceList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReferenceList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReferenceList instance.
func (me *XsdGoPkgHasElems_ReferenceList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReferenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReferenceLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EncryptionProperties struct {
	EncryptionPropertieses []*TEncryptionPropertiesType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperties"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EncryptionProperties function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EncryptionProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EncryptionProperties instance.
func (me *XsdGoPkgHasElems_EncryptionProperties) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EncryptionProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptionPropertieses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EncryptionProperty struct {
	EncryptionProperty *TEncryptionPropertyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EncryptionProperty function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EncryptionProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EncryptionProperty instance.
func (me *XsdGoPkgHasElem_EncryptionProperty) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EncryptionProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptionProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_ struct {
	OriginatorKeyInfos []ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# OriginatorKeyInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_ instance.
func (me *XsdGoPkgHasElems_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_ struct {
	RecipientKeyInfos []ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# RecipientKeyInfo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_ instance.
func (me *XsdGoPkgHasElems_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_ struct {
	CarriedKeyNames []xsdt.String `xml:"http://www.w3.org/2001/04/xmlenc# CarriedKeyName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_ instance.
func (me *XsdGoPkgHasElems_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_ struct {
	CipherValues []xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# CipherValue"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElems_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_ struct {
	KeyReference *TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# KeyReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_ instance.
func (me *XsdGoPkgHasElem_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_ struct {
	KeySizes []TKeySizeType `xml:"http://www.w3.org/2001/04/xmlenc# KeySize"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_ instance.
func (me *XsdGoPkgHasElems_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_ struct {
	Transformses []*TransformsType `xml:"http://www.w3.org/2001/04/xmlenc# Transforms"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_ instance.
func (me *XsdGoPkgHasElems_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transformses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_ struct {
	OAEPparamses []xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# OAEPparams"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElems_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_ struct {
	KaNonces []xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# KA-Nonce"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_ instance.
func (me *XsdGoPkgHasElems_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_ struct {
	DataReference *TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# DataReference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_ instance.
func (me *XsdGoPkgHasElem_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_ struct {
	EncryptionMethods []*TEncryptionMethodType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionMethod"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_ instance.
func (me *XsdGoPkgHasElems_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptionMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 51 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 51 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElems_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_          func(*XsdGoPkgHasElems_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_, bool) error
	XsdGoPkgHasElem_ReferenceList                                                                                   func(*XsdGoPkgHasElem_ReferenceList, bool) error
	XsdGoPkgHasElem_AgreementMethod                                                                                 func(*XsdGoPkgHasElem_AgreementMethod, bool) error
	XsdGoPkgHasElems_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_                      func(*XsdGoPkgHasElems_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElems_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_            func(*XsdGoPkgHasElems_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_, bool) error
	TxsdReferenceList                                                                                               func(*TxsdReferenceList, bool) error
	XsdGoPkgHasElem_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_  func(*XsdGoPkgHasElem_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_, bool) error
	TransformsType                                                                                                  func(*TransformsType, bool) error
	XsdGoPkgHasElems_CipherReference                                                                                func(*XsdGoPkgHasElems_CipherReference, bool) error
	TEncryptionMethodType                                                                                           func(*TEncryptionMethodType, bool) error
	TEncryptionPropertyType                                                                                         func(*TEncryptionPropertyType, bool) error
	TEncryptedDataType                                                                                              func(*TEncryptedDataType, bool) error
	XsdGoPkgHasElems_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_                           func(*XsdGoPkgHasElems_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_, bool) error
	XsdGoPkgHasElems_EncryptedKey                                                                                   func(*XsdGoPkgHasElems_EncryptedKey, bool) error
	XsdGoPkgHasElem_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_                              func(*XsdGoPkgHasElem_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElem_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_            func(*XsdGoPkgHasElem_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_, bool) error
	TAgreementMethodType                                                                                            func(*TAgreementMethodType, bool) error
	XsdGoPkgHasElems_EncryptionProperties                                                                           func(*XsdGoPkgHasElems_EncryptionProperties, bool) error
	TEncryptedType                                                                                                  func(*TEncryptedType, bool) error
	XsdGoPkgHasElem_EncryptionProperty                                                                              func(*XsdGoPkgHasElem_EncryptionProperty, bool) error
	XsdGoPkgHasElem_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_           func(*XsdGoPkgHasElem_DataReferencechoiceTxsdReferenceListReferenceListschema_DataReference_TReferenceType_, bool) error
	XsdGoPkgHasElems_AgreementMethod                                                                                func(*XsdGoPkgHasElems_AgreementMethod, bool) error
	XsdGoPkgHasElems_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_                             func(*XsdGoPkgHasElems_KaNoncesequenceAgreementMethodTypeschema_KaNonce_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElems_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_            func(*XsdGoPkgHasElems_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_, bool) error
	XsdGoPkgHasElem_CipherReference                                                                                 func(*XsdGoPkgHasElem_CipherReference, bool) error
	TCipherDataType                                                                                                 func(*TCipherDataType, bool) error
	XsdGoPkgHasElems_EncryptedData                                                                                  func(*XsdGoPkgHasElems_EncryptedData, bool) error
	TReferenceType                                                                                                  func(*TReferenceType, bool) error
	XsdGoPkgHasElem_EncryptedKey                                                                                    func(*XsdGoPkgHasElem_EncryptedKey, bool) error
	TCipherReferenceType                                                                                            func(*TCipherReferenceType, bool) error
	XsdGoPkgHasElem_CipherData                                                                                      func(*XsdGoPkgHasElem_CipherData, bool) error
	XsdGoPkgHasElems_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_ func(*XsdGoPkgHasElems_CarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschema_CarriedKeyName_XsdtString_, bool) error
	XsdGoPkgHasElems_ReferenceList                                                                                  func(*XsdGoPkgHasElems_ReferenceList, bool) error
	XsdGoPkgHasElems_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_             func(*XsdGoPkgHasElems_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_, bool) error
	XsdGoPkgHasElems_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_                            func(*XsdGoPkgHasElems_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_, bool) error
	XsdGoPkgHasCdata                                                                                                func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_                       func(*XsdGoPkgHasElem_OAEPparamssequenceEncryptionMethodTypeschema_OAEPparams_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElems_EncryptionProperty                                                                             func(*XsdGoPkgHasElems_EncryptionProperty, bool) error
	XsdGoPkgHasElem_EncryptedData                                                                                   func(*XsdGoPkgHasElem_EncryptedData, bool) error
	XsdGoPkgHasElem_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_              func(*XsdGoPkgHasElem_RecipientKeyInfosequenceAgreementMethodTypeschema_RecipientKeyInfo_DsTKeyInfoType_, bool) error
	XsdGoPkgHasElem_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_             func(*XsdGoPkgHasElem_KeyReferencechoiceTxsdReferenceListReferenceListschema_KeyReference_TReferenceType_, bool) error
	XsdGoPkgHasElem_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_                                 func(*XsdGoPkgHasElem_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_, bool) error
	XsdGoPkgHasElem_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_             func(*XsdGoPkgHasElem_EncryptionMethodsequenceEncryptedTypeschema_EncryptionMethod_TEncryptionMethodType_, bool) error
	TEncryptionPropertiesType                                                                                       func(*TEncryptionPropertiesType, bool) error
	TEncryptedKeyType                                                                                               func(*TEncryptedKeyType, bool) error
	XsdGoPkgHasElems_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_                                func(*XsdGoPkgHasElems_KeySizesequenceEncryptionMethodTypeschema_KeySize_TKeySizeType_, bool) error
	XsdGoPkgHasElem_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_                            func(*XsdGoPkgHasElem_TransformschoiceCipherReferenceTypeschema_Transforms_TransformsType_, bool) error
	XsdGoPkgHasElem_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_                             func(*XsdGoPkgHasElem_CipherValuechoiceCipherDataTypeschema_CipherValue_XsdtBase64Binary_, bool) error
	XsdGoPkgHasElems_CipherData                                                                                     func(*XsdGoPkgHasElems_CipherData, bool) error
	XsdGoPkgHasElem_EncryptionProperties                                                                            func(*XsdGoPkgHasElem_EncryptionProperties, bool) error
	XsdGoPkgHasElems_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_           func(*XsdGoPkgHasElems_OriginatorKeyInfosequenceAgreementMethodTypeschema_OriginatorKeyInfo_DsTKeyInfoType_, bool) error
}
